# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError('Python 2.7 or later required')

# Import the low-level C/C++ module
if __package__ or '.' in __name__:
    from . import _cyclone
else:
    import _cyclone

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if name == "thisown":
        return self.this.own(value)
    if name == "this":
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if not static:
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if name == "thisown":
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cyclone.delete_SwigPyIterator

    def value(self):
        return _cyclone.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _cyclone.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _cyclone.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _cyclone.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _cyclone.SwigPyIterator_equal(self, x)

    def copy(self):
        return _cyclone.SwigPyIterator_copy(self)

    def next(self):
        return _cyclone.SwigPyIterator_next(self)

    def __next__(self):
        return _cyclone.SwigPyIterator___next__(self)

    def previous(self):
        return _cyclone.SwigPyIterator_previous(self)

    def advance(self, n):
        return _cyclone.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _cyclone.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _cyclone.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _cyclone.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _cyclone.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _cyclone.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _cyclone.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _cyclone:
_cyclone.SwigPyIterator_swigregister(SwigPyIterator)

class ParticleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _cyclone.ParticleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _cyclone.ParticleVector___nonzero__(self)

    def __bool__(self):
        return _cyclone.ParticleVector___bool__(self)

    def __len__(self):
        return _cyclone.ParticleVector___len__(self)

    def __getslice__(self, i, j):
        return _cyclone.ParticleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _cyclone.ParticleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _cyclone.ParticleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _cyclone.ParticleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _cyclone.ParticleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _cyclone.ParticleVector___setitem__(self, *args)

    def pop(self):
        return _cyclone.ParticleVector_pop(self)

    def append(self, x):
        return _cyclone.ParticleVector_append(self, x)

    def empty(self):
        return _cyclone.ParticleVector_empty(self)

    def size(self):
        return _cyclone.ParticleVector_size(self)

    def swap(self, v):
        return _cyclone.ParticleVector_swap(self, v)

    def begin(self):
        return _cyclone.ParticleVector_begin(self)

    def end(self):
        return _cyclone.ParticleVector_end(self)

    def rbegin(self):
        return _cyclone.ParticleVector_rbegin(self)

    def rend(self):
        return _cyclone.ParticleVector_rend(self)

    def clear(self):
        return _cyclone.ParticleVector_clear(self)

    def get_allocator(self):
        return _cyclone.ParticleVector_get_allocator(self)

    def pop_back(self):
        return _cyclone.ParticleVector_pop_back(self)

    def erase(self, *args):
        return _cyclone.ParticleVector_erase(self, *args)

    def __init__(self, *args):
        _cyclone.ParticleVector_swiginit(self, _cyclone.new_ParticleVector(*args))

    def push_back(self, x):
        return _cyclone.ParticleVector_push_back(self, x)

    def front(self):
        return _cyclone.ParticleVector_front(self)

    def back(self):
        return _cyclone.ParticleVector_back(self)

    def assign(self, n, x):
        return _cyclone.ParticleVector_assign(self, n, x)

    def resize(self, *args):
        return _cyclone.ParticleVector_resize(self, *args)

    def insert(self, *args):
        return _cyclone.ParticleVector_insert(self, *args)

    def reserve(self, n):
        return _cyclone.ParticleVector_reserve(self, n)

    def capacity(self):
        return _cyclone.ParticleVector_capacity(self)
    __swig_destroy__ = _cyclone.delete_ParticleVector

# Register ParticleVector in _cyclone:
_cyclone.ParticleVector_swigregister(ParticleVector)


def new_intArray(nelements):
    return _cyclone.new_intArray(nelements)

def delete_intArray(ary):
    return _cyclone.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _cyclone.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _cyclone.intArray_setitem(ary, index, value)

def new_floatArray(nelements):
    return _cyclone.new_floatArray(nelements)

def delete_floatArray(ary):
    return _cyclone.delete_floatArray(ary)

def floatArray_getitem(ary, index):
    return _cyclone.floatArray_getitem(ary, index)

def floatArray_setitem(ary, index, value):
    return _cyclone.floatArray_setitem(ary, index, value)

def new_doubleArray(nelements):
    return _cyclone.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _cyclone.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _cyclone.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _cyclone.doubleArray_setitem(ary, index, value)

def new_realArray(nelements):
    return _cyclone.new_realArray(nelements)

def delete_realArray(ary):
    return _cyclone.delete_realArray(ary)

def realArray_getitem(ary, index):
    return _cyclone.realArray_getitem(ary, index)

def realArray_setitem(ary, index, value):
    return _cyclone.realArray_setitem(ary, index, value)
R_PI = _cyclone.R_PI

def setSleepEpsilon(value):
    return _cyclone.setSleepEpsilon(value)

def getSleepEpsilon():
    return _cyclone.getSleepEpsilon()
class Vector3(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    x = property(_cyclone.Vector3_x_get, _cyclone.Vector3_x_set)
    y = property(_cyclone.Vector3_y_get, _cyclone.Vector3_y_set)
    z = property(_cyclone.Vector3_z_get, _cyclone.Vector3_z_set)

    def __init__(self, *args):
        _cyclone.Vector3_swiginit(self, _cyclone.new_Vector3(*args))

    def __iadd__(self, v):
        return _cyclone.Vector3___iadd__(self, v)

    def __add__(self, v):
        return _cyclone.Vector3___add__(self, v)

    def __isub__(self, v):
        return _cyclone.Vector3___isub__(self, v)

    def __sub__(self, v):
        return _cyclone.Vector3___sub__(self, v)

    def __imul__(self, value):
        return _cyclone.Vector3___imul__(self, value)

    def componentProduct(self, vector):
        return _cyclone.Vector3_componentProduct(self, vector)

    def componentProductUpdate(self, vector):
        return _cyclone.Vector3_componentProductUpdate(self, vector)

    def vectorProduct(self, vector):
        return _cyclone.Vector3_vectorProduct(self, vector)

    def __imod__(self, vector):
        return _cyclone.Vector3___imod__(self, vector)

    def __mod__(self, vector):
        return _cyclone.Vector3___mod__(self, vector)

    def scalarProduct(self, vector):
        return _cyclone.Vector3_scalarProduct(self, vector)

    def __mul__(self, *args):
        return _cyclone.Vector3___mul__(self, *args)

    def addScaledVector(self, vector, scale):
        return _cyclone.Vector3_addScaledVector(self, vector, scale)

    def magnitude(self):
        return _cyclone.Vector3_magnitude(self)

    def squareMagnitude(self):
        return _cyclone.Vector3_squareMagnitude(self)

    def trim(self, size):
        return _cyclone.Vector3_trim(self, size)

    def normalise(self):
        return _cyclone.Vector3_normalise(self)

    def unit(self):
        return _cyclone.Vector3_unit(self)

    def __eq__(self, other):
        return _cyclone.Vector3___eq__(self, other)

    def __ne__(self, other):
        return _cyclone.Vector3___ne__(self, other)

    def __lt__(self, other):
        return _cyclone.Vector3___lt__(self, other)

    def __gt__(self, other):
        return _cyclone.Vector3___gt__(self, other)

    def __le__(self, other):
        return _cyclone.Vector3___le__(self, other)

    def __ge__(self, other):
        return _cyclone.Vector3___ge__(self, other)

    def clear(self):
        return _cyclone.Vector3_clear(self)

    def invert(self):
        return _cyclone.Vector3_invert(self)
    __swig_destroy__ = _cyclone.delete_Vector3

# Register Vector3 in _cyclone:
_cyclone.Vector3_swigregister(Vector3)
cvar = _cyclone.cvar

class Quaternion(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    r = property(_cyclone.Quaternion_r_get, _cyclone.Quaternion_r_set)
    i = property(_cyclone.Quaternion_i_get, _cyclone.Quaternion_i_set)
    j = property(_cyclone.Quaternion_j_get, _cyclone.Quaternion_j_set)
    k = property(_cyclone.Quaternion_k_get, _cyclone.Quaternion_k_set)

    def __init__(self, *args):
        _cyclone.Quaternion_swiginit(self, _cyclone.new_Quaternion(*args))

    def normalise(self):
        return _cyclone.Quaternion_normalise(self)

    def __imul__(self, multiplier):
        return _cyclone.Quaternion___imul__(self, multiplier)

    def addScaledVector(self, vector, scale):
        return _cyclone.Quaternion_addScaledVector(self, vector, scale)

    def rotateByVector(self, vector):
        return _cyclone.Quaternion_rotateByVector(self, vector)
    __swig_destroy__ = _cyclone.delete_Quaternion

# Register Quaternion in _cyclone:
_cyclone.Quaternion_swigregister(Quaternion)

class Matrix4(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    data = property(_cyclone.Matrix4_data_get, _cyclone.Matrix4_data_set)

    def __init__(self):
        _cyclone.Matrix4_swiginit(self, _cyclone.new_Matrix4())

    def setDiagonal(self, a, b, c):
        return _cyclone.Matrix4_setDiagonal(self, a, b, c)

    def __mul__(self, *args):
        return _cyclone.Matrix4___mul__(self, *args)

    def transform(self, vector):
        return _cyclone.Matrix4_transform(self, vector)

    def getDeterminant(self):
        return _cyclone.Matrix4_getDeterminant(self)

    def setInverse(self, m):
        return _cyclone.Matrix4_setInverse(self, m)

    def inverse(self):
        return _cyclone.Matrix4_inverse(self)

    def invert(self):
        return _cyclone.Matrix4_invert(self)

    def transformDirection(self, vector):
        return _cyclone.Matrix4_transformDirection(self, vector)

    def transformInverseDirection(self, vector):
        return _cyclone.Matrix4_transformInverseDirection(self, vector)

    def transformInverse(self, vector):
        return _cyclone.Matrix4_transformInverse(self, vector)

    def getAxisVector(self, i):
        return _cyclone.Matrix4_getAxisVector(self, i)

    def setOrientationAndPos(self, q, pos):
        return _cyclone.Matrix4_setOrientationAndPos(self, q, pos)

    def fillGLArray(self, array):
        return _cyclone.Matrix4_fillGLArray(self, array)
    __swig_destroy__ = _cyclone.delete_Matrix4

# Register Matrix4 in _cyclone:
_cyclone.Matrix4_swigregister(Matrix4)

class Matrix3(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    data = property(_cyclone.Matrix3_data_get, _cyclone.Matrix3_data_set)

    def __init__(self, *args):
        _cyclone.Matrix3_swiginit(self, _cyclone.new_Matrix3(*args))

    def setDiagonal(self, a, b, c):
        return _cyclone.Matrix3_setDiagonal(self, a, b, c)

    def setInertiaTensorCoeffs(self, ix, iy, iz, ixy=0, ixz=0, iyz=0):
        return _cyclone.Matrix3_setInertiaTensorCoeffs(self, ix, iy, iz, ixy, ixz, iyz)

    def setBlockInertiaTensor(self, halfSizes, mass):
        return _cyclone.Matrix3_setBlockInertiaTensor(self, halfSizes, mass)

    def setSkewSymmetric(self, vector):
        return _cyclone.Matrix3_setSkewSymmetric(self, vector)

    def setComponents(self, compOne, compTwo, compThree):
        return _cyclone.Matrix3_setComponents(self, compOne, compTwo, compThree)

    def transform(self, vector):
        return _cyclone.Matrix3_transform(self, vector)

    def transformTranspose(self, vector):
        return _cyclone.Matrix3_transformTranspose(self, vector)

    def getRowVector(self, i):
        return _cyclone.Matrix3_getRowVector(self, i)

    def getAxisVector(self, i):
        return _cyclone.Matrix3_getAxisVector(self, i)

    def setInverse(self, m):
        return _cyclone.Matrix3_setInverse(self, m)

    def inverse(self):
        return _cyclone.Matrix3_inverse(self)

    def invert(self):
        return _cyclone.Matrix3_invert(self)

    def setTranspose(self, m):
        return _cyclone.Matrix3_setTranspose(self, m)

    def transpose(self):
        return _cyclone.Matrix3_transpose(self)

    def __mul__(self, *args):
        return _cyclone.Matrix3___mul__(self, *args)

    def __imul__(self, *args):
        return _cyclone.Matrix3___imul__(self, *args)

    def __iadd__(self, o):
        return _cyclone.Matrix3___iadd__(self, o)

    def setOrientation(self, q):
        return _cyclone.Matrix3_setOrientation(self, q)

    @staticmethod
    def linearInterpolate(a, b, prop):
        return _cyclone.Matrix3_linearInterpolate(a, b, prop)
    __swig_destroy__ = _cyclone.delete_Matrix3

# Register Matrix3 in _cyclone:
_cyclone.Matrix3_swigregister(Matrix3)

def Matrix3_linearInterpolate(a, b, prop):
    return _cyclone.Matrix3_linearInterpolate(a, b, prop)

class Random(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def rotl(self, n, r):
        return _cyclone.Random_rotl(self, n, r)

    def rotr(self, n, r):
        return _cyclone.Random_rotr(self, n, r)

    def __init__(self, *args):
        _cyclone.Random_swiginit(self, _cyclone.new_Random(*args))

    def seed(self, seed):
        return _cyclone.Random_seed(self, seed)

    def randomBits(self):
        return _cyclone.Random_randomBits(self)

    def randomReal(self, *args):
        return _cyclone.Random_randomReal(self, *args)

    def randomInt(self, max):
        return _cyclone.Random_randomInt(self, max)

    def randomBinomial(self, scale):
        return _cyclone.Random_randomBinomial(self, scale)

    def randomVector(self, *args):
        return _cyclone.Random_randomVector(self, *args)

    def randomXZVector(self, scale):
        return _cyclone.Random_randomXZVector(self, scale)

    def randomQuaternion(self):
        return _cyclone.Random_randomQuaternion(self)
    __swig_destroy__ = _cyclone.delete_Random

# Register Random in _cyclone:
_cyclone.Random_swigregister(Random)

class Particle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def integrate(self, duration):
        return _cyclone.Particle_integrate(self, duration)

    def setMass(self, mass):
        return _cyclone.Particle_setMass(self, mass)

    def getMass(self):
        return _cyclone.Particle_getMass(self)

    def setInverseMass(self, inverseMass):
        return _cyclone.Particle_setInverseMass(self, inverseMass)

    def getInverseMass(self):
        return _cyclone.Particle_getInverseMass(self)

    def hasFiniteMass(self):
        return _cyclone.Particle_hasFiniteMass(self)

    def setDamping(self, damping):
        return _cyclone.Particle_setDamping(self, damping)

    def getDamping(self):
        return _cyclone.Particle_getDamping(self)

    def setPosition(self, *args):
        return _cyclone.Particle_setPosition(self, *args)

    def getPosition(self, *args):
        return _cyclone.Particle_getPosition(self, *args)

    def setVelocity(self, *args):
        return _cyclone.Particle_setVelocity(self, *args)

    def getVelocity(self, *args):
        return _cyclone.Particle_getVelocity(self, *args)

    def setAcceleration(self, *args):
        return _cyclone.Particle_setAcceleration(self, *args)

    def getAcceleration(self, *args):
        return _cyclone.Particle_getAcceleration(self, *args)

    def clearAccumulator(self):
        return _cyclone.Particle_clearAccumulator(self)

    def addForce(self, force):
        return _cyclone.Particle_addForce(self, force)

    def __init__(self):
        _cyclone.Particle_swiginit(self, _cyclone.new_Particle())
    __swig_destroy__ = _cyclone.delete_Particle

# Register Particle in _cyclone:
_cyclone.Particle_swigregister(Particle)

class RigidBody(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def calculateDerivedData(self):
        return _cyclone.RigidBody_calculateDerivedData(self)

    def integrate(self, duration):
        return _cyclone.RigidBody_integrate(self, duration)

    def setMass(self, mass):
        return _cyclone.RigidBody_setMass(self, mass)

    def getMass(self):
        return _cyclone.RigidBody_getMass(self)

    def setInverseMass(self, inverseMass):
        return _cyclone.RigidBody_setInverseMass(self, inverseMass)

    def getInverseMass(self):
        return _cyclone.RigidBody_getInverseMass(self)

    def hasFiniteMass(self):
        return _cyclone.RigidBody_hasFiniteMass(self)

    def setInertiaTensor(self, inertiaTensor):
        return _cyclone.RigidBody_setInertiaTensor(self, inertiaTensor)

    def getInertiaTensor(self, *args):
        return _cyclone.RigidBody_getInertiaTensor(self, *args)

    def getInertiaTensorWorld(self, *args):
        return _cyclone.RigidBody_getInertiaTensorWorld(self, *args)

    def setInverseInertiaTensor(self, inverseInertiaTensor):
        return _cyclone.RigidBody_setInverseInertiaTensor(self, inverseInertiaTensor)

    def getInverseInertiaTensor(self, *args):
        return _cyclone.RigidBody_getInverseInertiaTensor(self, *args)

    def getInverseInertiaTensorWorld(self, *args):
        return _cyclone.RigidBody_getInverseInertiaTensorWorld(self, *args)

    def setDamping(self, linearDamping, angularDamping):
        return _cyclone.RigidBody_setDamping(self, linearDamping, angularDamping)

    def setLinearDamping(self, linearDamping):
        return _cyclone.RigidBody_setLinearDamping(self, linearDamping)

    def getLinearDamping(self):
        return _cyclone.RigidBody_getLinearDamping(self)

    def setAngularDamping(self, angularDamping):
        return _cyclone.RigidBody_setAngularDamping(self, angularDamping)

    def getAngularDamping(self):
        return _cyclone.RigidBody_getAngularDamping(self)

    def setPosition(self, *args):
        return _cyclone.RigidBody_setPosition(self, *args)

    def getPosition(self, *args):
        return _cyclone.RigidBody_getPosition(self, *args)

    def setOrientation(self, *args):
        return _cyclone.RigidBody_setOrientation(self, *args)

    def getOrientation(self, *args):
        return _cyclone.RigidBody_getOrientation(self, *args)

    def getGLTransform(self, matrix):
        return _cyclone.RigidBody_getGLTransform(self, matrix)

    def getTransform(self, *args):
        return _cyclone.RigidBody_getTransform(self, *args)

    def getPointInLocalSpace(self, point):
        return _cyclone.RigidBody_getPointInLocalSpace(self, point)

    def getPointInWorldSpace(self, point):
        return _cyclone.RigidBody_getPointInWorldSpace(self, point)

    def getDirectionInLocalSpace(self, direction):
        return _cyclone.RigidBody_getDirectionInLocalSpace(self, direction)

    def getDirectionInWorldSpace(self, direction):
        return _cyclone.RigidBody_getDirectionInWorldSpace(self, direction)

    def setVelocity(self, *args):
        return _cyclone.RigidBody_setVelocity(self, *args)

    def getVelocity(self, *args):
        return _cyclone.RigidBody_getVelocity(self, *args)

    def addVelocity(self, deltaVelocity):
        return _cyclone.RigidBody_addVelocity(self, deltaVelocity)

    def setRotation(self, *args):
        return _cyclone.RigidBody_setRotation(self, *args)

    def getRotation(self, *args):
        return _cyclone.RigidBody_getRotation(self, *args)

    def addRotation(self, deltaRotation):
        return _cyclone.RigidBody_addRotation(self, deltaRotation)

    def getAwake(self):
        return _cyclone.RigidBody_getAwake(self)

    def setAwake(self, awake=True):
        return _cyclone.RigidBody_setAwake(self, awake)

    def getCanSleep(self):
        return _cyclone.RigidBody_getCanSleep(self)

    def setCanSleep(self, canSleep=True):
        return _cyclone.RigidBody_setCanSleep(self, canSleep)

    def getLastFrameAcceleration(self, *args):
        return _cyclone.RigidBody_getLastFrameAcceleration(self, *args)

    def clearAccumulators(self):
        return _cyclone.RigidBody_clearAccumulators(self)

    def addForce(self, force):
        return _cyclone.RigidBody_addForce(self, force)

    def addForceAtPoint(self, force, point):
        return _cyclone.RigidBody_addForceAtPoint(self, force, point)

    def addForceAtBodyPoint(self, force, point):
        return _cyclone.RigidBody_addForceAtBodyPoint(self, force, point)

    def addTorque(self, torque):
        return _cyclone.RigidBody_addTorque(self, torque)

    def setAcceleration(self, *args):
        return _cyclone.RigidBody_setAcceleration(self, *args)

    def getAcceleration(self, *args):
        return _cyclone.RigidBody_getAcceleration(self, *args)

    def __init__(self):
        _cyclone.RigidBody_swiginit(self, _cyclone.new_RigidBody())
    __swig_destroy__ = _cyclone.delete_RigidBody

# Register RigidBody in _cyclone:
_cyclone.RigidBody_swigregister(RigidBody)

class ParticleContact(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    particle = property(_cyclone.ParticleContact_particle_get, _cyclone.ParticleContact_particle_set)
    restitution = property(_cyclone.ParticleContact_restitution_get, _cyclone.ParticleContact_restitution_set)
    contactNormal = property(_cyclone.ParticleContact_contactNormal_get, _cyclone.ParticleContact_contactNormal_set)
    penetration = property(_cyclone.ParticleContact_penetration_get, _cyclone.ParticleContact_penetration_set)
    particleMovement = property(_cyclone.ParticleContact_particleMovement_get, _cyclone.ParticleContact_particleMovement_set)

    def __init__(self):
        _cyclone.ParticleContact_swiginit(self, _cyclone.new_ParticleContact())
    __swig_destroy__ = _cyclone.delete_ParticleContact

# Register ParticleContact in _cyclone:
_cyclone.ParticleContact_swigregister(ParticleContact)

class ParticleContactResolver(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, iterations):
        _cyclone.ParticleContactResolver_swiginit(self, _cyclone.new_ParticleContactResolver(iterations))

    def setIterations(self, iterations):
        return _cyclone.ParticleContactResolver_setIterations(self, iterations)

    def resolveContacts(self, contactArray, numContacts, duration):
        return _cyclone.ParticleContactResolver_resolveContacts(self, contactArray, numContacts, duration)
    __swig_destroy__ = _cyclone.delete_ParticleContactResolver

# Register ParticleContactResolver in _cyclone:
_cyclone.ParticleContactResolver_swigregister(ParticleContactResolver)

class ParticleContactGenerator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _cyclone.delete_ParticleContactGenerator

    def addContact(self, contact, limit):
        return _cyclone.ParticleContactGenerator_addContact(self, contact, limit)

    def __init__(self):
        if self.__class__ == ParticleContactGenerator:
            _self = None
        else:
            _self = self
        _cyclone.ParticleContactGenerator_swiginit(self, _cyclone.new_ParticleContactGenerator(_self, ))
    def __disown__(self):
        self.this.disown()
        _cyclone.disown_ParticleContactGenerator(self)
        return weakref.proxy(self)

# Register ParticleContactGenerator in _cyclone:
_cyclone.ParticleContactGenerator_swigregister(ParticleContactGenerator)

class ParticleLink(ParticleContactGenerator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    particle = property(_cyclone.ParticleLink_particle_get, _cyclone.ParticleLink_particle_set)

    def addContact(self, contact, limit):
        return _cyclone.ParticleLink_addContact(self, contact, limit)

    def setParticle0(self, particle_):
        return _cyclone.ParticleLink_setParticle0(self, particle_)

    def setParticle1(self, particle_):
        return _cyclone.ParticleLink_setParticle1(self, particle_)

    def getParticle0(self):
        return _cyclone.ParticleLink_getParticle0(self)

    def getParticle1(self):
        return _cyclone.ParticleLink_getParticle1(self)

    def __init__(self):
        _cyclone.ParticleLink_swiginit(self, _cyclone.new_ParticleLink())
    __swig_destroy__ = _cyclone.delete_ParticleLink

# Register ParticleLink in _cyclone:
_cyclone.ParticleLink_swigregister(ParticleLink)

class ParticleCable(ParticleLink):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    maxLength = property(_cyclone.ParticleCable_maxLength_get, _cyclone.ParticleCable_maxLength_set)
    restitution = property(_cyclone.ParticleCable_restitution_get, _cyclone.ParticleCable_restitution_set)

    def addContact(self, contact, limit):
        return _cyclone.ParticleCable_addContact(self, contact, limit)

    def __init__(self):
        _cyclone.ParticleCable_swiginit(self, _cyclone.new_ParticleCable())
    __swig_destroy__ = _cyclone.delete_ParticleCable

# Register ParticleCable in _cyclone:
_cyclone.ParticleCable_swigregister(ParticleCable)

class ParticleRod(ParticleLink):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    length = property(_cyclone.ParticleRod_length_get, _cyclone.ParticleRod_length_set)

    def addContact(self, contact, limit):
        return _cyclone.ParticleRod_addContact(self, contact, limit)

    def __init__(self):
        _cyclone.ParticleRod_swiginit(self, _cyclone.new_ParticleRod())
    __swig_destroy__ = _cyclone.delete_ParticleRod

# Register ParticleRod in _cyclone:
_cyclone.ParticleRod_swigregister(ParticleRod)

class ParticleConstraint(ParticleContactGenerator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    particle = property(_cyclone.ParticleConstraint_particle_get, _cyclone.ParticleConstraint_particle_set)
    anchor = property(_cyclone.ParticleConstraint_anchor_get, _cyclone.ParticleConstraint_anchor_set)

    def addContact(self, contact, limit):
        return _cyclone.ParticleConstraint_addContact(self, contact, limit)
    __swig_destroy__ = _cyclone.delete_ParticleConstraint

# Register ParticleConstraint in _cyclone:
_cyclone.ParticleConstraint_swigregister(ParticleConstraint)

class ParticleCableConstraint(ParticleConstraint):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    maxLength = property(_cyclone.ParticleCableConstraint_maxLength_get, _cyclone.ParticleCableConstraint_maxLength_set)
    restitution = property(_cyclone.ParticleCableConstraint_restitution_get, _cyclone.ParticleCableConstraint_restitution_set)

    def addContact(self, contact, limit):
        return _cyclone.ParticleCableConstraint_addContact(self, contact, limit)

    def __init__(self):
        _cyclone.ParticleCableConstraint_swiginit(self, _cyclone.new_ParticleCableConstraint())
    __swig_destroy__ = _cyclone.delete_ParticleCableConstraint

# Register ParticleCableConstraint in _cyclone:
_cyclone.ParticleCableConstraint_swigregister(ParticleCableConstraint)

class ParticleRodConstraint(ParticleConstraint):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    length = property(_cyclone.ParticleRodConstraint_length_get, _cyclone.ParticleRodConstraint_length_set)

    def addContact(self, contact, limit):
        return _cyclone.ParticleRodConstraint_addContact(self, contact, limit)

    def __init__(self):
        _cyclone.ParticleRodConstraint_swiginit(self, _cyclone.new_ParticleRodConstraint())
    __swig_destroy__ = _cyclone.delete_ParticleRodConstraint

# Register ParticleRodConstraint in _cyclone:
_cyclone.ParticleRodConstraint_swigregister(ParticleRodConstraint)

class ParticleForceGenerator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _cyclone.delete_ParticleForceGenerator

    def updateForce(self, particle, duration):
        return _cyclone.ParticleForceGenerator_updateForce(self, particle, duration)

    def __init__(self):
        if self.__class__ == ParticleForceGenerator:
            _self = None
        else:
            _self = self
        _cyclone.ParticleForceGenerator_swiginit(self, _cyclone.new_ParticleForceGenerator(_self, ))
    def __disown__(self):
        self.this.disown()
        _cyclone.disown_ParticleForceGenerator(self)
        return weakref.proxy(self)

# Register ParticleForceGenerator in _cyclone:
_cyclone.ParticleForceGenerator_swigregister(ParticleForceGenerator)

class ParticleGravity(ParticleForceGenerator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, gravity):
        _cyclone.ParticleGravity_swiginit(self, _cyclone.new_ParticleGravity(gravity))

    def updateForce(self, particle, duration):
        return _cyclone.ParticleGravity_updateForce(self, particle, duration)
    __swig_destroy__ = _cyclone.delete_ParticleGravity

# Register ParticleGravity in _cyclone:
_cyclone.ParticleGravity_swigregister(ParticleGravity)

class ParticleDrag(ParticleForceGenerator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, k1, k2):
        _cyclone.ParticleDrag_swiginit(self, _cyclone.new_ParticleDrag(k1, k2))

    def updateForce(self, particle, duration):
        return _cyclone.ParticleDrag_updateForce(self, particle, duration)
    __swig_destroy__ = _cyclone.delete_ParticleDrag

# Register ParticleDrag in _cyclone:
_cyclone.ParticleDrag_swigregister(ParticleDrag)

class ParticleAnchoredSpring(ParticleForceGenerator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _cyclone.ParticleAnchoredSpring_swiginit(self, _cyclone.new_ParticleAnchoredSpring(*args))

    def getAnchor(self):
        return _cyclone.ParticleAnchoredSpring_getAnchor(self)

    def init(self, anchor, springConstant, restLength):
        return _cyclone.ParticleAnchoredSpring_init(self, anchor, springConstant, restLength)

    def updateForce(self, particle, duration):
        return _cyclone.ParticleAnchoredSpring_updateForce(self, particle, duration)
    __swig_destroy__ = _cyclone.delete_ParticleAnchoredSpring

# Register ParticleAnchoredSpring in _cyclone:
_cyclone.ParticleAnchoredSpring_swigregister(ParticleAnchoredSpring)

class ParticleAnchoredBungee(ParticleAnchoredSpring):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def updateForce(self, particle, duration):
        return _cyclone.ParticleAnchoredBungee_updateForce(self, particle, duration)

    def __init__(self):
        _cyclone.ParticleAnchoredBungee_swiginit(self, _cyclone.new_ParticleAnchoredBungee())
    __swig_destroy__ = _cyclone.delete_ParticleAnchoredBungee

# Register ParticleAnchoredBungee in _cyclone:
_cyclone.ParticleAnchoredBungee_swigregister(ParticleAnchoredBungee)

class ParticleFakeSpring(ParticleForceGenerator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, anchor, springConstant, damping):
        _cyclone.ParticleFakeSpring_swiginit(self, _cyclone.new_ParticleFakeSpring(anchor, springConstant, damping))

    def updateForce(self, particle, duration):
        return _cyclone.ParticleFakeSpring_updateForce(self, particle, duration)
    __swig_destroy__ = _cyclone.delete_ParticleFakeSpring

# Register ParticleFakeSpring in _cyclone:
_cyclone.ParticleFakeSpring_swigregister(ParticleFakeSpring)

class ParticleSpring(ParticleForceGenerator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, other, springConstant, restLength):
        _cyclone.ParticleSpring_swiginit(self, _cyclone.new_ParticleSpring(other, springConstant, restLength))

    def updateForce(self, particle, duration):
        return _cyclone.ParticleSpring_updateForce(self, particle, duration)
    __swig_destroy__ = _cyclone.delete_ParticleSpring

# Register ParticleSpring in _cyclone:
_cyclone.ParticleSpring_swigregister(ParticleSpring)

class ParticleBungee(ParticleForceGenerator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, other, springConstant, restLength):
        _cyclone.ParticleBungee_swiginit(self, _cyclone.new_ParticleBungee(other, springConstant, restLength))

    def updateForce(self, particle, duration):
        return _cyclone.ParticleBungee_updateForce(self, particle, duration)
    __swig_destroy__ = _cyclone.delete_ParticleBungee

# Register ParticleBungee in _cyclone:
_cyclone.ParticleBungee_swigregister(ParticleBungee)

class ParticleBuoyancy(ParticleForceGenerator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, maxDepth, volume, waterHeight, liquidDensity=1000.0):
        _cyclone.ParticleBuoyancy_swiginit(self, _cyclone.new_ParticleBuoyancy(maxDepth, volume, waterHeight, liquidDensity))

    def updateForce(self, particle, duration):
        return _cyclone.ParticleBuoyancy_updateForce(self, particle, duration)
    __swig_destroy__ = _cyclone.delete_ParticleBuoyancy

# Register ParticleBuoyancy in _cyclone:
_cyclone.ParticleBuoyancy_swigregister(ParticleBuoyancy)

class ParticleForceRegistry(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def add(self, particle, fg):
        return _cyclone.ParticleForceRegistry_add(self, particle, fg)

    def remove(self, particle, fg):
        return _cyclone.ParticleForceRegistry_remove(self, particle, fg)

    def clear(self):
        return _cyclone.ParticleForceRegistry_clear(self)

    def updateForces(self, duration):
        return _cyclone.ParticleForceRegistry_updateForces(self, duration)

    def __init__(self):
        _cyclone.ParticleForceRegistry_swiginit(self, _cyclone.new_ParticleForceRegistry())
    __swig_destroy__ = _cyclone.delete_ParticleForceRegistry

# Register ParticleForceRegistry in _cyclone:
_cyclone.ParticleForceRegistry_swigregister(ParticleForceRegistry)

class ParticleWorld(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, maxContacts, iterations=0):
        _cyclone.ParticleWorld_swiginit(self, _cyclone.new_ParticleWorld(maxContacts, iterations))
    __swig_destroy__ = _cyclone.delete_ParticleWorld

    def generateContacts(self):
        return _cyclone.ParticleWorld_generateContacts(self)

    def integrate(self, duration):
        return _cyclone.ParticleWorld_integrate(self, duration)

    def runPhysics(self, duration):
        return _cyclone.ParticleWorld_runPhysics(self, duration)

    def startFrame(self):
        return _cyclone.ParticleWorld_startFrame(self)

    def getParticles(self):
        return _cyclone.ParticleWorld_getParticles(self)

    def getContactGenerators(self):
        return _cyclone.ParticleWorld_getContactGenerators(self)

    def getForceRegistry(self):
        return _cyclone.ParticleWorld_getForceRegistry(self)

    def appendContactGenerator(self, contactGenerator):
        return _cyclone.ParticleWorld_appendContactGenerator(self, contactGenerator)

    def appendParticles(self, particle):
        return _cyclone.ParticleWorld_appendParticles(self, particle)

# Register ParticleWorld in _cyclone:
_cyclone.ParticleWorld_swigregister(ParticleWorld)

class GroundContacts(ParticleContactGenerator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def init(self, particles):
        return _cyclone.GroundContacts_init(self, particles)

    def addContact(self, contact, limit):
        return _cyclone.GroundContacts_addContact(self, contact, limit)

    def __init__(self):
        _cyclone.GroundContacts_swiginit(self, _cyclone.new_GroundContacts())
    __swig_destroy__ = _cyclone.delete_GroundContacts

# Register GroundContacts in _cyclone:
_cyclone.GroundContacts_swigregister(GroundContacts)

class CollisionPrimitive(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    body = property(_cyclone.CollisionPrimitive_body_get, _cyclone.CollisionPrimitive_body_set)
    offset = property(_cyclone.CollisionPrimitive_offset_get, _cyclone.CollisionPrimitive_offset_set)

    def calculateInternals(self):
        return _cyclone.CollisionPrimitive_calculateInternals(self)

    def getAxis(self, index):
        return _cyclone.CollisionPrimitive_getAxis(self, index)

    def getTransform(self):
        return _cyclone.CollisionPrimitive_getTransform(self)

    def __init__(self):
        _cyclone.CollisionPrimitive_swiginit(self, _cyclone.new_CollisionPrimitive())
    __swig_destroy__ = _cyclone.delete_CollisionPrimitive

# Register CollisionPrimitive in _cyclone:
_cyclone.CollisionPrimitive_swigregister(CollisionPrimitive)

class CollisionSphere(CollisionPrimitive):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    radius = property(_cyclone.CollisionSphere_radius_get, _cyclone.CollisionSphere_radius_set)

    def __init__(self):
        _cyclone.CollisionSphere_swiginit(self, _cyclone.new_CollisionSphere())
    __swig_destroy__ = _cyclone.delete_CollisionSphere

# Register CollisionSphere in _cyclone:
_cyclone.CollisionSphere_swigregister(CollisionSphere)

class CollisionPlane(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    direction = property(_cyclone.CollisionPlane_direction_get, _cyclone.CollisionPlane_direction_set)
    offset = property(_cyclone.CollisionPlane_offset_get, _cyclone.CollisionPlane_offset_set)

    def __init__(self):
        _cyclone.CollisionPlane_swiginit(self, _cyclone.new_CollisionPlane())
    __swig_destroy__ = _cyclone.delete_CollisionPlane

# Register CollisionPlane in _cyclone:
_cyclone.CollisionPlane_swigregister(CollisionPlane)

class CollisionBox(CollisionPrimitive):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    halfSize = property(_cyclone.CollisionBox_halfSize_get, _cyclone.CollisionBox_halfSize_set)

    def __init__(self):
        _cyclone.CollisionBox_swiginit(self, _cyclone.new_CollisionBox())
    __swig_destroy__ = _cyclone.delete_CollisionBox

# Register CollisionBox in _cyclone:
_cyclone.CollisionBox_swigregister(CollisionBox)

class IntersectionTests(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @staticmethod
    def sphereAndHalfSpace(sphere, plane):
        return _cyclone.IntersectionTests_sphereAndHalfSpace(sphere, plane)

    @staticmethod
    def sphereAndSphere(one, two):
        return _cyclone.IntersectionTests_sphereAndSphere(one, two)

    @staticmethod
    def boxAndBox(one, two):
        return _cyclone.IntersectionTests_boxAndBox(one, two)

    @staticmethod
    def boxAndHalfSpace(box, plane):
        return _cyclone.IntersectionTests_boxAndHalfSpace(box, plane)

    def __init__(self):
        _cyclone.IntersectionTests_swiginit(self, _cyclone.new_IntersectionTests())
    __swig_destroy__ = _cyclone.delete_IntersectionTests

# Register IntersectionTests in _cyclone:
_cyclone.IntersectionTests_swigregister(IntersectionTests)

def IntersectionTests_sphereAndHalfSpace(sphere, plane):
    return _cyclone.IntersectionTests_sphereAndHalfSpace(sphere, plane)

def IntersectionTests_sphereAndSphere(one, two):
    return _cyclone.IntersectionTests_sphereAndSphere(one, two)

def IntersectionTests_boxAndBox(one, two):
    return _cyclone.IntersectionTests_boxAndBox(one, two)

def IntersectionTests_boxAndHalfSpace(box, plane):
    return _cyclone.IntersectionTests_boxAndHalfSpace(box, plane)

class CollisionData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    contactArray = property(_cyclone.CollisionData_contactArray_get, _cyclone.CollisionData_contactArray_set)
    contacts = property(_cyclone.CollisionData_contacts_get, _cyclone.CollisionData_contacts_set)
    contactsLeft = property(_cyclone.CollisionData_contactsLeft_get, _cyclone.CollisionData_contactsLeft_set)
    contactCount = property(_cyclone.CollisionData_contactCount_get, _cyclone.CollisionData_contactCount_set)
    friction = property(_cyclone.CollisionData_friction_get, _cyclone.CollisionData_friction_set)
    restitution = property(_cyclone.CollisionData_restitution_get, _cyclone.CollisionData_restitution_set)
    tolerance = property(_cyclone.CollisionData_tolerance_get, _cyclone.CollisionData_tolerance_set)

    def hasMoreContacts(self):
        return _cyclone.CollisionData_hasMoreContacts(self)

    def reset(self, maxContacts):
        return _cyclone.CollisionData_reset(self, maxContacts)

    def addContacts(self, count):
        return _cyclone.CollisionData_addContacts(self, count)

    def __init__(self):
        _cyclone.CollisionData_swiginit(self, _cyclone.new_CollisionData())
    __swig_destroy__ = _cyclone.delete_CollisionData

# Register CollisionData in _cyclone:
_cyclone.CollisionData_swigregister(CollisionData)

class CollisionDataEx(CollisionData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, iteration):
        _cyclone.CollisionDataEx_swiginit(self, _cyclone.new_CollisionDataEx(iteration))

    def resolve(self, duration):
        return _cyclone.CollisionDataEx_resolve(self, duration)
    __swig_destroy__ = _cyclone.delete_CollisionDataEx

# Register CollisionDataEx in _cyclone:
_cyclone.CollisionDataEx_swigregister(CollisionDataEx)

class CollisionDetector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @staticmethod
    def sphereAndHalfSpace(sphere, plane, data):
        return _cyclone.CollisionDetector_sphereAndHalfSpace(sphere, plane, data)

    @staticmethod
    def sphereAndTruePlane(sphere, plane, data):
        return _cyclone.CollisionDetector_sphereAndTruePlane(sphere, plane, data)

    @staticmethod
    def sphereAndSphere(one, two, data):
        return _cyclone.CollisionDetector_sphereAndSphere(one, two, data)

    @staticmethod
    def boxAndHalfSpace(box, plane, data):
        return _cyclone.CollisionDetector_boxAndHalfSpace(box, plane, data)

    @staticmethod
    def boxAndBox(one, two, data):
        return _cyclone.CollisionDetector_boxAndBox(one, two, data)

    @staticmethod
    def boxAndPoint(box, point, data):
        return _cyclone.CollisionDetector_boxAndPoint(box, point, data)

    @staticmethod
    def boxAndSphere(box, sphere, data):
        return _cyclone.CollisionDetector_boxAndSphere(box, sphere, data)

    def __init__(self):
        _cyclone.CollisionDetector_swiginit(self, _cyclone.new_CollisionDetector())
    __swig_destroy__ = _cyclone.delete_CollisionDetector

# Register CollisionDetector in _cyclone:
_cyclone.CollisionDetector_swigregister(CollisionDetector)

def CollisionDetector_sphereAndHalfSpace(sphere, plane, data):
    return _cyclone.CollisionDetector_sphereAndHalfSpace(sphere, plane, data)

def CollisionDetector_sphereAndTruePlane(sphere, plane, data):
    return _cyclone.CollisionDetector_sphereAndTruePlane(sphere, plane, data)

def CollisionDetector_sphereAndSphere(one, two, data):
    return _cyclone.CollisionDetector_sphereAndSphere(one, two, data)

def CollisionDetector_boxAndHalfSpace(box, plane, data):
    return _cyclone.CollisionDetector_boxAndHalfSpace(box, plane, data)

def CollisionDetector_boxAndBox(one, two, data):
    return _cyclone.CollisionDetector_boxAndBox(one, two, data)

def CollisionDetector_boxAndPoint(box, point, data):
    return _cyclone.CollisionDetector_boxAndPoint(box, point, data)

def CollisionDetector_boxAndSphere(box, sphere, data):
    return _cyclone.CollisionDetector_boxAndSphere(box, sphere, data)

class Contact(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    body = property(_cyclone.Contact_body_get, _cyclone.Contact_body_set)
    friction = property(_cyclone.Contact_friction_get, _cyclone.Contact_friction_set)
    restitution = property(_cyclone.Contact_restitution_get, _cyclone.Contact_restitution_set)
    contactPoint = property(_cyclone.Contact_contactPoint_get, _cyclone.Contact_contactPoint_set)
    contactNormal = property(_cyclone.Contact_contactNormal_get, _cyclone.Contact_contactNormal_set)
    penetration = property(_cyclone.Contact_penetration_get, _cyclone.Contact_penetration_set)

    def setBodyData(self, one, two, friction, restitution):
        return _cyclone.Contact_setBodyData(self, one, two, friction, restitution)

    def __init__(self):
        _cyclone.Contact_swiginit(self, _cyclone.new_Contact())
    __swig_destroy__ = _cyclone.delete_Contact

# Register Contact in _cyclone:
_cyclone.Contact_swigregister(Contact)

class ContactResolver(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    velocityIterationsUsed = property(_cyclone.ContactResolver_velocityIterationsUsed_get, _cyclone.ContactResolver_velocityIterationsUsed_set)
    positionIterationsUsed = property(_cyclone.ContactResolver_positionIterationsUsed_get, _cyclone.ContactResolver_positionIterationsUsed_set)

    def __init__(self, *args):
        _cyclone.ContactResolver_swiginit(self, _cyclone.new_ContactResolver(*args))

    def isValid(self):
        return _cyclone.ContactResolver_isValid(self)

    def setIterations(self, *args):
        return _cyclone.ContactResolver_setIterations(self, *args)

    def setEpsilon(self, velocityEpsilon, positionEpsilon):
        return _cyclone.ContactResolver_setEpsilon(self, velocityEpsilon, positionEpsilon)

    def resolveContacts(self, contactArray, numContacts, duration):
        return _cyclone.ContactResolver_resolveContacts(self, contactArray, numContacts, duration)
    __swig_destroy__ = _cyclone.delete_ContactResolver

# Register ContactResolver in _cyclone:
_cyclone.ContactResolver_swigregister(ContactResolver)

class ContactGenerator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def addContact(self, contact, limit):
        return _cyclone.ContactGenerator_addContact(self, contact, limit)
    __swig_destroy__ = _cyclone.delete_ContactGenerator

# Register ContactGenerator in _cyclone:
_cyclone.ContactGenerator_swigregister(ContactGenerator)

class ForceGenerator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _cyclone.delete_ForceGenerator

    def updateForce(self, body, duration):
        return _cyclone.ForceGenerator_updateForce(self, body, duration)

    def __init__(self):
        _cyclone.ForceGenerator_swiginit(self, _cyclone.new_ForceGenerator())

# Register ForceGenerator in _cyclone:
_cyclone.ForceGenerator_swigregister(ForceGenerator)

class Gravity(ForceGenerator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, gravity):
        _cyclone.Gravity_swiginit(self, _cyclone.new_Gravity(gravity))

    def updateForce(self, body, duration):
        return _cyclone.Gravity_updateForce(self, body, duration)
    __swig_destroy__ = _cyclone.delete_Gravity

# Register Gravity in _cyclone:
_cyclone.Gravity_swigregister(Gravity)

class Spring(ForceGenerator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, localConnectionPt, other, otherConnectionPt, springConstant, restLength):
        _cyclone.Spring_swiginit(self, _cyclone.new_Spring(localConnectionPt, other, otherConnectionPt, springConstant, restLength))

    def updateForce(self, body, duration):
        return _cyclone.Spring_updateForce(self, body, duration)
    __swig_destroy__ = _cyclone.delete_Spring

# Register Spring in _cyclone:
_cyclone.Spring_swigregister(Spring)

class Aero(ForceGenerator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, tensor, position, windspeed):
        _cyclone.Aero_swiginit(self, _cyclone.new_Aero(tensor, position, windspeed))

    def updateForce(self, body, duration):
        return _cyclone.Aero_updateForce(self, body, duration)
    __swig_destroy__ = _cyclone.delete_Aero

# Register Aero in _cyclone:
_cyclone.Aero_swigregister(Aero)

class AeroEx(Aero):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, tensor, position, windspeed):
        _cyclone.AeroEx_swiginit(self, _cyclone.new_AeroEx(tensor, position, windspeed))

    def updateWindspeed(self, windspeed):
        return _cyclone.AeroEx_updateWindspeed(self, windspeed)
    __swig_destroy__ = _cyclone.delete_AeroEx

# Register AeroEx in _cyclone:
_cyclone.AeroEx_swigregister(AeroEx)

class AeroControl(AeroEx):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, base, min, max, position, windspeed):
        _cyclone.AeroControl_swiginit(self, _cyclone.new_AeroControl(base, min, max, position, windspeed))

    def setControl(self, value):
        return _cyclone.AeroControl_setControl(self, value)

    def updateForce(self, body, duration):
        return _cyclone.AeroControl_updateForce(self, body, duration)
    __swig_destroy__ = _cyclone.delete_AeroControl

# Register AeroControl in _cyclone:
_cyclone.AeroControl_swigregister(AeroControl)

class Buoyancy(ForceGenerator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, cOfB, maxDepth, volume, waterHeight, liquidDensity=1000.0):
        _cyclone.Buoyancy_swiginit(self, _cyclone.new_Buoyancy(cOfB, maxDepth, volume, waterHeight, liquidDensity))

    def updateForce(self, body, duration):
        return _cyclone.Buoyancy_updateForce(self, body, duration)
    __swig_destroy__ = _cyclone.delete_Buoyancy

# Register Buoyancy in _cyclone:
_cyclone.Buoyancy_swigregister(Buoyancy)

class ForceRegistry(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def add(self, body, fg):
        return _cyclone.ForceRegistry_add(self, body, fg)

    def remove(self, body, fg):
        return _cyclone.ForceRegistry_remove(self, body, fg)

    def clear(self):
        return _cyclone.ForceRegistry_clear(self)

    def updateForces(self, duration):
        return _cyclone.ForceRegistry_updateForces(self, duration)

    def __init__(self):
        _cyclone.ForceRegistry_swiginit(self, _cyclone.new_ForceRegistry())
    __swig_destroy__ = _cyclone.delete_ForceRegistry

# Register ForceRegistry in _cyclone:
_cyclone.ForceRegistry_swigregister(ForceRegistry)

class Joint(ContactGenerator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    body = property(_cyclone.Joint_body_get, _cyclone.Joint_body_set)
    position = property(_cyclone.Joint_position_get, _cyclone.Joint_position_set)
    error = property(_cyclone.Joint_error_get, _cyclone.Joint_error_set)

    def init(self, a, a_pos, b, b_pos, error):
        return _cyclone.Joint_init(self, a, a_pos, b, b_pos, error)

    def addContact(self, contact, limit):
        return _cyclone.Joint_addContact(self, contact, limit)

    def __init__(self):
        _cyclone.Joint_swiginit(self, _cyclone.new_Joint())
    __swig_destroy__ = _cyclone.delete_Joint

# Register Joint in _cyclone:
_cyclone.Joint_swigregister(Joint)



