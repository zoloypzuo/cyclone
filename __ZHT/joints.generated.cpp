// this file is generated by incarnation.py
#include "Core/LuaScript/LuaRegistrationManager.h"

#include "E:/ZeloEngine2/Engine/Sandbox/PhysicsBook/cyclone/joints.h"

#include "sol/sol.hpp"
#include "rttr/registration"
#include "imgui.h"

namespace Zelo
{
void luaBindJoint(sol::state_view &L)
{
    L.new_usertype<cyclone::Joint>("Joint",
        sol::constructors<cyclone::Joint()>(),
        sol::base_classes, sol::bases<class cyclone::ContactGenerator>(),
        "position", &cyclone::Joint::position,
        "error", &cyclone::Joint::error,
        "addContact", &cyclone::Joint::addContact,
        "init", &cyclone::Joint::init,
        "__DUMMY", [](){}
    );
}

void rttrRegisterJoint()
{
    rttr::registration::class_<cyclone::Joint>("Joint")
    
        .property("position", &cyclone::Joint::position)
        .property("error", &cyclone::Joint::error)
    ;
}

struct AutoRegisterf31539
{
    AutoRegisterf31539()
    {
        std::cout << "Creating reflection for class: Joint" << std::endl;
        rttrRegisterJoint();
        LuaRegistrationManager::getInstance().addRegistry(luaBindJoint);
    }
};

static AutoRegisterf31539 GAutoRegisterf31539;
}
