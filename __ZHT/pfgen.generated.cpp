// this file is generated by incarnation.py
#include "Core/LuaScript/LuaRegistrationManager.h"

#include "E:/ZeloEngine2/Engine/Sandbox/PhysicsBook/cyclone/pfgen.h"

#include "sol/sol.hpp"
#include "rttr/registration"
#include "imgui.h"

namespace Zelo
{
void luaBindParticleForceGenerator(sol::state_view &L)
{
    L.new_usertype<cyclone::ParticleForceGenerator>("ParticleForceGenerator",
        sol::constructors<cyclone::ParticleForceGenerator()>(),
        "updateForce", &cyclone::ParticleForceGenerator::updateForce,
        "__DUMMY", [](){}
    );
}

void rttrRegisterParticleForceGenerator()
{
    rttr::registration::class_<cyclone::ParticleForceGenerator>("ParticleForceGenerator")
    
    ;
}

void luaBindParticleGravity(sol::state_view &L)
{
    L.new_usertype<cyclone::ParticleGravity>("ParticleGravity",
        sol::constructors<cyclone::ParticleGravity(const cyclone::Vector3 &)>(),
        sol::base_classes, sol::bases<class cyclone::ParticleForceGenerator>(),
        "updateForce", &cyclone::ParticleGravity::updateForce,
        "__DUMMY", [](){}
    );
}

void rttrRegisterParticleGravity()
{
    rttr::registration::class_<cyclone::ParticleGravity>("ParticleGravity")
    	.constructor<const cyclone::Vector3 &>()
    ;
}

void luaBindParticleDrag(sol::state_view &L)
{
    L.new_usertype<cyclone::ParticleDrag>("ParticleDrag",
        sol::constructors<cyclone::ParticleDrag(cyclone::real,cyclone::real)>(),
        sol::base_classes, sol::bases<class cyclone::ParticleForceGenerator>(),
        "updateForce", &cyclone::ParticleDrag::updateForce,
        "__DUMMY", [](){}
    );
}

void rttrRegisterParticleDrag()
{
    rttr::registration::class_<cyclone::ParticleDrag>("ParticleDrag")
    	.constructor<cyclone::real,cyclone::real>()
    ;
}

void luaBindParticleAnchoredSpring(sol::state_view &L)
{
    L.new_usertype<cyclone::ParticleAnchoredSpring>("ParticleAnchoredSpring",
        sol::constructors<cyclone::ParticleAnchoredSpring(),cyclone::ParticleAnchoredSpring(cyclone::Vector3 *,cyclone::real,cyclone::real)>(),
        sol::base_classes, sol::bases<class cyclone::ParticleForceGenerator>(),
        "getAnchor", &cyclone::ParticleAnchoredSpring::getAnchor,
        "init", &cyclone::ParticleAnchoredSpring::init,
        "updateForce", &cyclone::ParticleAnchoredSpring::updateForce,
        "__DUMMY", [](){}
    );
}

void rttrRegisterParticleAnchoredSpring()
{
    rttr::registration::class_<cyclone::ParticleAnchoredSpring>("ParticleAnchoredSpring")
    	.constructor<>()
		.constructor<cyclone::Vector3 *,cyclone::real,cyclone::real>()
    ;
}

void luaBindParticleAnchoredBungee(sol::state_view &L)
{
    L.new_usertype<cyclone::ParticleAnchoredBungee>("ParticleAnchoredBungee",
        sol::constructors<cyclone::ParticleAnchoredBungee()>(),
        sol::base_classes, sol::bases<class cyclone::ParticleAnchoredSpring>(),
        "updateForce", &cyclone::ParticleAnchoredBungee::updateForce,
        "__DUMMY", [](){}
    );
}

void rttrRegisterParticleAnchoredBungee()
{
    rttr::registration::class_<cyclone::ParticleAnchoredBungee>("ParticleAnchoredBungee")
    
    ;
}

void luaBindParticleFakeSpring(sol::state_view &L)
{
    L.new_usertype<cyclone::ParticleFakeSpring>("ParticleFakeSpring",
        sol::constructors<cyclone::ParticleFakeSpring(cyclone::Vector3 *,cyclone::real,cyclone::real)>(),
        sol::base_classes, sol::bases<class cyclone::ParticleForceGenerator>(),
        "updateForce", &cyclone::ParticleFakeSpring::updateForce,
        "__DUMMY", [](){}
    );
}

void rttrRegisterParticleFakeSpring()
{
    rttr::registration::class_<cyclone::ParticleFakeSpring>("ParticleFakeSpring")
    	.constructor<cyclone::Vector3 *,cyclone::real,cyclone::real>()
    ;
}

void luaBindParticleSpring(sol::state_view &L)
{
    L.new_usertype<cyclone::ParticleSpring>("ParticleSpring",
        sol::constructors<cyclone::ParticleSpring(cyclone::Particle *,cyclone::real,cyclone::real)>(),
        sol::base_classes, sol::bases<class cyclone::ParticleForceGenerator>(),
        "updateForce", &cyclone::ParticleSpring::updateForce,
        "__DUMMY", [](){}
    );
}

void rttrRegisterParticleSpring()
{
    rttr::registration::class_<cyclone::ParticleSpring>("ParticleSpring")
    	.constructor<cyclone::Particle *,cyclone::real,cyclone::real>()
    ;
}

void luaBindParticleBungee(sol::state_view &L)
{
    L.new_usertype<cyclone::ParticleBungee>("ParticleBungee",
        sol::constructors<cyclone::ParticleBungee(cyclone::Particle *,cyclone::real,cyclone::real)>(),
        sol::base_classes, sol::bases<class cyclone::ParticleForceGenerator>(),
        "updateForce", &cyclone::ParticleBungee::updateForce,
        "__DUMMY", [](){}
    );
}

void rttrRegisterParticleBungee()
{
    rttr::registration::class_<cyclone::ParticleBungee>("ParticleBungee")
    	.constructor<cyclone::Particle *,cyclone::real,cyclone::real>()
    ;
}

void luaBindParticleBuoyancy(sol::state_view &L)
{
    L.new_usertype<cyclone::ParticleBuoyancy>("ParticleBuoyancy",
        sol::constructors<cyclone::ParticleBuoyancy(cyclone::real,cyclone::real,cyclone::real,cyclone::real)>(),
        sol::base_classes, sol::bases<class cyclone::ParticleForceGenerator>(),
        "updateForce", &cyclone::ParticleBuoyancy::updateForce,
        "__DUMMY", [](){}
    );
}

void rttrRegisterParticleBuoyancy()
{
    rttr::registration::class_<cyclone::ParticleBuoyancy>("ParticleBuoyancy")
    	.constructor<cyclone::real,cyclone::real,cyclone::real,cyclone::real>()
    ;
}

void luaBindParticleForceRegistry(sol::state_view &L)
{
    L.new_usertype<cyclone::ParticleForceRegistry>("ParticleForceRegistry",
        sol::constructors<cyclone::ParticleForceRegistry()>(),
        "add", &cyclone::ParticleForceRegistry::add,
        "clear", &cyclone::ParticleForceRegistry::clear,
        "remove", &cyclone::ParticleForceRegistry::remove,
        "updateForces", &cyclone::ParticleForceRegistry::updateForces,
        "__DUMMY", [](){}
    );
}

void rttrRegisterParticleForceRegistry()
{
    rttr::registration::class_<cyclone::ParticleForceRegistry>("ParticleForceRegistry")
    
    ;
}

struct AutoRegisterf26664
{
    AutoRegisterf26664()
    {
        std::cout << "Creating reflection for class: ParticleForceGenerator" << std::endl;
        rttrRegisterParticleForceGenerator();
        LuaRegistrationManager::getInstance().addRegistry(luaBindParticleForceGenerator);
        std::cout << "Creating reflection for class: ParticleGravity" << std::endl;
        rttrRegisterParticleGravity();
        LuaRegistrationManager::getInstance().addRegistry(luaBindParticleGravity);
        std::cout << "Creating reflection for class: ParticleDrag" << std::endl;
        rttrRegisterParticleDrag();
        LuaRegistrationManager::getInstance().addRegistry(luaBindParticleDrag);
        std::cout << "Creating reflection for class: ParticleAnchoredSpring" << std::endl;
        rttrRegisterParticleAnchoredSpring();
        LuaRegistrationManager::getInstance().addRegistry(luaBindParticleAnchoredSpring);
        std::cout << "Creating reflection for class: ParticleAnchoredBungee" << std::endl;
        rttrRegisterParticleAnchoredBungee();
        LuaRegistrationManager::getInstance().addRegistry(luaBindParticleAnchoredBungee);
        std::cout << "Creating reflection for class: ParticleFakeSpring" << std::endl;
        rttrRegisterParticleFakeSpring();
        LuaRegistrationManager::getInstance().addRegistry(luaBindParticleFakeSpring);
        std::cout << "Creating reflection for class: ParticleSpring" << std::endl;
        rttrRegisterParticleSpring();
        LuaRegistrationManager::getInstance().addRegistry(luaBindParticleSpring);
        std::cout << "Creating reflection for class: ParticleBungee" << std::endl;
        rttrRegisterParticleBungee();
        LuaRegistrationManager::getInstance().addRegistry(luaBindParticleBungee);
        std::cout << "Creating reflection for class: ParticleBuoyancy" << std::endl;
        rttrRegisterParticleBuoyancy();
        LuaRegistrationManager::getInstance().addRegistry(luaBindParticleBuoyancy);
        std::cout << "Creating reflection for class: ParticleForceRegistry" << std::endl;
        rttrRegisterParticleForceRegistry();
        LuaRegistrationManager::getInstance().addRegistry(luaBindParticleForceRegistry);
    }
};

static AutoRegisterf26664 GAutoRegisterf26664;
}
