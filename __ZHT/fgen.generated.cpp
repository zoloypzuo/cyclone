// this file is generated by incarnation.py
#include "Core/LuaScript/LuaRegistrationManager.h"

#include "E:/ZeloEngine2/Engine/Sandbox/PhysicsBook/cyclone/fgen.h"

#include "sol/sol.hpp"
#include "rttr/registration"
#include "imgui.h"

namespace Zelo
{
void luaBindForceGenerator(sol::state_view &L)
{
    L.new_usertype<cyclone::ForceGenerator>("ForceGenerator",
        sol::constructors<cyclone::ForceGenerator()>(),
        "updateForce", &cyclone::ForceGenerator::updateForce,
        "__DUMMY", [](){}
    );
}

void rttrRegisterForceGenerator()
{
    rttr::registration::class_<cyclone::ForceGenerator>("ForceGenerator")
    
    ;
}

void luaBindGravity(sol::state_view &L)
{
    L.new_usertype<cyclone::Gravity>("Gravity",
        sol::constructors<cyclone::Gravity(const cyclone::Vector3 &)>(),
        sol::base_classes, sol::bases<class cyclone::ForceGenerator>(),
        "updateForce", &cyclone::Gravity::updateForce,
        "__DUMMY", [](){}
    );
}

void rttrRegisterGravity()
{
    rttr::registration::class_<cyclone::Gravity>("Gravity")
    	.constructor<const cyclone::Vector3 &>()
    ;
}

void luaBindSpring(sol::state_view &L)
{
    L.new_usertype<cyclone::Spring>("Spring",
        sol::constructors<cyclone::Spring(const cyclone::Vector3 &,cyclone::RigidBody *,const cyclone::Vector3 &,cyclone::real,cyclone::real)>(),
        sol::base_classes, sol::bases<class cyclone::ForceGenerator>(),
        "updateForce", &cyclone::Spring::updateForce,
        "__DUMMY", [](){}
    );
}

void rttrRegisterSpring()
{
    rttr::registration::class_<cyclone::Spring>("Spring")
    	.constructor<const cyclone::Vector3 &,cyclone::RigidBody *,const cyclone::Vector3 &,cyclone::real,cyclone::real>()
    ;
}

void luaBindAero(sol::state_view &L)
{
    L.new_usertype<cyclone::Aero>("Aero",
        sol::constructors<cyclone::Aero(const cyclone::Matrix3 &,const cyclone::Vector3 &,const cyclone::Vector3 *)>(),
        sol::base_classes, sol::bases<class cyclone::ForceGenerator>(),
        "updateForce", &cyclone::Aero::updateForce,
        "__DUMMY", [](){}
    );
}

void rttrRegisterAero()
{
    rttr::registration::class_<cyclone::Aero>("Aero")
    	.constructor<const cyclone::Matrix3 &,const cyclone::Vector3 &,const cyclone::Vector3 *>()
    ;
}

void luaBindAeroEx(sol::state_view &L)
{
    L.new_usertype<cyclone::AeroEx>("AeroEx",
        sol::constructors<cyclone::AeroEx(const cyclone::Matrix3 &,const cyclone::Vector3 &,const cyclone::Vector3 *)>(),
        sol::base_classes, sol::bases<class cyclone::Aero>(),
        "updateWindspeed", &cyclone::AeroEx::updateWindspeed,
        "__DUMMY", [](){}
    );
}

void rttrRegisterAeroEx()
{
    rttr::registration::class_<cyclone::AeroEx>("AeroEx")
    	.constructor<const cyclone::Matrix3 &,const cyclone::Vector3 &,const cyclone::Vector3 *>()
    ;
}

void luaBindAeroControl(sol::state_view &L)
{
    L.new_usertype<cyclone::AeroControl>("AeroControl",
        sol::constructors<cyclone::AeroControl(const cyclone::Matrix3 &,const cyclone::Matrix3 &,const cyclone::Matrix3 &,const cyclone::Vector3 &,const cyclone::Vector3 *)>(),
        sol::base_classes, sol::bases<class cyclone::AeroEx>(),
        "setControl", &cyclone::AeroControl::setControl,
        "updateForce", &cyclone::AeroControl::updateForce,
        "__DUMMY", [](){}
    );
}

void rttrRegisterAeroControl()
{
    rttr::registration::class_<cyclone::AeroControl>("AeroControl")
    	.constructor<const cyclone::Matrix3 &,const cyclone::Matrix3 &,const cyclone::Matrix3 &,const cyclone::Vector3 &,const cyclone::Vector3 *>()
    ;
}

void luaBindBuoyancy(sol::state_view &L)
{
    L.new_usertype<cyclone::Buoyancy>("Buoyancy",
        sol::constructors<cyclone::Buoyancy(const cyclone::Vector3 &,cyclone::real,cyclone::real,cyclone::real,cyclone::real)>(),
        sol::base_classes, sol::bases<class cyclone::ForceGenerator>(),
        "updateForce", &cyclone::Buoyancy::updateForce,
        "__DUMMY", [](){}
    );
}

void rttrRegisterBuoyancy()
{
    rttr::registration::class_<cyclone::Buoyancy>("Buoyancy")
    	.constructor<const cyclone::Vector3 &,cyclone::real,cyclone::real,cyclone::real,cyclone::real>()
    ;
}

void luaBindForceRegistry(sol::state_view &L)
{
    L.new_usertype<cyclone::ForceRegistry>("ForceRegistry",
        sol::constructors<cyclone::ForceRegistry()>(),
        "add", &cyclone::ForceRegistry::add,
        "clear", &cyclone::ForceRegistry::clear,
        "remove", &cyclone::ForceRegistry::remove,
        "updateForces", &cyclone::ForceRegistry::updateForces,
        "__DUMMY", [](){}
    );
}

void rttrRegisterForceRegistry()
{
    rttr::registration::class_<cyclone::ForceRegistry>("ForceRegistry")
    
    ;
}

struct AutoRegisterf29763
{
    AutoRegisterf29763()
    {
        std::cout << "Creating reflection for class: ForceGenerator" << std::endl;
        rttrRegisterForceGenerator();
        LuaRegistrationManager::getInstance().addRegistry(luaBindForceGenerator);
        std::cout << "Creating reflection for class: Gravity" << std::endl;
        rttrRegisterGravity();
        LuaRegistrationManager::getInstance().addRegistry(luaBindGravity);
        std::cout << "Creating reflection for class: Spring" << std::endl;
        rttrRegisterSpring();
        LuaRegistrationManager::getInstance().addRegistry(luaBindSpring);
        std::cout << "Creating reflection for class: Aero" << std::endl;
        rttrRegisterAero();
        LuaRegistrationManager::getInstance().addRegistry(luaBindAero);
        std::cout << "Creating reflection for class: AeroEx" << std::endl;
        rttrRegisterAeroEx();
        LuaRegistrationManager::getInstance().addRegistry(luaBindAeroEx);
        std::cout << "Creating reflection for class: AeroControl" << std::endl;
        rttrRegisterAeroControl();
        LuaRegistrationManager::getInstance().addRegistry(luaBindAeroControl);
        std::cout << "Creating reflection for class: Buoyancy" << std::endl;
        rttrRegisterBuoyancy();
        LuaRegistrationManager::getInstance().addRegistry(luaBindBuoyancy);
        std::cout << "Creating reflection for class: ForceRegistry" << std::endl;
        rttrRegisterForceRegistry();
        LuaRegistrationManager::getInstance().addRegistry(luaBindForceRegistry);
    }
};

static AutoRegisterf29763 GAutoRegisterf29763;
}
