// this file is generated by incarnation.py
#include "Core/LuaScript/LuaRegistrationManager.h"

#include "E:/ZeloEngine2/Engine/Sandbox/PhysicsBook/cyclone/plinks.h"

#include "sol/sol.hpp"
#include "rttr/registration"
#include "imgui.h"

namespace Zelo
{
void luaBindParticleLink(sol::state_view &L)
{
    L.new_usertype<cyclone::ParticleLink>("ParticleLink",
        sol::constructors<cyclone::ParticleLink()>(),
        sol::base_classes, sol::bases<class cyclone::ParticleContactGenerator>(),
        "addContact", &cyclone::ParticleLink::addContact,
        "getParticle0", &cyclone::ParticleLink::getParticle0,
        "getParticle1", &cyclone::ParticleLink::getParticle1,
        "setParticle0", &cyclone::ParticleLink::setParticle0,
        "setParticle1", &cyclone::ParticleLink::setParticle1,
        "__DUMMY", [](){}
    );
}

void rttrRegisterParticleLink()
{
    rttr::registration::class_<cyclone::ParticleLink>("ParticleLink")
    
    ;
}

void luaBindParticleCable(sol::state_view &L)
{
    L.new_usertype<cyclone::ParticleCable>("ParticleCable",
        sol::constructors<cyclone::ParticleCable()>(),
        sol::base_classes, sol::bases<class cyclone::ParticleLink>(),
        "maxLength", &cyclone::ParticleCable::maxLength,
        "restitution", &cyclone::ParticleCable::restitution,
        "addContact", &cyclone::ParticleCable::addContact,
        "__DUMMY", [](){}
    );
}

void rttrRegisterParticleCable()
{
    rttr::registration::class_<cyclone::ParticleCable>("ParticleCable")
    
        .property("maxLength", &cyclone::ParticleCable::maxLength)
        .property("restitution", &cyclone::ParticleCable::restitution)
    ;
}

void luaBindParticleRod(sol::state_view &L)
{
    L.new_usertype<cyclone::ParticleRod>("ParticleRod",
        sol::constructors<cyclone::ParticleRod()>(),
        sol::base_classes, sol::bases<class cyclone::ParticleLink>(),
        "length", &cyclone::ParticleRod::length,
        "addContact", &cyclone::ParticleRod::addContact,
        "__DUMMY", [](){}
    );
}

void rttrRegisterParticleRod()
{
    rttr::registration::class_<cyclone::ParticleRod>("ParticleRod")
    
        .property("length", &cyclone::ParticleRod::length)
    ;
}

void luaBindParticleConstraint(sol::state_view &L)
{
    L.new_usertype<cyclone::ParticleConstraint>("ParticleConstraint",
        sol::constructors<>(),
        sol::base_classes, sol::bases<class cyclone::ParticleContactGenerator>(),
        "particle", &cyclone::ParticleConstraint::particle,
        "anchor", &cyclone::ParticleConstraint::anchor,
        "addContact", &cyclone::ParticleConstraint::addContact,
        "__DUMMY", [](){}
    );
}

void rttrRegisterParticleConstraint()
{
    rttr::registration::class_<cyclone::ParticleConstraint>("ParticleConstraint")
    
        .property("particle", &cyclone::ParticleConstraint::particle)
        .property("anchor", &cyclone::ParticleConstraint::anchor)
    ;
}

void luaBindParticleCableConstraint(sol::state_view &L)
{
    L.new_usertype<cyclone::ParticleCableConstraint>("ParticleCableConstraint",
        sol::constructors<cyclone::ParticleCableConstraint()>(),
        sol::base_classes, sol::bases<class cyclone::ParticleConstraint>(),
        "maxLength", &cyclone::ParticleCableConstraint::maxLength,
        "restitution", &cyclone::ParticleCableConstraint::restitution,
        "addContact", &cyclone::ParticleCableConstraint::addContact,
        "__DUMMY", [](){}
    );
}

void rttrRegisterParticleCableConstraint()
{
    rttr::registration::class_<cyclone::ParticleCableConstraint>("ParticleCableConstraint")
    
        .property("maxLength", &cyclone::ParticleCableConstraint::maxLength)
        .property("restitution", &cyclone::ParticleCableConstraint::restitution)
    ;
}

void luaBindParticleRodConstraint(sol::state_view &L)
{
    L.new_usertype<cyclone::ParticleRodConstraint>("ParticleRodConstraint",
        sol::constructors<cyclone::ParticleRodConstraint()>(),
        sol::base_classes, sol::bases<class cyclone::ParticleConstraint>(),
        "length", &cyclone::ParticleRodConstraint::length,
        "addContact", &cyclone::ParticleRodConstraint::addContact,
        "__DUMMY", [](){}
    );
}

void rttrRegisterParticleRodConstraint()
{
    rttr::registration::class_<cyclone::ParticleRodConstraint>("ParticleRodConstraint")
    
        .property("length", &cyclone::ParticleRodConstraint::length)
    ;
}

struct AutoRegisterf27247
{
    AutoRegisterf27247()
    {
        std::cout << "Creating reflection for class: ParticleLink" << std::endl;
        rttrRegisterParticleLink();
        LuaRegistrationManager::getInstance().addRegistry(luaBindParticleLink);
        std::cout << "Creating reflection for class: ParticleCable" << std::endl;
        rttrRegisterParticleCable();
        LuaRegistrationManager::getInstance().addRegistry(luaBindParticleCable);
        std::cout << "Creating reflection for class: ParticleRod" << std::endl;
        rttrRegisterParticleRod();
        LuaRegistrationManager::getInstance().addRegistry(luaBindParticleRod);
        std::cout << "Creating reflection for class: ParticleConstraint" << std::endl;
        rttrRegisterParticleConstraint();
        LuaRegistrationManager::getInstance().addRegistry(luaBindParticleConstraint);
        std::cout << "Creating reflection for class: ParticleCableConstraint" << std::endl;
        rttrRegisterParticleCableConstraint();
        LuaRegistrationManager::getInstance().addRegistry(luaBindParticleCableConstraint);
        std::cout << "Creating reflection for class: ParticleRodConstraint" << std::endl;
        rttrRegisterParticleRodConstraint();
        LuaRegistrationManager::getInstance().addRegistry(luaBindParticleRodConstraint);
    }
};

static AutoRegisterf27247 GAutoRegisterf27247;
}
