// this file is generated by incarnation.py
#include "Core/LuaScript/LuaRegistrationManager.h"

#include "E:/ZeloEngine2/Engine/Sandbox/PhysicsBook/cyclone/contacts.h"

#include "sol/sol.hpp"
#include "rttr/registration"
#include "imgui.h"

namespace Zelo
{
void luaBindContact(sol::state_view &L)
{
    L.new_usertype<cyclone::Contact>("Contact",
        sol::constructors<cyclone::Contact()>(),
        "friction", &cyclone::Contact::friction,
        "restitution", &cyclone::Contact::restitution,
        "contactPoint", &cyclone::Contact::contactPoint,
        "contactNormal", &cyclone::Contact::contactNormal,
        "penetration", &cyclone::Contact::penetration,
        "setBodyData", &cyclone::Contact::setBodyData,
        "__DUMMY", [](){}
    );
}

void rttrRegisterContact()
{
    rttr::registration::class_<cyclone::Contact>("Contact")
    
        .property("friction", &cyclone::Contact::friction)
        .property("restitution", &cyclone::Contact::restitution)
        .property("contactPoint", &cyclone::Contact::contactPoint)
        .property("contactNormal", &cyclone::Contact::contactNormal)
        .property("penetration", &cyclone::Contact::penetration)
    ;
}

void luaBindContactResolver(sol::state_view &L)
{
    auto setIterations = sol::overload(
            sol::resolve<void(unsigned int,unsigned int)>(&cyclone::ContactResolver::setIterations), 
            sol::resolve<void(unsigned int)>(&cyclone::ContactResolver::setIterations)
    );
    L.new_usertype<cyclone::ContactResolver>("ContactResolver",
        sol::constructors<cyclone::ContactResolver(unsigned int,cyclone::real,cyclone::real),cyclone::ContactResolver(unsigned int,unsigned int,cyclone::real,cyclone::real)>(),
        "velocityIterationsUsed", &cyclone::ContactResolver::velocityIterationsUsed,
        "positionIterationsUsed", &cyclone::ContactResolver::positionIterationsUsed,
        "isValid", &cyclone::ContactResolver::isValid,
        "resolveContacts", &cyclone::ContactResolver::resolveContacts,
        "setEpsilon", &cyclone::ContactResolver::setEpsilon,
        "setIterations", setIterations,
        "__DUMMY", [](){}
    );
}

void rttrRegisterContactResolver()
{
    rttr::registration::class_<cyclone::ContactResolver>("ContactResolver")
    	.constructor<unsigned int,cyclone::real,cyclone::real>()
		.constructor<unsigned int,unsigned int,cyclone::real,cyclone::real>()
        .property("velocityIterationsUsed", &cyclone::ContactResolver::velocityIterationsUsed)
        .property("positionIterationsUsed", &cyclone::ContactResolver::positionIterationsUsed)
    ;
}

void luaBindContactGenerator(sol::state_view &L)
{
    L.new_usertype<cyclone::ContactGenerator>("ContactGenerator",
        sol::constructors<>(),
        "addContact", &cyclone::ContactGenerator::addContact,
        "__DUMMY", [](){}
    );
}

void rttrRegisterContactGenerator()
{
    rttr::registration::class_<cyclone::ContactGenerator>("ContactGenerator")
    
    ;
}

struct AutoRegisterf15162
{
    AutoRegisterf15162()
    {
        std::cout << "Creating reflection for class: Contact" << std::endl;
        rttrRegisterContact();
        LuaRegistrationManager::getInstance().addRegistry(luaBindContact);
        std::cout << "Creating reflection for class: ContactResolver" << std::endl;
        rttrRegisterContactResolver();
        LuaRegistrationManager::getInstance().addRegistry(luaBindContactResolver);
        std::cout << "Creating reflection for class: ContactGenerator" << std::endl;
        rttrRegisterContactGenerator();
        LuaRegistrationManager::getInstance().addRegistry(luaBindContactGenerator);
    }
};

static AutoRegisterf15162 GAutoRegisterf15162;
}
