// this file is generated by incarnation.py
#include "Core/LuaScript/LuaRegistrationManager.h"

#include "E:/ZeloEngine2/Engine/Sandbox/PhysicsBook/cyclone/random.h"

#include "sol/sol.hpp"
#include "rttr/registration"
#include "imgui.h"

namespace Zelo
{
void luaBindRandom(sol::state_view &L)
{
    auto randomReal = sol::overload(
            sol::resolve<cyclone::real()>(&cyclone::Random::randomReal), 
            sol::resolve<cyclone::real(cyclone::real)>(&cyclone::Random::randomReal), 
            sol::resolve<cyclone::real(cyclone::real,cyclone::real)>(&cyclone::Random::randomReal)
    );
    auto randomVector = sol::overload(
            sol::resolve<cyclone::Vector3(cyclone::real)>(&cyclone::Random::randomVector), 
            sol::resolve<cyclone::Vector3(const cyclone::Vector3 &)>(&cyclone::Random::randomVector), 
            sol::resolve<cyclone::Vector3(const cyclone::Vector3 &,const cyclone::Vector3 &)>(&cyclone::Random::randomVector)
    );
    L.new_usertype<cyclone::Random>("Random",
        sol::constructors<cyclone::Random(),cyclone::Random(unsigned int)>(),
        "randomBinomial", &cyclone::Random::randomBinomial,
        "randomBits", &cyclone::Random::randomBits,
        "randomInt", &cyclone::Random::randomInt,
        "randomQuaternion", &cyclone::Random::randomQuaternion,
        "randomXZVector", &cyclone::Random::randomXZVector,
        "rotl", &cyclone::Random::rotl,
        "rotr", &cyclone::Random::rotr,
        "seed", &cyclone::Random::seed,
        "randomReal", randomReal,
        "randomVector", randomVector,
        "__DUMMY", [](){}
    );
}

void rttrRegisterRandom()
{
    rttr::registration::class_<cyclone::Random>("Random")
    	.constructor<>()
		.constructor<unsigned int>()
    ;
}

struct AutoRegisterf43061
{
    AutoRegisterf43061()
    {
        std::cout << "Creating reflection for class: Random" << std::endl;
        rttrRegisterRandom();
        LuaRegistrationManager::getInstance().addRegistry(luaBindRandom);
    }
};

static AutoRegisterf43061 GAutoRegisterf43061;
}
