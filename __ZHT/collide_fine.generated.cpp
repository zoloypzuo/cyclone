// this file is generated by incarnation.py
#include "Core/LuaScript/LuaRegistrationManager.h"

#include "E:/ZeloEngine2/Engine/Sandbox/PhysicsBook/cyclone/collide_fine.h"

#include "sol/sol.hpp"
#include "rttr/registration"
#include "imgui.h"

namespace Zelo
{
void luaBindCollisionPrimitive(sol::state_view &L)
{
    L.new_usertype<cyclone::CollisionPrimitive>("CollisionPrimitive",
        sol::constructors<cyclone::CollisionPrimitive()>(),
        "body", &cyclone::CollisionPrimitive::body,
        "offset", &cyclone::CollisionPrimitive::offset,
        "calculateInternals", &cyclone::CollisionPrimitive::calculateInternals,
        "getAxis", &cyclone::CollisionPrimitive::getAxis,
        "getTransform", &cyclone::CollisionPrimitive::getTransform,
        "__DUMMY", [](){}
    );
}

void rttrRegisterCollisionPrimitive()
{
    rttr::registration::class_<cyclone::CollisionPrimitive>("CollisionPrimitive")
    
        .property("body", &cyclone::CollisionPrimitive::body)
        .property("offset", &cyclone::CollisionPrimitive::offset)
    ;
}

void luaBindCollisionSphere(sol::state_view &L)
{
    L.new_usertype<cyclone::CollisionSphere>("CollisionSphere",
        sol::constructors<cyclone::CollisionSphere()>(),
        sol::base_classes, sol::bases<class cyclone::CollisionPrimitive>(),
        "radius", &cyclone::CollisionSphere::radius,
        "__DUMMY", [](){}
    );
}

void rttrRegisterCollisionSphere()
{
    rttr::registration::class_<cyclone::CollisionSphere>("CollisionSphere")
    
        .property("radius", &cyclone::CollisionSphere::radius)
    ;
}

void luaBindCollisionPlane(sol::state_view &L)
{
    L.new_usertype<cyclone::CollisionPlane>("CollisionPlane",
        sol::constructors<cyclone::CollisionPlane()>(),
        "direction", &cyclone::CollisionPlane::direction,
        "offset", &cyclone::CollisionPlane::offset,
        "__DUMMY", [](){}
    );
}

void rttrRegisterCollisionPlane()
{
    rttr::registration::class_<cyclone::CollisionPlane>("CollisionPlane")
    
        .property("direction", &cyclone::CollisionPlane::direction)
        .property("offset", &cyclone::CollisionPlane::offset)
    ;
}

void luaBindCollisionBox(sol::state_view &L)
{
    L.new_usertype<cyclone::CollisionBox>("CollisionBox",
        sol::constructors<cyclone::CollisionBox()>(),
        sol::base_classes, sol::bases<class cyclone::CollisionPrimitive>(),
        "halfSize", &cyclone::CollisionBox::halfSize,
        "__DUMMY", [](){}
    );
}

void rttrRegisterCollisionBox()
{
    rttr::registration::class_<cyclone::CollisionBox>("CollisionBox")
    
        .property("halfSize", &cyclone::CollisionBox::halfSize)
    ;
}

void luaBindIntersectionTests(sol::state_view &L)
{
    L.new_usertype<cyclone::IntersectionTests>("IntersectionTests",
        sol::constructors<cyclone::IntersectionTests()>(),
        "boxAndBox", &cyclone::IntersectionTests::boxAndBox,
        "boxAndHalfSpace", &cyclone::IntersectionTests::boxAndHalfSpace,
        "sphereAndHalfSpace", &cyclone::IntersectionTests::sphereAndHalfSpace,
        "sphereAndSphere", &cyclone::IntersectionTests::sphereAndSphere,
        "__DUMMY", [](){}
    );
}

void rttrRegisterIntersectionTests()
{
    rttr::registration::class_<cyclone::IntersectionTests>("IntersectionTests")
    
    ;
}

void luaBindCollisionData(sol::state_view &L)
{
    L.new_usertype<cyclone::CollisionData>("CollisionData",
        sol::constructors<cyclone::CollisionData()>(),
        "contactArray", &cyclone::CollisionData::contactArray,
        "contacts", &cyclone::CollisionData::contacts,
        "contactsLeft", &cyclone::CollisionData::contactsLeft,
        "contactCount", &cyclone::CollisionData::contactCount,
        "friction", &cyclone::CollisionData::friction,
        "restitution", &cyclone::CollisionData::restitution,
        "tolerance", &cyclone::CollisionData::tolerance,
        "addContacts", &cyclone::CollisionData::addContacts,
        "hasMoreContacts", &cyclone::CollisionData::hasMoreContacts,
        "reset", &cyclone::CollisionData::reset,
        "__DUMMY", [](){}
    );
}

void rttrRegisterCollisionData()
{
    rttr::registration::class_<cyclone::CollisionData>("CollisionData")
    
        .property("contactArray", &cyclone::CollisionData::contactArray)
        .property("contacts", &cyclone::CollisionData::contacts)
        .property("contactsLeft", &cyclone::CollisionData::contactsLeft)
        .property("contactCount", &cyclone::CollisionData::contactCount)
        .property("friction", &cyclone::CollisionData::friction)
        .property("restitution", &cyclone::CollisionData::restitution)
        .property("tolerance", &cyclone::CollisionData::tolerance)
    ;
}

void luaBindCollisionDataEx(sol::state_view &L)
{
    L.new_usertype<cyclone::CollisionDataEx>("CollisionDataEx",
        sol::constructors<cyclone::CollisionDataEx(int)>(),
        sol::base_classes, sol::bases<struct cyclone::CollisionData>(),
        "resolve", &cyclone::CollisionDataEx::resolve,
        "__DUMMY", [](){}
    );
}

void rttrRegisterCollisionDataEx()
{
    rttr::registration::class_<cyclone::CollisionDataEx>("CollisionDataEx")
    	.constructor<int>()
    ;
}

void luaBindCollisionDetector(sol::state_view &L)
{
    L.new_usertype<cyclone::CollisionDetector>("CollisionDetector",
        sol::constructors<cyclone::CollisionDetector()>(),
        "boxAndBox", &cyclone::CollisionDetector::boxAndBox,
        "boxAndHalfSpace", &cyclone::CollisionDetector::boxAndHalfSpace,
        "boxAndPoint", &cyclone::CollisionDetector::boxAndPoint,
        "boxAndSphere", &cyclone::CollisionDetector::boxAndSphere,
        "sphereAndHalfSpace", &cyclone::CollisionDetector::sphereAndHalfSpace,
        "sphereAndSphere", &cyclone::CollisionDetector::sphereAndSphere,
        "sphereAndTruePlane", &cyclone::CollisionDetector::sphereAndTruePlane,
        "__DUMMY", [](){}
    );
}

void rttrRegisterCollisionDetector()
{
    rttr::registration::class_<cyclone::CollisionDetector>("CollisionDetector")
    
    ;
}

struct AutoRegisterf60396
{
    AutoRegisterf60396()
    {
        std::cout << "Creating reflection for class: CollisionPrimitive" << std::endl;
        rttrRegisterCollisionPrimitive();
        LuaRegistrationManager::getInstance().addRegistry(luaBindCollisionPrimitive);
        std::cout << "Creating reflection for class: CollisionSphere" << std::endl;
        rttrRegisterCollisionSphere();
        LuaRegistrationManager::getInstance().addRegistry(luaBindCollisionSphere);
        std::cout << "Creating reflection for class: CollisionPlane" << std::endl;
        rttrRegisterCollisionPlane();
        LuaRegistrationManager::getInstance().addRegistry(luaBindCollisionPlane);
        std::cout << "Creating reflection for class: CollisionBox" << std::endl;
        rttrRegisterCollisionBox();
        LuaRegistrationManager::getInstance().addRegistry(luaBindCollisionBox);
        std::cout << "Creating reflection for class: IntersectionTests" << std::endl;
        rttrRegisterIntersectionTests();
        LuaRegistrationManager::getInstance().addRegistry(luaBindIntersectionTests);
        std::cout << "Creating reflection for class: CollisionData" << std::endl;
        rttrRegisterCollisionData();
        LuaRegistrationManager::getInstance().addRegistry(luaBindCollisionData);
        std::cout << "Creating reflection for class: CollisionDataEx" << std::endl;
        rttrRegisterCollisionDataEx();
        LuaRegistrationManager::getInstance().addRegistry(luaBindCollisionDataEx);
        std::cout << "Creating reflection for class: CollisionDetector" << std::endl;
        rttrRegisterCollisionDetector();
        LuaRegistrationManager::getInstance().addRegistry(luaBindCollisionDetector);
    }
};

static AutoRegisterf60396 GAutoRegisterf60396;
}
