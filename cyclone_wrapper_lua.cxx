/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGLUA
#define SWIGLUA
#endif

#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_NO_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)

struct swig_elua_entry;

typedef struct swig_elua_key {
  int type;
  union {
    const char* strkey;
    lua_Number numkey;
  } key;
} swig_elua_key;

typedef struct swig_elua_val {
  int type;
  union {
    lua_Number number;
    const struct swig_elua_entry *table;
    const char *string;
    lua_CFunction function;
    struct {
      char member;
      long lvalue;
      void *pvalue;
      swig_type_info **ptype;
    } userdata;
  } value;
} swig_elua_val;

typedef struct swig_elua_entry {
  swig_elua_key key;
  swig_elua_val value;
} swig_elua_entry;

#define LSTRKEY(x) {LUA_TSTRING, {.strkey = x} }
#define LNUMKEY(x) {LUA_TNUMBER, {.numkey = x} }
#define LNILKEY {LUA_TNIL, {.strkey = 0} }

#define LNUMVAL(x) {LUA_TNUMBER, {.number = x} }
#define LFUNCVAL(x) {LUA_TFUNCTION, {.function = x} }
#define LROVAL(x) {LUA_TTABLE, {.table = x} }
#define LNILVAL {LUA_TNIL, {.string = 0} }
#define LSTRVAL(x) {LUA_TSTRING, {.string = x} }

#define LUA_REG_TYPE swig_elua_entry

#define SWIG_LUA_ELUA_EMUL_METATABLE_KEY "__metatable"

#define lua_pushrotable(L,p)\
  lua_newtable(L);\
  assert(p);\
  SWIG_Lua_elua_emulate_register(L,(swig_elua_entry*)(p));

#define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={0,0,(void*)(C),&D} } }

#define SWIG_LUA_CONSTTAB_BINARY(B,S,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={1,S,(void*)(C),&D} } }
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
    /* Those two types of constants are not supported in elua */

#ifndef SWIG_LUA_CONSTTAB_POINTER
#warning eLua does not support pointers as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_POINTER(B,C,D) LSTRKEY(B), LNILVAL
#endif

#ifndef SWIG_LUA_CONSTTAB_BINARY
#warning eLua does not support pointers to member as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D) LSTRKEY(B), LNILVAL
#endif
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
       SWIG_LUA_POINTER, (char *)B, 0, 0, (void *)C, &D
#  define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D)\
       SWIG_LUA_BINARY,  (char *)B, S, 0, (void *)C, &D
#endif

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)

#ifndef MIN_OPT_LEVEL
#define MIN_OPT_LEVEL 2
#endif

#include "lrodefs.h"
#include "lrotable.h"
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/
/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif

/* lua_absindex was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_absindex(L,i) ((i)>0 || (i) <= LUA_REGISTRYINDEX ? (i) : lua_gettop(L) + (i) + 1)
#endif

/* lua_rawsetp was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
#define lua_rawsetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_insert(L,-2);\
  lua_rawset(L,index);

#define lua_rawgetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_rawget(L,index);

#endif

/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the location of the innermost Lua call-point
   (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the
   location of the innermost Lua call-point (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
typedef const LUA_REG_TYPE swig_lua_method;
typedef const LUA_REG_TYPE swig_lua_const_info;
#else /* Normal lua */
typedef luaL_Reg swig_lua_method;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

#endif

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;


struct swig_lua_class;
/* Can be used to create namespaces. Currently used to wrap class static methods/variables/constants */
typedef struct swig_lua_namespace {
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
  struct swig_lua_class        **ns_classes;
  struct swig_lua_namespace    **ns_namespaces;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name; /* Name that this class has in Lua */
  const char    *fqname; /* Fully qualified name - Scope + class name */
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  swig_lua_namespace    *cls_static;
  swig_lua_method   *metatable; /* 0 for -eluac */
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitrary amount of data */
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } else


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

#define SWIG_Lua_add_boolean(L,n,b) \
  (lua_pushstring(L, n), \
      lua_pushboolean(L, b), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers
it gets the address, casts it, then dereferences it */
/*#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a))) */
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State *L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State *L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State *L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

#ifdef SWIG_LUA_ELUA_EMULATE

SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own);
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type);
static int swig_lua_elua_emulate_unique_key;

/* This function emulates eLua rotables behaviour. It loads a rotable definition into the usual lua table. */
SWIGINTERN void SWIG_Lua_elua_emulate_register(lua_State *L, const swig_elua_entry *table)
{
  int i, table_parsed, parsed_tables_array, target_table;
  assert(lua_istable(L,-1));
  target_table = lua_gettop(L);
  /* Get the registry where we put all parsed tables to avoid loops */
  lua_rawgetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
  if(lua_isnil(L,-1)) {
    lua_pop(L,1);
    lua_newtable(L);
    lua_pushvalue(L,-1);
    lua_rawsetp(L,LUA_REGISTRYINDEX,(void*)(&swig_lua_elua_emulate_unique_key));
  }
  parsed_tables_array = lua_gettop(L);
  lua_pushvalue(L,target_table);
  lua_rawsetp(L, parsed_tables_array, table);
  table_parsed = 0;
  const int SWIGUNUSED pairs_start = lua_gettop(L);
  for(i = 0;table[i].key.type != LUA_TNIL || table[i].value.type != LUA_TNIL;i++)
  {
    const swig_elua_entry *entry = table + i;
    int is_metatable = 0;
    switch(entry->key.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->key.key.strkey);
        if(strcmp(entry->key.key.strkey, SWIG_LUA_ELUA_EMUL_METATABLE_KEY) == 0)
          is_metatable = 1;
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->key.key.numkey);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    switch(entry->value.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->value.value.string);
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->value.value.number);
        break;
      case LUA_TFUNCTION:
        lua_pushcfunction(L,entry->value.value.function);
        break;
      case LUA_TTABLE:
        lua_rawgetp(L,parsed_tables_array, entry->value.value.table);
        table_parsed = !lua_isnil(L,-1);
        if(!table_parsed) {
          lua_pop(L,1); /*remove nil */
          lua_newtable(L);
          SWIG_Lua_elua_emulate_register(L,entry->value.value.table);
        }
        if(is_metatable) {
          assert(lua_istable(L,-1));
          lua_pushvalue(L,-1);
          lua_setmetatable(L,target_table);
        }

        break;
      case LUA_TUSERDATA:
        if(entry->value.value.userdata.member)
          SWIG_NewMemberObj(L,entry->value.value.userdata.pvalue,
              entry->value.value.userdata.lvalue,
              *(entry->value.value.userdata.ptype));
        else
          SWIG_NewPointerObj(L,entry->value.value.userdata.pvalue,
              *(entry->value.value.userdata.ptype),0);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    assert(lua_gettop(L) == pairs_start + 2);
    lua_rawset(L,target_table);
  }
  lua_pop(L,1); /* Removing parsed tables storage */
  assert(lua_gettop(L) == target_table);
}

SWIGINTERN void SWIG_Lua_elua_emulate_register_clear(lua_State *L)
{
  lua_pushnil(L);
  lua_rawsetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
}

SWIGINTERN void SWIG_Lua_get_class_registry(lua_State *L);

SWIGINTERN int SWIG_Lua_emulate_elua_getmetatable(lua_State *L)
{
  SWIG_check_num_args("getmetatable(SWIG eLua emulation)", 1, 1);
  SWIG_Lua_get_class_registry(L);
  lua_getfield(L,-1,"lua_getmetatable");
  lua_remove(L,-2); /* remove the registry*/
  assert(!lua_isnil(L,-1));
  lua_pushvalue(L,1);
  assert(lua_gettop(L) == 3); /* object | function | object again */
  lua_call(L,1,1);
  if(!lua_isnil(L,-1)) /*There is an ordinary metatable */
    return 1;
  /*if it is a table, then emulate elua behaviour - check for __metatable attribute of a table*/
  assert(lua_gettop(L) == 2);
  if(lua_istable(L,-2)) {
    lua_pop(L,1); /*remove the nil*/
    lua_getfield(L,-1, SWIG_LUA_ELUA_EMUL_METATABLE_KEY);
  }
  assert(lua_gettop(L) == 2);
  return 1;

fail:
  lua_error(L);
  return 0;
}

SWIGINTERN void SWIG_Lua_emulate_elua_swap_getmetatable(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushglobaltable(L);
  lua_pushstring(L,"lua_getmetatable");
  lua_getfield(L,-2,"getmetatable");
  assert(!lua_isnil(L,-1));
  lua_rawset(L,-4);
  lua_pushstring(L, "getmetatable");
  lua_pushcfunction(L, SWIG_Lua_emulate_elua_getmetatable);
  lua_rawset(L,-3);
  lua_pop(L,2);

}
/* END OF REMOVE */

#endif
/* -----------------------------------------------------------------------------
 * global variable support code: namespaces and modules (which are the same thing)
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

SWIGINTERN int SWIG_Lua_namespace_set(lua_State *L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  lua_pop(L,1); /* remote metatable */
  lua_rawset(L,-3);
  return 0;
}

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
SWIGINTERN void SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]); /* forward declaration */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn); /* forward declaration */
SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss);

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State *L, swig_lua_namespace *ns)
{
  int i;
  /* There must be namespace table (not metatable) at the top of the stack */
  assert(lua_istable(L,-1));
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  /* add methods to the namespace/module table */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].func);
  }
  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
    SWIG_Lua_add_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* clear stack - remove metatble */
  lua_pop(L,1);
  return 0;
}

/* Register all classes in the namespace */
SWIGINTERN void SWIG_Lua_add_namespace_classes(lua_State *L, swig_lua_namespace *ns)
{
  swig_lua_class **classes;

  /* There must be a module/namespace table at the top of the stack */
  assert(lua_istable(L,-1));

  classes = ns->ns_classes;

  if( classes != 0 ) {
    while(*classes != 0) {
      SWIG_Lua_class_register(L, *classes);
      classes++;
    }
  }
}

/* Helper function. Creates namespace table and adds it to module table
   if 'reg' is true, then will register namespace table to parent one (must be on top of the stack
   when function is called).
   Function always returns newly registered table on top of the stack.
*/
SWIGINTERN void SWIG_Lua_namespace_register(lua_State *L, swig_lua_namespace *ns, int reg)
{
  swig_lua_namespace **sub_namespace;
  /* 1 argument - table on the top of the stack */
  const int SWIGUNUSED begin = lua_gettop(L);
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table or parent namespace table */
  lua_checkstack(L,5);
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */

  /* Register all functions, variables etc */
  SWIG_Lua_add_namespace_details(L,ns);
  /* Register classes */
  SWIG_Lua_add_namespace_classes(L,ns);

  sub_namespace = ns->ns_namespaces;
  if( sub_namespace != 0) {
    while(*sub_namespace != 0) {
      SWIG_Lua_namespace_register(L, *sub_namespace, 1);
      lua_pop(L,1); /* removing sub-namespace table */
      sub_namespace++;
    }
  }

  if (reg) {
    lua_pushstring(L,ns->name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4); /* add namespace to module table */
  }
  assert(lua_gettop(L) == begin+1);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname);

typedef int (*swig_lua_base_iterator_func)(lua_State*,swig_type_info*, int, int *ret);

SWIGINTERN int SWIG_Lua_iterate_bases(lua_State *L, swig_type_info * SWIGUNUSED swig_type,
  int first_arg, swig_lua_base_iterator_func func, int  *const ret)
{
    /* first_arg - position of the object in stack. Everything that is above are arguments
     * and is passed to every evocation of the func */
    int last_arg = lua_gettop(L);/* position of last argument */
    int original_metatable = last_arg + 1;
    size_t bases_count;
    int result = SWIG_ERROR;
    int bases_table;
    (void)swig_type;
    lua_getmetatable(L,first_arg);

    /* initialise base search */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
    SWIG_Lua_get_table(L,".bases");
    assert(lua_istable(L,-1));
    bases_count = lua_rawlen(L,-1);
    bases_table = lua_gettop(L);
#else
    /* In elua .bases table doesn't exist. Use table from swig_lua_class */
    (void)bases_table;
    assert(swig_type!=0);
    swig_module_info *module=SWIG_GetModule(L);
    swig_lua_class **bases= ((swig_lua_class*)(swig_type->clientdata))->bases;
    const char **base_names= ((swig_lua_class*)(swig_type->clientdata))->base_names;
    bases_count = 0;
    for(;base_names[bases_count];
      bases_count++);/* get length of bases */
#endif

    if(ret)
      *ret = 0;
    if(bases_count>0)
    {
      int to_remove;
      size_t i;
      int j;
      int subcall_last_arg;
      int subcall_first_arg = lua_gettop(L) + 1;/* Here a copy of first_arg and arguments begin */
      int valid = 1;
      swig_type_info *base_swig_type = 0;
      for(j=first_arg;j<=last_arg;j++)
        lua_pushvalue(L,j);
      subcall_last_arg = lua_gettop(L);

      /* Trick: temporarily replacing original metatable with metatable for base class and call getter */
      for(i=0;i<bases_count;i++) {
        /* Iteration through class bases */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
        lua_rawgeti(L,bases_table,i+1);
        base_swig_type = 0;
        if(lua_isnil(L,-1)) {
          valid = 0;
          lua_pop(L,1);
        } else {
          valid = 1;
        }
#else /* In elua .bases table doesn't exist. Use table from swig_lua_class */
        swig_lua_class *base_class = bases[i];
        if(!base_class) {
          valid = 0;
        } else {
          valid = 1;
          SWIG_Lua_get_class_metatable(L,base_class->fqname);
          base_swig_type = SWIG_TypeQueryModule(module,module,base_names[i]);
          assert(base_swig_type != 0);
        }
#endif

        if(!valid)
          continue;
        assert(lua_isuserdata(L, subcall_first_arg));
        assert(lua_istable(L,-1));
        lua_setmetatable(L,subcall_first_arg); /* Set new metatable */
        assert(lua_gettop(L) == subcall_last_arg);
        result = func(L, base_swig_type,subcall_first_arg, ret); /* Forward call */
        if(result != SWIG_ERROR) {
          break;
        }
      }
      /* Restore original metatable */
      lua_pushvalue(L,original_metatable);
      lua_setmetatable(L,first_arg);
      /* Clear - remove everything between last_arg and subcall_last_arg including */
      to_remove = subcall_last_arg - last_arg;
      for(j=0;j<to_remove;j++)
        lua_remove(L,last_arg+1);
    } else {
      /* Remove everything after last_arg */
      lua_pop(L, lua_gettop(L) - last_arg);
    }
    if(ret) assert(lua_gettop(L) == last_arg + *ret);
    return result;
}

/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get_item(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret) *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get_item,ret);
  return bases_search_result;  /* sorry not known */
}


/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if its a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get,ret);
  return bases_search_result;  /* sorry not known */
}

/* the class.get method, performs the lookup of class attributes
 */
SWIGINTERN int  SWIG_Lua_class_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  int ret = 0;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_get(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  result = SWIG_Lua_class_do_get_item(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  return 0;
}

/* helper for the class.set method, performs the lookup of class attributes
 * It returns error code. Number of function return values is passed inside 'ret'
 */
SWIGINTERN int  SWIG_Lua_class_do_set(lua_State *L, swig_type_info *type, int first_arg, int *ret)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */

  int bases_search_result;
  int substack_start = lua_gettop(L) - 3;
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,substack_start+1));  /* just in case */
  lua_getmetatable(L,substack_start+1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  if(ret)
    *ret = 0; /* it is setter - number of return values is always 0 */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,substack_start+2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,-2); /* tidy stack, remove .set table */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,substack_start+1);  /* userdata */
      lua_pushvalue(L,substack_start+3);  /* value */
      lua_call(L,2,0);
      lua_remove(L,substack_start+4); /*remove metatable*/
      return SWIG_OK;
    }
    lua_pop(L,1);  /* remove the value */
  } else {
    lua_pop(L,1);  /* remove the answer for .set table request*/
  }
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_pushvalue(L,substack_start+3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return SWIG_OK;
  }
  lua_pop(L,1); /* remove value */

  lua_pop(L,1); /* remove metatable */
  /* Search among bases */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,first_arg,SWIG_Lua_class_do_set,ret);
  if(ret)
    assert(*ret == 0);
  assert(lua_gettop(L) == substack_start + 3);
  return bases_search_result;
}

/* This is the actual method exported to Lua. It calls SWIG_Lua_class_do_set and correctly
 * handles return values.
 */
SWIGINTERN int  SWIG_Lua_class_set(lua_State *L)
{
/*  There should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */
  int ret = 0;
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_set(L,type,1,&ret);
  if(result != SWIG_OK) {
   SWIG_Lua_pushferrstring(L,"Assignment not possible. No setter/member with this name. For custom assignments implement __setitem method.");
   lua_error(L);
  } else {
    assert(ret==0);
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  swig_lua_class *clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State *L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  swig_lua_userdata* userData;
  assert(lua_isuserdata(L,1));  /* just in case */
  userData = (swig_lua_userdata*)lua_touserdata(L,1); /* get the userdata address */

  lua_pushfstring(L, "<userdata of type '%s' at %p>", userData->type->str, userData->ptr);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */

  usr->own = 0; /* clear our ownership */
  return 0;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_class_equal(lua_State *L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* populate table at the top of the stack with metamethods that ought to be inherited */
SWIGINTERN void SWIG_Lua_populate_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_add_boolean(L, "__add", 1);
  SWIG_Lua_add_boolean(L, "__sub", 1);
  SWIG_Lua_add_boolean(L, "__mul", 1);
  SWIG_Lua_add_boolean(L, "__div", 1);
  SWIG_Lua_add_boolean(L, "__mod", 1);
  SWIG_Lua_add_boolean(L, "__pow", 1);
  SWIG_Lua_add_boolean(L, "__unm", 1);
  SWIG_Lua_add_boolean(L, "__len", 1 );
  SWIG_Lua_add_boolean(L, "__concat", 1 );
  SWIG_Lua_add_boolean(L, "__eq", 1);
  SWIG_Lua_add_boolean(L, "__lt", 1);
  SWIG_Lua_add_boolean(L, "__le", 1);
  SWIG_Lua_add_boolean(L, "__call", 1);
  SWIG_Lua_add_boolean(L, "__tostring", 1);
  SWIG_Lua_add_boolean(L, "__gc", 0);
}

/* creates the swig registry */
SWIGINTERN void SWIG_Lua_create_class_registry(lua_State *L)
{
  /* create main SWIG registry table */
  lua_pushstring(L,"SWIG");
  lua_newtable(L);
  /* populate it with some predefined data */

  /* .library table. Placeholder */
  lua_pushstring(L,".library");
  lua_newtable(L);
  {
    /* list of metamethods that class inherits from its bases */
    lua_pushstring(L,"inheritable_metamethods");
    lua_newtable(L);
    /* populate with list of metamethods */
    SWIG_Lua_populate_inheritable_metamethods(L);
    lua_rawset(L,-3);
  }
  lua_rawset(L,-3);

  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* gets the swig registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State *L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    SWIG_Lua_create_class_registry(L);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

SWIGINTERN void SWIG_Lua_get_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushstring(L, ".library");
  lua_rawget(L,-2);
  assert( !lua_isnil(L,-1) );
  lua_pushstring(L, "inheritable_metamethods");
  lua_rawget(L,-2);

  /* Remove class registry and library table */
  lua_remove(L,-2);
  lua_remove(L,-2);
}

/* Helper function to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* Set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file.
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State *L,swig_lua_class *clss)
{
  int i=0;
  swig_module_info *module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
/* Merges two tables  */
SWIGINTERN void SWIG_Lua_merge_tables_by_index(lua_State *L, int target, int source)
{
  /* iterating */
  lua_pushnil(L);
  while (lua_next(L,source) != 0) {
    /* -1 - value, -2 - index */
    /* have to copy to assign */
    lua_pushvalue(L,-2); /* copy of index */
    lua_pushvalue(L,-2); /* copy of value */
    lua_rawset(L, target);
    lua_pop(L,1);
    /* only key is left */
  }
}

/* Merges two tables with given name. original - index of target metatable, base - index of source metatable */
SWIGINTERN void SWIG_Lua_merge_tables(lua_State *L, const char* name, int original, int base)
{
  /* push original[name], then base[name] */
  lua_pushstring(L,name);
  lua_rawget(L,original);
  int original_table = lua_gettop(L);
  lua_pushstring(L,name);
  lua_rawget(L,base);
  int base_table = lua_gettop(L);
  SWIG_Lua_merge_tables_by_index(L, original_table, base_table);
  /* clearing stack */
  lua_pop(L,2);
}

/* Function takes all symbols from base and adds it to derived class. It's just a helper. */
SWIGINTERN void SWIG_Lua_class_squash_base(lua_State *L, swig_lua_class *base_cls)
{
  /* There is one parameter - original, i.e. 'derived' class metatable */
  assert(lua_istable(L,-1));
  int original = lua_gettop(L);
  SWIG_Lua_get_class_metatable(L,base_cls->fqname);
  int base = lua_gettop(L);
  SWIG_Lua_merge_tables(L, ".fn", original, base );
  SWIG_Lua_merge_tables(L, ".set", original, base );
  SWIG_Lua_merge_tables(L, ".get", original, base );
  lua_pop(L,1);
}

/* Function squashes all symbols from 'clss' bases into itself */
SWIGINTERN void  SWIG_Lua_class_squash_bases(lua_State *L, swig_lua_class *clss)
{
  int i;
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* Somehow it's not found. Skip it */
      continue;
    /* Thing is: all bases are already registered. Thus they have already executed
     * this function. So we just need to squash them into us, because their bases
     * are already squashed into them. No need for recursion here!
     */
    SWIG_Lua_class_squash_base(L, clss->bases[i]);
  }
  lua_pop(L,1); /*tidy stack*/
}
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State *L, swig_lua_class *clss)
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

  SWIG_Lua_add_namespace_details(L, clss->cls_static);
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss); /* forward declaration */

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_instance_details(lua_State *L, swig_lua_class *clss)
{
  int i;
  size_t bases_count = 0;
  /* Add bases to .bases table */
  SWIG_Lua_get_table(L,".bases");
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
    /* Base class must be already registered */
    assert(lua_istable(L,-1));
    lua_rawseti(L,-2,i+1); /* In lua indexing starts from 1 */
    bases_count++;
  }
  assert(lua_rawlen(L,-1) == bases_count);
  lua_pop(L,1); /* remove .bases table */
  /* add attributes */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].func);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /* add operator overloads
    This adds methods from metatable array to metatable. Can mess up garbage
    collectind if someone defines __gc method
    */
  if(clss->metatable) {
    for(i=0;clss->metatable[i].name;i++) {
      SWIG_Lua_add_function(L,clss->metatable[i].name,clss->metatable[i].func);
    }
  }

#if !defined(SWIG_LUA_SQUASH_BASES)
  /* Adding metamethods that are defined in base classes. If bases were squashed
   * then it is obviously unnecessary
   */
  SWIG_Lua_add_class_user_metamethods(L, clss);
#endif
}

/* Helpers to add user defined class metamedhods - __add, __sub etc. The helpers are needed
   for the following issue: Lua runtime checks for metamethod existence with rawget function
   ignoring our SWIG-provided __index and __newindex functions. Thus our inheritance-aware method
   search algorithm doesn't work in such case. (Not to say that Lua runtime queries metamethod directly
   in metatable and not in object).
   Current solution is this: if somewhere in hierarchy metamethod __x is defined, then all descendants
   are automatically given a special proxy __x that calls the real __x method.
   Obvious idea - to copy __x instead of creating __x-proxy is wrong because if someone changes __x in runtime,
   those changes must be reflected in all descendants.
*/

SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L); /*forward declaration*/

/* The real function that resolves a metamethod.
 * Function searches given class and all it's bases(recursively) for first instance of something that is
 * not equal to SWIG_Lua_resolve_metatmethod. (Almost always this 'something' is actual metamethod implementation
 * and it is a SWIG-generated C function.). It returns value on the top of the L and there is no garbage below the
 * answer.
 * Returns 1 if found, 0 otherwise.
 * clss is class which metatable we will search for method
 * metamethod_name_idx is index in L where metamethod name (as string) lies
 * skip_check allows to skip searching metamethod in givel clss and immideatelly go to searching in bases. skip_check
 * is not caried to subsequent recursive calls - false is always passed. It is set to true only at first call from
 * SWIG_Lua_resolve_metamethod
 * */
SWIGINTERN int SWIG_Lua_do_resolve_metamethod(lua_State *L, const swig_lua_class *clss, int metamethod_name_idx,
    int skip_check)
{
  /* This function is called recursively */
  int result = 0;
  int i = 0;

  if (!skip_check) {
    SWIG_Lua_get_class_metatable(L, clss->fqname);
    lua_pushvalue(L, metamethod_name_idx);
    lua_rawget(L,-2);
    /* If this is cfunction and it is equal to SWIG_Lua_resolve_metamethod then
     * this isn't the function we are looking for :)
     * lua_tocfunction will return NULL if not cfunction
     */
    if (!lua_isnil(L,-1) && lua_tocfunction(L,-1) != SWIG_Lua_resolve_metamethod ) {
      lua_remove(L,-2); /* removing class metatable */
      return 1;
    }
    lua_pop(L,2); /* remove class metatable and query result */
  }

  /* Forwarding calls to bases */
  for(i=0;clss->bases[i];i++)
  {
    result = SWIG_Lua_do_resolve_metamethod(L, clss->bases[i], metamethod_name_idx, 0);
    if (result)
      break;
  }

  return result;
}

/* The proxy function for metamethod. All parameters are passed as cclosure. Searches for actual method
 * and calls it */
SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L)
{
  int numargs;
  int metamethod_name_idx;
  const swig_lua_class* clss;
  int result;

  lua_checkstack(L,5);
  numargs = lua_gettop(L); /* number of arguments to pass to actual metamethod */

  /* Get upvalues from closure */
  lua_pushvalue(L, lua_upvalueindex(1)); /*Get function name*/
  metamethod_name_idx = lua_gettop(L);

  lua_pushvalue(L, lua_upvalueindex(2));
  clss = (const swig_lua_class*)(lua_touserdata(L,-1));
  lua_pop(L,1); /* remove lightuserdata with clss from stack */

  /* Actual work */
  result = SWIG_Lua_do_resolve_metamethod(L, clss, metamethod_name_idx, 1);
  if (!result) {
   SWIG_Lua_pushferrstring(L,"The metamethod proxy is set, but it failed to find actual metamethod. Memory corruption is most likely explanation.");
   lua_error(L);
   return 0;
  }

  lua_remove(L,-2); /* remove metamethod key */
  lua_insert(L,1); /* move function to correct position */
  lua_call(L, numargs, LUA_MULTRET);
  return lua_gettop(L); /* return all results */
}


/* If given metamethod must be present in given class, then creates appropriate proxy
 * Returns 1 if successfully added, 0 if not added because no base class has it, -1
 * if method is defined in the class metatable itself
 */
SWIGINTERN int SWIG_Lua_add_class_user_metamethod(lua_State *L, swig_lua_class *clss, const int metatable_index)
{
  int key_index;
  int success = 0;
  int i = 0;

  /* metamethod name - on the top of the stack */
  assert(lua_isstring(L,-1));

  key_index = lua_gettop(L);

  /* Check whether method is already defined in metatable */
  lua_pushvalue(L,key_index); /* copy of the key */
  lua_gettable(L,metatable_index);
  if( !lua_isnil(L,-1) ) {
    lua_pop(L,1);
    return -1;
  }
  lua_pop(L,1);

  /* Iterating over immediate bases */
  for(i=0;clss->bases[i];i++)
  {
    const swig_lua_class *base = clss->bases[i];
    SWIG_Lua_get_class_metatable(L, base->fqname);
    lua_pushvalue(L, key_index);
    lua_rawget(L, -2);
    if( !lua_isnil(L,-1) ) {
      lua_pushvalue(L, key_index);

      /* Add proxy function */
      lua_pushvalue(L, key_index); /* first closure value is function name */
      lua_pushlightuserdata(L, clss); /* second closure value is swig_lua_class structure */
      lua_pushcclosure(L, SWIG_Lua_resolve_metamethod, 2);

      lua_rawset(L, metatable_index);
      success = 1;
    }
    lua_pop(L,1); /* remove function or nil */
    lua_pop(L,1); /* remove base class metatable */

    if( success )
      break;
  }

  return success;
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss)
{
  int metatable_index;
  int metamethods_info_index;
  int tostring_undefined;
  int eq_undefined = 0;

  SWIG_Lua_get_class_metatable(L, clss->fqname);
  metatable_index = lua_gettop(L);
  SWIG_Lua_get_inheritable_metamethods(L);
  assert(lua_istable(L,-1));
  metamethods_info_index = lua_gettop(L);
  lua_pushnil(L); /* first key */
  while(lua_next(L, metamethods_info_index) != 0 ) {
    /* key at index -2, value at index -1 */
    const int is_inheritable = lua_toboolean(L,-2);
    lua_pop(L,1); /* remove value - we don't need it anymore */

    if(is_inheritable) { /* if metamethod is inheritable */
      SWIG_Lua_add_class_user_metamethod(L,clss,metatable_index);
    }
  }

  lua_pop(L,1); /* remove inheritable metatmethods table */

  /* Special handling for __tostring method */
  lua_pushstring(L, "__tostring");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  tostring_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( tostring_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_tostring);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }

  /* Special handling for __eq method */
  lua_pushstring(L, "__eq");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  eq_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( eq_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_equal);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }
  /* Warning: __index and __newindex are SWIG-defined. For user-defined operator[]
   * a __getitem/__setitem method should be defined
   */
  lua_pop(L,1); /* pop class metatable */
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static->name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,clss->cls_static, 1);

  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", clss->constructor);
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
  assert( lua_gettop(L) == begin );
}

/* Performs the instance (non-static) class registration process. Metatable for class is created
 * and added to the class registry.
 */
SWIGINTERN void  SWIG_Lua_class_register_instance(lua_State *L,swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_newtable(L);    /* create the metatable */
#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* If squashing is requested, then merges all bases metatable into this one.
   * It would get us all special methods: __getitem, __add etc.
   * This would set .fn, .type, and other .xxx incorrectly, but we will overwrite it right away
   */
  {
    int new_metatable_index = lua_absindex(L,-1);
    for(i=0;clss->bases[i];i++)
    {
      int base_metatable;
      SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
      base_metatable = lua_absindex(L,-1);
      SWIG_Lua_merge_tables_by_index(L,new_metatable_index, base_metatable);
      lua_pop(L,1);
    }
  }
  /* And now we will overwrite all incorrectly set data */
#endif
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->fqname);
  lua_rawset(L,-3);
  /* add a table called bases */
  lua_pushstring(L,".bases");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */
  assert(lua_gettop(L) == begin);

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* Now merge all symbols from .fn, .set, .get etc from bases to our tables */
  SWIG_Lua_class_squash_bases(L,clss);
#endif
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  SWIG_Lua_add_class_instance_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
  assert( lua_gettop(L) == begin );
}

SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss)
{
  int SWIGUNUSED begin;
  assert(lua_istable(L,-1)); /* This is a table (module or namespace) where classes will be added */
  SWIG_Lua_class_register_instance(L,clss);
  SWIG_Lua_class_register_static(L,clss);

  /* Add links from static part to instance part and vice versa */
  /* [SWIG registry]                                   [Module]
   *    "MyClass" ----> [MyClass metatable] <=====     "MyClass" -+> [static part]
   *                     ".get" ----> ...        |                |     getmetatable()----|
   *                     ".set" ----> ...        |                |                       |
   *                     ".static" --------------)----------------/           [static part metatable]
   *                                             |                                ".get" --> ...
   *                                             |                                ".set" --> ....
   *                                             |=============================== ".instance"
   */
  begin = lua_gettop(L);
  lua_pushstring(L,clss->cls_static->name);
  lua_rawget(L,-2); /* get class static table */
  assert(lua_istable(L,-1));
  lua_getmetatable(L,-1);
  assert(lua_istable(L,-1)); /* get class static metatable */
  lua_pushstring(L,".instance"); /* prepare key */

  SWIG_Lua_get_class_metatable(L,clss->fqname); /* get class metatable */
  assert(lua_istable(L,-1));
  lua_pushstring(L,".static"); /* prepare key */
  lua_pushvalue(L, -4); /* push static class TABLE */
  assert(lua_istable(L,-1));
  lua_rawset(L,-3); /* assign static class table(!NOT metatable) as ".static" member of class metatable */
  lua_rawset(L,-3); /* assign class metatable as ".instance" member of class static METATABLE */
  lua_pop(L,2);
  assert(lua_gettop(L) == begin);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
SWIGINTERN void SWIG_Lua_elua_class_register_instance(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_elua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  assert(clss->metatable);
  lua_pushrotable(L, (void*)(clss->metatable));    /* create the metatable */
  lua_rawset(L,-3);
  lua_pop(L,1);
  assert(lua_gettop(L) == begin);
}
#endif /* elua && eluac */

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void SWIG_Lua_AddMetatable(lua_State *L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->fqname);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own)
{
  swig_lua_userdata *usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State *L,int index,void **ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata *usr;
  swig_cast_info *cast;
  /* special case: lua nil => NULL pointer */
  if (lua_isnil(L,index))
  {
    *ptr=0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  if (lua_islightuserdata(L,index))
  {
    *ptr=lua_touserdata(L,index);
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State *L,int index,swig_type_info *type,int flags,
       int argnum,const char *func_name){
  void *result;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State *L,int index,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata *usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State *L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushinteger(L,(lua_Integer)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      {
        char c = (char)constants[i].lvalue;
        lua_pushlstring(L,&c,1);
      }
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X it's lua_dostring()
In lua 5.1.X it's luaL_dostring()
*/
SWIGINTERN int
SWIG_Lua_dostring(lua_State *L, const char *str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Contact swig_types[0]
#define SWIGTYPE_p_ContactGenerators swig_types[1]
#define SWIGTYPE_p_Particles swig_types[2]
#define SWIGTYPE_p_cyclone__Aero swig_types[3]
#define SWIGTYPE_p_cyclone__AeroControl swig_types[4]
#define SWIGTYPE_p_cyclone__AeroEx swig_types[5]
#define SWIGTYPE_p_cyclone__Buoyancy swig_types[6]
#define SWIGTYPE_p_cyclone__CollisionBox swig_types[7]
#define SWIGTYPE_p_cyclone__CollisionData swig_types[8]
#define SWIGTYPE_p_cyclone__CollisionDataEx swig_types[9]
#define SWIGTYPE_p_cyclone__CollisionDetector swig_types[10]
#define SWIGTYPE_p_cyclone__CollisionPlane swig_types[11]
#define SWIGTYPE_p_cyclone__CollisionPrimitive swig_types[12]
#define SWIGTYPE_p_cyclone__CollisionSphere swig_types[13]
#define SWIGTYPE_p_cyclone__Contact swig_types[14]
#define SWIGTYPE_p_cyclone__ContactGenerator swig_types[15]
#define SWIGTYPE_p_cyclone__ContactResolver swig_types[16]
#define SWIGTYPE_p_cyclone__ForceGenerator swig_types[17]
#define SWIGTYPE_p_cyclone__ForceRegistry swig_types[18]
#define SWIGTYPE_p_cyclone__Gravity swig_types[19]
#define SWIGTYPE_p_cyclone__GroundContacts swig_types[20]
#define SWIGTYPE_p_cyclone__IntersectionTests swig_types[21]
#define SWIGTYPE_p_cyclone__Joint swig_types[22]
#define SWIGTYPE_p_cyclone__Matrix3 swig_types[23]
#define SWIGTYPE_p_cyclone__Matrix4 swig_types[24]
#define SWIGTYPE_p_cyclone__Particle swig_types[25]
#define SWIGTYPE_p_cyclone__ParticleAnchoredBungee swig_types[26]
#define SWIGTYPE_p_cyclone__ParticleAnchoredSpring swig_types[27]
#define SWIGTYPE_p_cyclone__ParticleBungee swig_types[28]
#define SWIGTYPE_p_cyclone__ParticleBuoyancy swig_types[29]
#define SWIGTYPE_p_cyclone__ParticleCable swig_types[30]
#define SWIGTYPE_p_cyclone__ParticleCableConstraint swig_types[31]
#define SWIGTYPE_p_cyclone__ParticleConstraint swig_types[32]
#define SWIGTYPE_p_cyclone__ParticleContact swig_types[33]
#define SWIGTYPE_p_cyclone__ParticleContactGenerator swig_types[34]
#define SWIGTYPE_p_cyclone__ParticleContactResolver swig_types[35]
#define SWIGTYPE_p_cyclone__ParticleDrag swig_types[36]
#define SWIGTYPE_p_cyclone__ParticleFakeSpring swig_types[37]
#define SWIGTYPE_p_cyclone__ParticleForceGenerator swig_types[38]
#define SWIGTYPE_p_cyclone__ParticleForceRegistry swig_types[39]
#define SWIGTYPE_p_cyclone__ParticleGravity swig_types[40]
#define SWIGTYPE_p_cyclone__ParticleLink swig_types[41]
#define SWIGTYPE_p_cyclone__ParticleRod swig_types[42]
#define SWIGTYPE_p_cyclone__ParticleRodConstraint swig_types[43]
#define SWIGTYPE_p_cyclone__ParticleSpring swig_types[44]
#define SWIGTYPE_p_cyclone__ParticleWorld swig_types[45]
#define SWIGTYPE_p_cyclone__Quaternion swig_types[46]
#define SWIGTYPE_p_cyclone__Random swig_types[47]
#define SWIGTYPE_p_cyclone__RigidBody swig_types[48]
#define SWIGTYPE_p_cyclone__Spring swig_types[49]
#define SWIGTYPE_p_cyclone__Vector3 swig_types[50]
#define SWIGTYPE_p_difference_type swig_types[51]
#define SWIGTYPE_p_double swig_types[52]
#define SWIGTYPE_p_float swig_types[53]
#define SWIGTYPE_p_int swig_types[54]
#define SWIGTYPE_p_p_cyclone__Particle swig_types[55]
#define SWIGTYPE_p_p_cyclone__RigidBody swig_types[56]
#define SWIGTYPE_p_size_type swig_types[57]
#define SWIGTYPE_p_std__vectorT_cyclone__ParticleContactGenerator_p_t swig_types[58]
#define SWIGTYPE_p_std__vectorT_cyclone__Particle_p_t swig_types[59]
#define SWIGTYPE_p_value_type swig_types[60]
static swig_type_info *swig_types[62];
static swig_module_info swig_module = {swig_types, 61, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "cyclone"
#define SWIG_init      luaopen_cyclone
#define SWIG_init_user luaopen_cyclone_user

#define SWIG_LUACODE   luaopen_cyclone_luacode

namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


#include "cyclone/cyclone.h"
#include "cyclone/precision.h"
#include "cyclone/core.h"
#include "cyclone/random.h"
#include "cyclone/particle.h"
#include "cyclone/body.h"
#include "cyclone/pcontacts.h"
#include "cyclone/plinks.h"
#include "cyclone/pfgen.h"
#include "cyclone/pworld.h"
#include "cyclone/collide_fine.h"
#include "cyclone/contacts.h"
#include "cyclone/fgen.h"
#include "cyclone/joints.h"
#include "cyclone/contacts.h"
using namespace cyclone;


#ifdef __cplusplus	/* generic alloc/dealloc fns*/
#define SWIG_ALLOC_ARRAY(TYPE,LEN) 	new TYPE[LEN]
#define SWIG_FREE_ARRAY(PTR)		delete[] PTR
#else
#define SWIG_ALLOC_ARRAY(TYPE,LEN) 	(TYPE *)malloc(LEN*sizeof(TYPE))
#define SWIG_FREE_ARRAY(PTR)		free(PTR)
#endif
/* counting the size of arrays:*/
SWIGINTERN int SWIG_itable_size(lua_State* L, int index)
{
	int n=0;
	while(1){
		lua_rawgeti(L,index,n+1);
		if (lua_isnil(L,-1))break;
		++n;
		lua_pop(L,1);
	}
	lua_pop(L,1);
	return n;
}

SWIGINTERN int SWIG_table_size(lua_State* L, int index)
{
	int n=0;
	lua_pushnil(L);  /* first key*/
	while (lua_next(L, index) != 0) {
		++n;
		lua_pop(L, 1);  /* removes `value'; keeps `key' for next iteration*/
	}
	return n;
}

/* super macro to declare array typemap helper fns */
#define SWIG_DECLARE_TYPEMAP_ARR_FN(NAME,TYPE)\
	SWIGINTERN int SWIG_read_##NAME##_num_array(lua_State* L,int index,TYPE *array,int size){\
		int i;\
		for (i = 0; i < size; i++) {\
			lua_rawgeti(L,index,i+1);\
			if (lua_isnumber(L,-1)){\
				array[i] = (TYPE)lua_tonumber(L,-1);\
			} else {\
				lua_pop(L,1);\
				return 0;\
			}\
			lua_pop(L,1);\
		}\
		return 1;\
	}\
	SWIGINTERN TYPE* SWIG_get_##NAME##_num_array_fixed(lua_State* L, int index, int size){\
		TYPE *array;\
		if (!lua_istable(L,index) || SWIG_itable_size(L,index) != size) {\
			SWIG_Lua_pushferrstring(L,"expected a table of size %d",size);\
			return 0;\
		}\
		array=SWIG_ALLOC_ARRAY(TYPE,size);\
		if (!SWIG_read_##NAME##_num_array(L,index,array,size)){\
			SWIG_Lua_pusherrstring(L,"table must contain numbers");\
			SWIG_FREE_ARRAY(array);\
			return 0;\
		}\
		return array;\
	}\
	SWIGINTERN TYPE* SWIG_get_##NAME##_num_array_var(lua_State* L, int index, int* size)\
	{\
		TYPE *array;\
		if (!lua_istable(L,index)) {\
			SWIG_Lua_pusherrstring(L,"expected a table");\
			return 0;\
		}\
		*size=SWIG_itable_size(L,index);\
		if (*size<1){\
			SWIG_Lua_pusherrstring(L,"table appears to be empty");\
			return 0;\
		}\
		array=SWIG_ALLOC_ARRAY(TYPE,*size);\
		if (!SWIG_read_##NAME##_num_array(L,index,array,*size)){\
			SWIG_Lua_pusherrstring(L,"table must contain numbers");\
			SWIG_FREE_ARRAY(array);\
			return 0;\
		}\
		return array;\
	}\
	SWIGINTERN void SWIG_write_##NAME##_num_array(lua_State* L,TYPE *array,int size){\
		int i;\
		lua_newtable(L);\
		for (i = 0; i < size; i++){\
			lua_pushnumber(L,(lua_Number)array[i]);\
			lua_rawseti(L,-2,i+1);/* -1 is the number, -2 is the table*/ \
		}\
	}

SWIG_DECLARE_TYPEMAP_ARR_FN(schar,signed char)
SWIG_DECLARE_TYPEMAP_ARR_FN(uchar,unsigned char)
SWIG_DECLARE_TYPEMAP_ARR_FN(int,int)
SWIG_DECLARE_TYPEMAP_ARR_FN(uint,unsigned int)
SWIG_DECLARE_TYPEMAP_ARR_FN(short,short)
SWIG_DECLARE_TYPEMAP_ARR_FN(ushort,unsigned short)
SWIG_DECLARE_TYPEMAP_ARR_FN(long,long)
SWIG_DECLARE_TYPEMAP_ARR_FN(ulong,unsigned long)
SWIG_DECLARE_TYPEMAP_ARR_FN(float,float)
SWIG_DECLARE_TYPEMAP_ARR_FN(double,double)

SWIGINTERN int SWIG_read_ptr_array(lua_State* L,int index,void **array,int size,swig_type_info *type){
	int i;
	for (i = 0; i < size; i++) {
		lua_rawgeti(L,index,i+1);
		if (!lua_isuserdata(L,-1) || SWIG_ConvertPtr(L,-1,&array[i],type,0)==-1){
			lua_pop(L,1);
			return 0;
		}
		lua_pop(L,1);
	}
	return 1;
}
SWIGINTERN void** SWIG_get_ptr_array_fixed(lua_State* L, int index, int size,swig_type_info *type){
	void **array;
	if (!lua_istable(L,index) || SWIG_itable_size(L,index) != size) {
		SWIG_Lua_pushferrstring(L,"expected a table of size %d",size);
		return 0;
	}
	array=SWIG_ALLOC_ARRAY(void*,size);
	if (!SWIG_read_ptr_array(L,index,array,size,type)){
		SWIG_Lua_pushferrstring(L,"table must contain pointers of type %s",type->name);
		SWIG_FREE_ARRAY(array);
		return 0;
	}
	return array;
}
SWIGINTERN void** SWIG_get_ptr_array_var(lua_State* L, int index, int* size,swig_type_info *type){
	void **array;
	if (!lua_istable(L,index)) {
		SWIG_Lua_pusherrstring(L,"expected a table");
		return 0;
	}
	*size=SWIG_itable_size(L,index);
	if (*size<1){
		SWIG_Lua_pusherrstring(L,"table appears to be empty");
		return 0;
	}
	array=SWIG_ALLOC_ARRAY(void*,*size);
	if (!SWIG_read_ptr_array(L,index,array,*size,type)){
		SWIG_Lua_pushferrstring(L,"table must contain pointers of type %s",type->name);
		SWIG_FREE_ARRAY(array);
		return 0;
	}
	return array;
}
SWIGINTERN void SWIG_write_ptr_array(lua_State* L,void **array,int size,swig_type_info *type,int own){
	int i;
	lua_newtable(L);
	for (i = 0; i < size; i++){
		SWIG_NewPointerObj(L,array[i],type,own);
		lua_rawseti(L,-2,i+1);/* -1 is the number, -2 is the table*/
	}
}


#include <vector>


#include <typeinfo>
#include <stdexcept>


#define SWIG_exception(a,b)\
{ lua_pushfstring(L,"%s:%s",#a,b);SWIG_fail; }


#include <typeinfo>
#include <stdexcept>

SWIGINTERN cyclone::Particle *std_vector_Sl_cyclone_Particle_Sm__Sg____getitem__(std::vector< cyclone::Particle * > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_cyclone_Particle_Sm__Sg____setitem__(std::vector< cyclone::Particle * > *self,unsigned int idx,cyclone::Particle *val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}

static int *new_intArray(int nelements) { 
  return new int[nelements](); 
}

static void delete_intArray(int *ary) { 
  delete [] ary; 
}

static int intArray_getitem(int *ary, int index) {
    return ary[index];
}
static void intArray_setitem(int *ary, int index, int value) {
    ary[index] = value;
}


static float *new_floatArray(int nelements) { 
  return new float[nelements](); 
}

static void delete_floatArray(float *ary) { 
  delete [] ary; 
}

static float floatArray_getitem(float *ary, int index) {
    return ary[index];
}
static void floatArray_setitem(float *ary, int index, float value) {
    ary[index] = value;
}


static double *new_doubleArray(int nelements) { 
  return new double[nelements](); 
}

static void delete_doubleArray(double *ary) { 
  delete [] ary; 
}

static double doubleArray_getitem(double *ary, int index) {
    return ary[index];
}
static void doubleArray_setitem(double *ary, int index, double value) {
    ary[index] = value;
}


static double *new_realArray(int nelements) { 
  return new double[nelements](); 
}

static void delete_realArray(double *ary) { 
  delete [] ary; 
}

static double realArray_getitem(double *ary, int index) {
    return ary[index];
}
static void realArray_setitem(double *ary, int index, double value) {
    ary[index] = value;
}

#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_new_ParticleVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< cyclone::Particle * > *result = 0 ;
  
  SWIG_check_num_args("std::vector< cyclone::Particle * >::vector",0,0)
  result = (std::vector< cyclone::Particle * > *)new std::vector< cyclone::Particle * >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_cyclone__Particle_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParticleVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< cyclone::Particle * > *result = 0 ;
  
  SWIG_check_num_args("std::vector< cyclone::Particle * >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< cyclone::Particle * >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< cyclone::Particle * > *)new std::vector< cyclone::Particle * >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_cyclone__Particle_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParticleVector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< cyclone::Particle * > *arg1 = 0 ;
  std::vector< cyclone::Particle * > *result = 0 ;
  
  SWIG_check_num_args("std::vector< cyclone::Particle * >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< cyclone::Particle * >::vector",1,"std::vector< cyclone::Particle * > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_cyclone__Particle_p_t,0))){
    SWIG_fail_ptr("new_ParticleVector",1,SWIGTYPE_p_std__vectorT_cyclone__Particle_p_t);
  }
  
  result = (std::vector< cyclone::Particle * > *)new std::vector< cyclone::Particle * >((std::vector< cyclone::Particle * > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_cyclone__Particle_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParticleVector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  cyclone::Particle *arg2 = (cyclone::Particle *) 0 ;
  std::vector< cyclone::Particle * > *result = 0 ;
  
  SWIG_check_num_args("std::vector< cyclone::Particle * >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< cyclone::Particle * >::vector",1,"unsigned int");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("std::vector< cyclone::Particle * >::vector",2,"cyclone::Particle *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Particle,0))){
    SWIG_fail_ptr("new_ParticleVector",2,SWIGTYPE_p_cyclone__Particle);
  }
  
  result = (std::vector< cyclone::Particle * > *)new std::vector< cyclone::Particle * >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_cyclone__Particle_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParticleVector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ParticleVector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_cyclone__Particle_p_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ParticleVector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_ParticleVector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_cyclone__Particle, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_ParticleVector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ParticleVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< cyclone::Particle * >::vector()\n"
    "    std::vector< cyclone::Particle * >::vector(unsigned int)\n"
    "    std::vector< cyclone::Particle * >::vector(std::vector< cyclone::Particle * > const &)\n"
    "    std::vector< cyclone::Particle * >::vector(unsigned int,cyclone::Particle *)\n");
  lua_error(L);return 0;
}


static int _wrap_ParticleVector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< cyclone::Particle * > *arg1 = (std::vector< cyclone::Particle * > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< cyclone::Particle * >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< cyclone::Particle * >::size",1,"std::vector< cyclone::Particle * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_cyclone__Particle_p_t,0))){
    SWIG_fail_ptr("ParticleVector_size",1,SWIGTYPE_p_std__vectorT_cyclone__Particle_p_t);
  }
  
  result = (unsigned int)((std::vector< cyclone::Particle * > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleVector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< cyclone::Particle * > *arg1 = (std::vector< cyclone::Particle * > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< cyclone::Particle * >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< cyclone::Particle * >::max_size",1,"std::vector< cyclone::Particle * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_cyclone__Particle_p_t,0))){
    SWIG_fail_ptr("ParticleVector_max_size",1,SWIGTYPE_p_std__vectorT_cyclone__Particle_p_t);
  }
  
  result = (unsigned int)((std::vector< cyclone::Particle * > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleVector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< cyclone::Particle * > *arg1 = (std::vector< cyclone::Particle * > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< cyclone::Particle * >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< cyclone::Particle * >::empty",1,"std::vector< cyclone::Particle * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_cyclone__Particle_p_t,0))){
    SWIG_fail_ptr("ParticleVector_empty",1,SWIGTYPE_p_std__vectorT_cyclone__Particle_p_t);
  }
  
  result = (bool)((std::vector< cyclone::Particle * > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleVector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< cyclone::Particle * > *arg1 = (std::vector< cyclone::Particle * > *) 0 ;
  
  SWIG_check_num_args("std::vector< cyclone::Particle * >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< cyclone::Particle * >::clear",1,"std::vector< cyclone::Particle * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_cyclone__Particle_p_t,0))){
    SWIG_fail_ptr("ParticleVector_clear",1,SWIGTYPE_p_std__vectorT_cyclone__Particle_p_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleVector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< cyclone::Particle * > *arg1 = (std::vector< cyclone::Particle * > *) 0 ;
  cyclone::Particle *arg2 = (cyclone::Particle *) 0 ;
  
  SWIG_check_num_args("std::vector< cyclone::Particle * >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< cyclone::Particle * >::push_back",1,"std::vector< cyclone::Particle * > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("std::vector< cyclone::Particle * >::push_back",2,"cyclone::Particle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_cyclone__Particle_p_t,0))){
    SWIG_fail_ptr("ParticleVector_push_back",1,SWIGTYPE_p_std__vectorT_cyclone__Particle_p_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Particle,0))){
    SWIG_fail_ptr("ParticleVector_push_back",2,SWIGTYPE_p_cyclone__Particle);
  }
  
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleVector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< cyclone::Particle * > *arg1 = (std::vector< cyclone::Particle * > *) 0 ;
  
  SWIG_check_num_args("std::vector< cyclone::Particle * >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< cyclone::Particle * >::pop_back",1,"std::vector< cyclone::Particle * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_cyclone__Particle_p_t,0))){
    SWIG_fail_ptr("ParticleVector_pop_back",1,SWIGTYPE_p_std__vectorT_cyclone__Particle_p_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleVector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< cyclone::Particle * > *arg1 = (std::vector< cyclone::Particle * > *) 0 ;
  cyclone::Particle *result = 0 ;
  
  SWIG_check_num_args("std::vector< cyclone::Particle * >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< cyclone::Particle * >::front",1,"std::vector< cyclone::Particle * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_cyclone__Particle_p_t,0))){
    SWIG_fail_ptr("ParticleVector_front",1,SWIGTYPE_p_std__vectorT_cyclone__Particle_p_t);
  }
  
  result = (cyclone::Particle *)((std::vector< cyclone::Particle * > const *)arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__Particle,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleVector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< cyclone::Particle * > *arg1 = (std::vector< cyclone::Particle * > *) 0 ;
  cyclone::Particle *result = 0 ;
  
  SWIG_check_num_args("std::vector< cyclone::Particle * >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< cyclone::Particle * >::back",1,"std::vector< cyclone::Particle * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_cyclone__Particle_p_t,0))){
    SWIG_fail_ptr("ParticleVector_back",1,SWIGTYPE_p_std__vectorT_cyclone__Particle_p_t);
  }
  
  result = (cyclone::Particle *)((std::vector< cyclone::Particle * > const *)arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__Particle,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleVector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< cyclone::Particle * > *arg1 = (std::vector< cyclone::Particle * > *) 0 ;
  unsigned int arg2 ;
  cyclone::Particle *result = 0 ;
  
  SWIG_check_num_args("std::vector< cyclone::Particle * >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< cyclone::Particle * >::__getitem__",1,"std::vector< cyclone::Particle * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< cyclone::Particle * >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_cyclone__Particle_p_t,0))){
    SWIG_fail_ptr("ParticleVector___getitem",1,SWIGTYPE_p_std__vectorT_cyclone__Particle_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = (cyclone::Particle *)std_vector_Sl_cyclone_Particle_Sm__Sg____getitem__(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__Particle,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleVector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< cyclone::Particle * > *arg1 = (std::vector< cyclone::Particle * > *) 0 ;
  unsigned int arg2 ;
  cyclone::Particle *arg3 = (cyclone::Particle *) 0 ;
  
  SWIG_check_num_args("std::vector< cyclone::Particle * >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< cyclone::Particle * >::__setitem__",1,"std::vector< cyclone::Particle * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< cyclone::Particle * >::__setitem__",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("std::vector< cyclone::Particle * >::__setitem__",3,"cyclone::Particle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_cyclone__Particle_p_t,0))){
    SWIG_fail_ptr("ParticleVector___setitem",1,SWIGTYPE_p_std__vectorT_cyclone__Particle_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_cyclone__Particle,0))){
    SWIG_fail_ptr("ParticleVector___setitem",3,SWIGTYPE_p_cyclone__Particle);
  }
  
  try {
    std_vector_Sl_cyclone_Particle_Sm__Sg____setitem__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ParticleVector(void *obj) {
std::vector< cyclone::Particle * > *arg1 = (std::vector< cyclone::Particle * > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ParticleVector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ParticleVector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ParticleVector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ParticleVector_methods[]= {
    { "size", _wrap_ParticleVector_size},
    { "max_size", _wrap_ParticleVector_max_size},
    { "empty", _wrap_ParticleVector_empty},
    { "clear", _wrap_ParticleVector_clear},
    { "push_back", _wrap_ParticleVector_push_back},
    { "pop_back", _wrap_ParticleVector_pop_back},
    { "front", _wrap_ParticleVector_front},
    { "back", _wrap_ParticleVector_back},
    { "__getitem", _wrap_ParticleVector___getitem},
    { "__setitem", _wrap_ParticleVector___setitem},
    {0,0}
};
static swig_lua_method swig_ParticleVector_meta[] = {
    { "__getitem", _wrap_ParticleVector___getitem},
    { "__setitem", _wrap_ParticleVector___setitem},
    {0,0}
};

static swig_lua_attribute swig_ParticleVector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ParticleVector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ParticleVector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ParticleVector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ParticleVector_Sf_SwigStatic = {
    "ParticleVector",
    swig_ParticleVector_Sf_SwigStatic_methods,
    swig_ParticleVector_Sf_SwigStatic_attributes,
    swig_ParticleVector_Sf_SwigStatic_constants,
    swig_ParticleVector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ParticleVector_bases[] = {0};
static const char *swig_ParticleVector_base_names[] = {0};
static swig_lua_class _wrap_class_ParticleVector = { "ParticleVector", "ParticleVector", &SWIGTYPE_p_std__vectorT_cyclone__Particle_p_t,_proxy__wrap_new_ParticleVector, swig_delete_ParticleVector, swig_ParticleVector_methods, swig_ParticleVector_attributes, &swig_ParticleVector_Sf_SwigStatic, swig_ParticleVector_meta, swig_ParticleVector_bases, swig_ParticleVector_base_names };

static int _wrap_new_intArray(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int *result = 0 ;
  
  SWIG_check_num_args("new_intArray",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("new_intArray",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (int *)new_intArray(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_intArray(lua_State* L) {
  int SWIG_arg = 0;
  int *arg1 = (int *) 0 ;
  
  SWIG_check_num_args("delete_intArray",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("delete_intArray",1,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("delete_intArray",1,SWIGTYPE_p_int);
  }
  
  delete_intArray(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_intArray_getitem(lua_State* L) {
  int SWIG_arg = 0;
  int *arg1 = (int *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("intArray_getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intArray_getitem",1,"int *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("intArray_getitem",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("intArray_getitem",1,SWIGTYPE_p_int);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)intArray_getitem(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_intArray_setitem(lua_State* L) {
  int SWIG_arg = 0;
  int *arg1 = (int *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("intArray_setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intArray_setitem",1,"int *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("intArray_setitem",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("intArray_setitem",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("intArray_setitem",1,SWIGTYPE_p_int);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  intArray_setitem(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_floatArray(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  float *result = 0 ;
  
  SWIG_check_num_args("new_floatArray",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("new_floatArray",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (float *)new_floatArray(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_floatArray(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  
  SWIG_check_num_args("delete_floatArray",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("delete_floatArray",1,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("delete_floatArray",1,SWIGTYPE_p_float);
  }
  
  delete_floatArray(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floatArray_getitem(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  int arg2 ;
  float result;
  
  SWIG_check_num_args("floatArray_getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("floatArray_getitem",1,"float *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("floatArray_getitem",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("floatArray_getitem",1,SWIGTYPE_p_float);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (float)floatArray_getitem(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floatArray_setitem(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  int arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("floatArray_setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("floatArray_setitem",1,"float *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("floatArray_setitem",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("floatArray_setitem",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("floatArray_setitem",1,SWIGTYPE_p_float);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  floatArray_setitem(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_doubleArray(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double *result = 0 ;
  
  SWIG_check_num_args("new_doubleArray",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("new_doubleArray",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (double *)new_doubleArray(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_doubleArray(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  
  SWIG_check_num_args("delete_doubleArray",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("delete_doubleArray",1,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("delete_doubleArray",1,SWIGTYPE_p_double);
  }
  
  delete_doubleArray(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_doubleArray_getitem(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("doubleArray_getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("doubleArray_getitem",1,"double *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("doubleArray_getitem",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("doubleArray_getitem",1,SWIGTYPE_p_double);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)doubleArray_getitem(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_doubleArray_setitem(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("doubleArray_setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("doubleArray_setitem",1,"double *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("doubleArray_setitem",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("doubleArray_setitem",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("doubleArray_setitem",1,SWIGTYPE_p_double);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  doubleArray_setitem(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_realArray(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double *result = 0 ;
  
  SWIG_check_num_args("new_realArray",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("new_realArray",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (double *)new_realArray(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_realArray(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  
  SWIG_check_num_args("delete_realArray",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("delete_realArray",1,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("delete_realArray",1,SWIGTYPE_p_double);
  }
  
  delete_realArray(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_realArray_getitem(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("realArray_getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("realArray_getitem",1,"double *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("realArray_getitem",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("realArray_getitem",1,SWIGTYPE_p_double);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)realArray_getitem(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_realArray_setitem(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("realArray_setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("realArray_setitem",1,"double *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("realArray_setitem",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("realArray_setitem",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("realArray_setitem",1,SWIGTYPE_p_double);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  realArray_setitem(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sleepEpsilon_set(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::real arg1 ;
  
  SWIG_check_num_args("cyclone::sleepEpsilon",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cyclone::sleepEpsilon",1,"cyclone::real");
  arg1 = (cyclone::real)lua_tonumber(L, 1);
  cyclone::sleepEpsilon = arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sleepEpsilon_get(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::real result;
  
  SWIG_check_num_args("cyclone::sleepEpsilon",0,0)
  result = (cyclone::real)cyclone::sleepEpsilon;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_setSleepEpsilon(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::real arg1 ;
  
  SWIG_check_num_args("cyclone::setSleepEpsilon",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cyclone::setSleepEpsilon",1,"cyclone::real");
  arg1 = (cyclone::real)lua_tonumber(L, 1);
  cyclone::setSleepEpsilon(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getSleepEpsilon(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::real result;
  
  SWIG_check_num_args("cyclone::getSleepEpsilon",0,0)
  result = (cyclone::real)cyclone::getSleepEpsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_x_set(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0 ;
  cyclone::real arg2 ;
  
  SWIG_check_num_args("cyclone::Vector3::x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Vector3::x",1,"cyclone::Vector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::Vector3::x",2,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Vector3_x_set",1,SWIGTYPE_p_cyclone__Vector3);
  }
  
  arg2 = (cyclone::real)lua_tonumber(L, 2);
  if (arg1) (arg1)->x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_x_get(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0 ;
  cyclone::real result;
  
  SWIG_check_num_args("cyclone::Vector3::x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Vector3::x",1,"cyclone::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Vector3_x_get",1,SWIGTYPE_p_cyclone__Vector3);
  }
  
  result = (cyclone::real) ((arg1)->x);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_y_set(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0 ;
  cyclone::real arg2 ;
  
  SWIG_check_num_args("cyclone::Vector3::y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Vector3::y",1,"cyclone::Vector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::Vector3::y",2,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Vector3_y_set",1,SWIGTYPE_p_cyclone__Vector3);
  }
  
  arg2 = (cyclone::real)lua_tonumber(L, 2);
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_y_get(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0 ;
  cyclone::real result;
  
  SWIG_check_num_args("cyclone::Vector3::y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Vector3::y",1,"cyclone::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Vector3_y_get",1,SWIGTYPE_p_cyclone__Vector3);
  }
  
  result = (cyclone::real) ((arg1)->y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_z_set(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0 ;
  cyclone::real arg2 ;
  
  SWIG_check_num_args("cyclone::Vector3::z",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Vector3::z",1,"cyclone::Vector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::Vector3::z",2,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Vector3_z_set",1,SWIGTYPE_p_cyclone__Vector3);
  }
  
  arg2 = (cyclone::real)lua_tonumber(L, 2);
  if (arg1) (arg1)->z = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_z_get(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0 ;
  cyclone::real result;
  
  SWIG_check_num_args("cyclone::Vector3::z",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Vector3::z",1,"cyclone::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Vector3_z_get",1,SWIGTYPE_p_cyclone__Vector3);
  }
  
  result = (cyclone::real) ((arg1)->z);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Vector3 *result = 0 ;
  
  SWIG_check_num_args("cyclone::Vector3::Vector3",0,0)
  result = (cyclone::Vector3 *)new cyclone::Vector3();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__Vector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::real arg1 ;
  cyclone::real arg2 ;
  cyclone::real arg3 ;
  cyclone::Vector3 *result = 0 ;
  
  SWIG_check_num_args("cyclone::Vector3::Vector3",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cyclone::Vector3::Vector3",1,"cyclone::real const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::Vector3::Vector3",2,"cyclone::real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::Vector3::Vector3",3,"cyclone::real const");
  arg1 = (cyclone::real const)lua_tonumber(L, 1);
  arg2 = (cyclone::real const)lua_tonumber(L, 2);
  arg3 = (cyclone::real const)lua_tonumber(L, 3);
  result = (cyclone::Vector3 *)new cyclone::Vector3(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__Vector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Vector3__SWIG_0(L);
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Vector3__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Vector3'\n"
    "  Possible C/C++ prototypes are:\n"
    "    cyclone::Vector3::Vector3()\n"
    "    cyclone::Vector3::Vector3(cyclone::real const,cyclone::real const,cyclone::real const)\n");
  lua_error(L);return 0;
}


static int _wrap_Vector3___add(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0 ;
  cyclone::Vector3 *arg2 = 0 ;
  cyclone::Vector3 result;
  
  SWIG_check_num_args("cyclone::Vector3::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Vector3::operator +",1,"cyclone::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::Vector3::operator +",2,"cyclone::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Vector3___add",1,SWIGTYPE_p_cyclone__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Vector3___add",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  result = ((cyclone::Vector3 const *)arg1)->operator +((cyclone::Vector3 const &)*arg2);
  {
    cyclone::Vector3 * resultptr = new cyclone::Vector3((const cyclone::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cyclone__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___sub(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0 ;
  cyclone::Vector3 *arg2 = 0 ;
  cyclone::Vector3 result;
  
  SWIG_check_num_args("cyclone::Vector3::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Vector3::operator -",1,"cyclone::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::Vector3::operator -",2,"cyclone::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Vector3___sub",1,SWIGTYPE_p_cyclone__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Vector3___sub",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  result = ((cyclone::Vector3 const *)arg1)->operator -((cyclone::Vector3 const &)*arg2);
  {
    cyclone::Vector3 * resultptr = new cyclone::Vector3((const cyclone::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cyclone__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0 ;
  cyclone::real arg2 ;
  cyclone::Vector3 result;
  
  SWIG_check_num_args("cyclone::Vector3::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Vector3::operator *",1,"cyclone::Vector3 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::Vector3::operator *",2,"cyclone::real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Vector3___mul",1,SWIGTYPE_p_cyclone__Vector3);
  }
  
  arg2 = (cyclone::real const)lua_tonumber(L, 2);
  result = ((cyclone::Vector3 const *)arg1)->operator *(arg2);
  {
    cyclone::Vector3 * resultptr = new cyclone::Vector3((const cyclone::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cyclone__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_componentProduct(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0 ;
  cyclone::Vector3 *arg2 = 0 ;
  cyclone::Vector3 result;
  
  SWIG_check_num_args("cyclone::Vector3::componentProduct",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Vector3::componentProduct",1,"cyclone::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::Vector3::componentProduct",2,"cyclone::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Vector3_componentProduct",1,SWIGTYPE_p_cyclone__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Vector3_componentProduct",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  result = ((cyclone::Vector3 const *)arg1)->componentProduct((cyclone::Vector3 const &)*arg2);
  {
    cyclone::Vector3 * resultptr = new cyclone::Vector3((const cyclone::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cyclone__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_componentProductUpdate(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0 ;
  cyclone::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("cyclone::Vector3::componentProductUpdate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Vector3::componentProductUpdate",1,"cyclone::Vector3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::Vector3::componentProductUpdate",2,"cyclone::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Vector3_componentProductUpdate",1,SWIGTYPE_p_cyclone__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Vector3_componentProductUpdate",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  (arg1)->componentProductUpdate((cyclone::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_vectorProduct(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0 ;
  cyclone::Vector3 *arg2 = 0 ;
  cyclone::Vector3 result;
  
  SWIG_check_num_args("cyclone::Vector3::vectorProduct",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Vector3::vectorProduct",1,"cyclone::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::Vector3::vectorProduct",2,"cyclone::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Vector3_vectorProduct",1,SWIGTYPE_p_cyclone__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Vector3_vectorProduct",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  result = ((cyclone::Vector3 const *)arg1)->vectorProduct((cyclone::Vector3 const &)*arg2);
  {
    cyclone::Vector3 * resultptr = new cyclone::Vector3((const cyclone::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cyclone__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_scalarProduct(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0 ;
  cyclone::Vector3 *arg2 = 0 ;
  cyclone::real result;
  
  SWIG_check_num_args("cyclone::Vector3::scalarProduct",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Vector3::scalarProduct",1,"cyclone::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::Vector3::scalarProduct",2,"cyclone::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Vector3_scalarProduct",1,SWIGTYPE_p_cyclone__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Vector3_scalarProduct",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  result = (cyclone::real)((cyclone::Vector3 const *)arg1)->scalarProduct((cyclone::Vector3 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0 ;
  cyclone::Vector3 *arg2 = 0 ;
  cyclone::real result;
  
  SWIG_check_num_args("cyclone::Vector3::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Vector3::operator *",1,"cyclone::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::Vector3::operator *",2,"cyclone::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Vector3___mul",1,SWIGTYPE_p_cyclone__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Vector3___mul",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  result = (cyclone::real)((cyclone::Vector3 const *)arg1)->operator *((cyclone::Vector3 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___mul__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vector3___mul__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector3___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    cyclone::Vector3::operator *(cyclone::real const) const\n"
    "    cyclone::Vector3::operator *(cyclone::Vector3 const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector3_addScaledVector(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0 ;
  cyclone::Vector3 *arg2 = 0 ;
  cyclone::real arg3 ;
  
  SWIG_check_num_args("cyclone::Vector3::addScaledVector",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Vector3::addScaledVector",1,"cyclone::Vector3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::Vector3::addScaledVector",2,"cyclone::Vector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::Vector3::addScaledVector",3,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Vector3_addScaledVector",1,SWIGTYPE_p_cyclone__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Vector3_addScaledVector",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  arg3 = (cyclone::real)lua_tonumber(L, 3);
  (arg1)->addScaledVector((cyclone::Vector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_magnitude(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0 ;
  cyclone::real result;
  
  SWIG_check_num_args("cyclone::Vector3::magnitude",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Vector3::magnitude",1,"cyclone::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Vector3_magnitude",1,SWIGTYPE_p_cyclone__Vector3);
  }
  
  result = (cyclone::real)((cyclone::Vector3 const *)arg1)->magnitude();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_squareMagnitude(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0 ;
  cyclone::real result;
  
  SWIG_check_num_args("cyclone::Vector3::squareMagnitude",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Vector3::squareMagnitude",1,"cyclone::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Vector3_squareMagnitude",1,SWIGTYPE_p_cyclone__Vector3);
  }
  
  result = (cyclone::real)((cyclone::Vector3 const *)arg1)->squareMagnitude();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_trim(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0 ;
  cyclone::real arg2 ;
  
  SWIG_check_num_args("cyclone::Vector3::trim",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Vector3::trim",1,"cyclone::Vector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::Vector3::trim",2,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Vector3_trim",1,SWIGTYPE_p_cyclone__Vector3);
  }
  
  arg2 = (cyclone::real)lua_tonumber(L, 2);
  (arg1)->trim(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_normalise(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0 ;
  
  SWIG_check_num_args("cyclone::Vector3::normalise",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Vector3::normalise",1,"cyclone::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Vector3_normalise",1,SWIGTYPE_p_cyclone__Vector3);
  }
  
  (arg1)->normalise();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_unit(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0 ;
  cyclone::Vector3 result;
  
  SWIG_check_num_args("cyclone::Vector3::unit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Vector3::unit",1,"cyclone::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Vector3_unit",1,SWIGTYPE_p_cyclone__Vector3);
  }
  
  result = ((cyclone::Vector3 const *)arg1)->unit();
  {
    cyclone::Vector3 * resultptr = new cyclone::Vector3((const cyclone::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cyclone__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___eq(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0 ;
  cyclone::Vector3 *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("cyclone::Vector3::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Vector3::operator ==",1,"cyclone::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::Vector3::operator ==",2,"cyclone::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Vector3___eq",1,SWIGTYPE_p_cyclone__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Vector3___eq",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  result = (bool)((cyclone::Vector3 const *)arg1)->operator ==((cyclone::Vector3 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___lt(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0 ;
  cyclone::Vector3 *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("cyclone::Vector3::operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Vector3::operator <",1,"cyclone::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::Vector3::operator <",2,"cyclone::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Vector3___lt",1,SWIGTYPE_p_cyclone__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Vector3___lt",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  result = (bool)((cyclone::Vector3 const *)arg1)->operator <((cyclone::Vector3 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___le(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0 ;
  cyclone::Vector3 *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("cyclone::Vector3::operator <=",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Vector3::operator <=",1,"cyclone::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::Vector3::operator <=",2,"cyclone::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Vector3___le",1,SWIGTYPE_p_cyclone__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Vector3___le",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  result = (bool)((cyclone::Vector3 const *)arg1)->operator <=((cyclone::Vector3 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_clear(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0 ;
  
  SWIG_check_num_args("cyclone::Vector3::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Vector3::clear",1,"cyclone::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Vector3_clear",1,SWIGTYPE_p_cyclone__Vector3);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_invert(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0 ;
  
  SWIG_check_num_args("cyclone::Vector3::invert",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Vector3::invert",1,"cyclone::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Vector3_invert",1,SWIGTYPE_p_cyclone__Vector3);
  }
  
  (arg1)->invert();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Vector3(void *obj) {
cyclone::Vector3 *arg1 = (cyclone::Vector3 *) obj;
delete arg1;
}
static int _proxy__wrap_new_Vector3(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Vector3);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Vector3_attributes[] = {
    { "x", _wrap_Vector3_x_get, _wrap_Vector3_x_set },
    { "y", _wrap_Vector3_y_get, _wrap_Vector3_y_set },
    { "z", _wrap_Vector3_z_get, _wrap_Vector3_z_set },
    {0,0,0}
};
static swig_lua_method swig_Vector3_methods[]= {
    { "__add", _wrap_Vector3___add},
    { "__sub", _wrap_Vector3___sub},
    { "componentProduct", _wrap_Vector3_componentProduct},
    { "componentProductUpdate", _wrap_Vector3_componentProductUpdate},
    { "vectorProduct", _wrap_Vector3_vectorProduct},
    { "scalarProduct", _wrap_Vector3_scalarProduct},
    { "__mul", _wrap_Vector3___mul},
    { "addScaledVector", _wrap_Vector3_addScaledVector},
    { "magnitude", _wrap_Vector3_magnitude},
    { "squareMagnitude", _wrap_Vector3_squareMagnitude},
    { "trim", _wrap_Vector3_trim},
    { "normalise", _wrap_Vector3_normalise},
    { "unit", _wrap_Vector3_unit},
    { "__eq", _wrap_Vector3___eq},
    { "__lt", _wrap_Vector3___lt},
    { "__le", _wrap_Vector3___le},
    { "clear", _wrap_Vector3_clear},
    { "invert", _wrap_Vector3_invert},
    {0,0}
};
static swig_lua_method swig_Vector3_meta[] = {
    { "__add", _wrap_Vector3___add},
    { "__sub", _wrap_Vector3___sub},
    { "__mul", _wrap_Vector3___mul},
    { "__eq", _wrap_Vector3___eq},
    { "__lt", _wrap_Vector3___lt},
    { "__le", _wrap_Vector3___le},
    {0,0}
};

static swig_lua_attribute swig_Vector3_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Vector3_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Vector3_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Vector3_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Vector3_Sf_SwigStatic = {
    "Vector3",
    swig_Vector3_Sf_SwigStatic_methods,
    swig_Vector3_Sf_SwigStatic_attributes,
    swig_Vector3_Sf_SwigStatic_constants,
    swig_Vector3_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Vector3_bases[] = {0};
static const char *swig_Vector3_base_names[] = {0};
static swig_lua_class _wrap_class_Vector3 = { "Vector3", "Vector3", &SWIGTYPE_p_cyclone__Vector3,_proxy__wrap_new_Vector3, swig_delete_Vector3, swig_Vector3_methods, swig_Vector3_attributes, &swig_Vector3_Sf_SwigStatic, swig_Vector3_meta, swig_Vector3_bases, swig_Vector3_base_names };

static int _wrap_Quaternion_r_set(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Quaternion *arg1 = (cyclone::Quaternion *) 0 ;
  cyclone::real arg2 ;
  
  SWIG_check_num_args("cyclone::Quaternion::r",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Quaternion::r",1,"cyclone::Quaternion *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::Quaternion::r",2,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_r_set",1,SWIGTYPE_p_cyclone__Quaternion);
  }
  
  arg2 = (cyclone::real)lua_tonumber(L, 2);
  if (arg1) (arg1)->r = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_r_get(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Quaternion *arg1 = (cyclone::Quaternion *) 0 ;
  cyclone::real result;
  
  SWIG_check_num_args("cyclone::Quaternion::r",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Quaternion::r",1,"cyclone::Quaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_r_get",1,SWIGTYPE_p_cyclone__Quaternion);
  }
  
  result = (cyclone::real) ((arg1)->r);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_i_set(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Quaternion *arg1 = (cyclone::Quaternion *) 0 ;
  cyclone::real arg2 ;
  
  SWIG_check_num_args("cyclone::Quaternion::i",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Quaternion::i",1,"cyclone::Quaternion *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::Quaternion::i",2,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_i_set",1,SWIGTYPE_p_cyclone__Quaternion);
  }
  
  arg2 = (cyclone::real)lua_tonumber(L, 2);
  if (arg1) (arg1)->i = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_i_get(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Quaternion *arg1 = (cyclone::Quaternion *) 0 ;
  cyclone::real result;
  
  SWIG_check_num_args("cyclone::Quaternion::i",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Quaternion::i",1,"cyclone::Quaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_i_get",1,SWIGTYPE_p_cyclone__Quaternion);
  }
  
  result = (cyclone::real) ((arg1)->i);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_j_set(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Quaternion *arg1 = (cyclone::Quaternion *) 0 ;
  cyclone::real arg2 ;
  
  SWIG_check_num_args("cyclone::Quaternion::j",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Quaternion::j",1,"cyclone::Quaternion *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::Quaternion::j",2,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_j_set",1,SWIGTYPE_p_cyclone__Quaternion);
  }
  
  arg2 = (cyclone::real)lua_tonumber(L, 2);
  if (arg1) (arg1)->j = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_j_get(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Quaternion *arg1 = (cyclone::Quaternion *) 0 ;
  cyclone::real result;
  
  SWIG_check_num_args("cyclone::Quaternion::j",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Quaternion::j",1,"cyclone::Quaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_j_get",1,SWIGTYPE_p_cyclone__Quaternion);
  }
  
  result = (cyclone::real) ((arg1)->j);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_k_set(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Quaternion *arg1 = (cyclone::Quaternion *) 0 ;
  cyclone::real arg2 ;
  
  SWIG_check_num_args("cyclone::Quaternion::k",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Quaternion::k",1,"cyclone::Quaternion *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::Quaternion::k",2,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_k_set",1,SWIGTYPE_p_cyclone__Quaternion);
  }
  
  arg2 = (cyclone::real)lua_tonumber(L, 2);
  if (arg1) (arg1)->k = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_k_get(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Quaternion *arg1 = (cyclone::Quaternion *) 0 ;
  cyclone::real result;
  
  SWIG_check_num_args("cyclone::Quaternion::k",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Quaternion::k",1,"cyclone::Quaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_k_get",1,SWIGTYPE_p_cyclone__Quaternion);
  }
  
  result = (cyclone::real) ((arg1)->k);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Quaternion *result = 0 ;
  
  SWIG_check_num_args("cyclone::Quaternion::Quaternion",0,0)
  result = (cyclone::Quaternion *)new cyclone::Quaternion();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::real arg1 ;
  cyclone::real arg2 ;
  cyclone::real arg3 ;
  cyclone::real arg4 ;
  cyclone::Quaternion *result = 0 ;
  
  SWIG_check_num_args("cyclone::Quaternion::Quaternion",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cyclone::Quaternion::Quaternion",1,"cyclone::real const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::Quaternion::Quaternion",2,"cyclone::real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::Quaternion::Quaternion",3,"cyclone::real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cyclone::Quaternion::Quaternion",4,"cyclone::real const");
  arg1 = (cyclone::real const)lua_tonumber(L, 1);
  arg2 = (cyclone::real const)lua_tonumber(L, 2);
  arg3 = (cyclone::real const)lua_tonumber(L, 3);
  arg4 = (cyclone::real const)lua_tonumber(L, 4);
  result = (cyclone::Quaternion *)new cyclone::Quaternion(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Quaternion__SWIG_0(L);
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_Quaternion__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Quaternion'\n"
    "  Possible C/C++ prototypes are:\n"
    "    cyclone::Quaternion::Quaternion()\n"
    "    cyclone::Quaternion::Quaternion(cyclone::real const,cyclone::real const,cyclone::real const,cyclone::real const)\n");
  lua_error(L);return 0;
}


static int _wrap_Quaternion_normalise(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Quaternion *arg1 = (cyclone::Quaternion *) 0 ;
  
  SWIG_check_num_args("cyclone::Quaternion::normalise",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Quaternion::normalise",1,"cyclone::Quaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_normalise",1,SWIGTYPE_p_cyclone__Quaternion);
  }
  
  (arg1)->normalise();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_addScaledVector(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Quaternion *arg1 = (cyclone::Quaternion *) 0 ;
  cyclone::Vector3 *arg2 = 0 ;
  cyclone::real arg3 ;
  
  SWIG_check_num_args("cyclone::Quaternion::addScaledVector",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Quaternion::addScaledVector",1,"cyclone::Quaternion *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::Quaternion::addScaledVector",2,"cyclone::Vector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::Quaternion::addScaledVector",3,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_addScaledVector",1,SWIGTYPE_p_cyclone__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Quaternion_addScaledVector",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  arg3 = (cyclone::real)lua_tonumber(L, 3);
  (arg1)->addScaledVector((cyclone::Vector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_rotateByVector(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Quaternion *arg1 = (cyclone::Quaternion *) 0 ;
  cyclone::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("cyclone::Quaternion::rotateByVector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Quaternion::rotateByVector",1,"cyclone::Quaternion *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::Quaternion::rotateByVector",2,"cyclone::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_rotateByVector",1,SWIGTYPE_p_cyclone__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Quaternion_rotateByVector",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  (arg1)->rotateByVector((cyclone::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Quaternion(void *obj) {
cyclone::Quaternion *arg1 = (cyclone::Quaternion *) obj;
delete arg1;
}
static int _proxy__wrap_new_Quaternion(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Quaternion);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Quaternion_attributes[] = {
    { "r", _wrap_Quaternion_r_get, _wrap_Quaternion_r_set },
    { "i", _wrap_Quaternion_i_get, _wrap_Quaternion_i_set },
    { "j", _wrap_Quaternion_j_get, _wrap_Quaternion_j_set },
    { "k", _wrap_Quaternion_k_get, _wrap_Quaternion_k_set },
    {0,0,0}
};
static swig_lua_method swig_Quaternion_methods[]= {
    { "normalise", _wrap_Quaternion_normalise},
    { "addScaledVector", _wrap_Quaternion_addScaledVector},
    { "rotateByVector", _wrap_Quaternion_rotateByVector},
    {0,0}
};
static swig_lua_method swig_Quaternion_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Quaternion_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Quaternion_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Quaternion_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Quaternion_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Quaternion_Sf_SwigStatic = {
    "Quaternion",
    swig_Quaternion_Sf_SwigStatic_methods,
    swig_Quaternion_Sf_SwigStatic_attributes,
    swig_Quaternion_Sf_SwigStatic_constants,
    swig_Quaternion_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Quaternion_bases[] = {0};
static const char *swig_Quaternion_base_names[] = {0};
static swig_lua_class _wrap_class_Quaternion = { "Quaternion", "Quaternion", &SWIGTYPE_p_cyclone__Quaternion,_proxy__wrap_new_Quaternion, swig_delete_Quaternion, swig_Quaternion_methods, swig_Quaternion_attributes, &swig_Quaternion_Sf_SwigStatic, swig_Quaternion_meta, swig_Quaternion_bases, swig_Quaternion_base_names };

static int _wrap_Matrix4_data_set(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Matrix4 *arg1 = (cyclone::Matrix4 *) 0 ;
  cyclone::real *arg2 ;
  
  SWIG_check_num_args("cyclone::Matrix4::data",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Matrix4::data",1,"cyclone::Matrix4 *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::Matrix4::data",2,"cyclone::real [12]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Matrix4,0))){
    SWIG_fail_ptr("Matrix4_data_set",1,SWIGTYPE_p_cyclone__Matrix4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Matrix4_data_set",2,SWIGTYPE_p_double);
  }
  
  {
    size_t ii;
    cyclone::real *b = (cyclone::real *) arg1->data;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((cyclone::real *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4_data_get(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Matrix4 *arg1 = (cyclone::Matrix4 *) 0 ;
  cyclone::real *result = 0 ;
  
  SWIG_check_num_args("cyclone::Matrix4::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Matrix4::data",1,"cyclone::Matrix4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Matrix4,0))){
    SWIG_fail_ptr("Matrix4_data_get",1,SWIGTYPE_p_cyclone__Matrix4);
  }
  
  result = (cyclone::real *)(cyclone::real *) ((arg1)->data);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Matrix4(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Matrix4 *result = 0 ;
  
  SWIG_check_num_args("cyclone::Matrix4::Matrix4",0,0)
  result = (cyclone::Matrix4 *)new cyclone::Matrix4();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__Matrix4,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4_setDiagonal(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Matrix4 *arg1 = (cyclone::Matrix4 *) 0 ;
  cyclone::real arg2 ;
  cyclone::real arg3 ;
  cyclone::real arg4 ;
  
  SWIG_check_num_args("cyclone::Matrix4::setDiagonal",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Matrix4::setDiagonal",1,"cyclone::Matrix4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::Matrix4::setDiagonal",2,"cyclone::real");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::Matrix4::setDiagonal",3,"cyclone::real");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cyclone::Matrix4::setDiagonal",4,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Matrix4,0))){
    SWIG_fail_ptr("Matrix4_setDiagonal",1,SWIGTYPE_p_cyclone__Matrix4);
  }
  
  arg2 = (cyclone::real)lua_tonumber(L, 2);
  arg3 = (cyclone::real)lua_tonumber(L, 3);
  arg4 = (cyclone::real)lua_tonumber(L, 4);
  (arg1)->setDiagonal(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Matrix4 *arg1 = (cyclone::Matrix4 *) 0 ;
  cyclone::Matrix4 *arg2 = 0 ;
  cyclone::Matrix4 result;
  
  SWIG_check_num_args("cyclone::Matrix4::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Matrix4::operator *",1,"cyclone::Matrix4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::Matrix4::operator *",2,"cyclone::Matrix4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Matrix4,0))){
    SWIG_fail_ptr("Matrix4___mul",1,SWIGTYPE_p_cyclone__Matrix4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Matrix4,0))){
    SWIG_fail_ptr("Matrix4___mul",2,SWIGTYPE_p_cyclone__Matrix4);
  }
  
  result = ((cyclone::Matrix4 const *)arg1)->operator *((cyclone::Matrix4 const &)*arg2);
  {
    cyclone::Matrix4 * resultptr = new cyclone::Matrix4((const cyclone::Matrix4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cyclone__Matrix4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Matrix4 *arg1 = (cyclone::Matrix4 *) 0 ;
  cyclone::Vector3 *arg2 = 0 ;
  cyclone::Vector3 result;
  
  SWIG_check_num_args("cyclone::Matrix4::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Matrix4::operator *",1,"cyclone::Matrix4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::Matrix4::operator *",2,"cyclone::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Matrix4,0))){
    SWIG_fail_ptr("Matrix4___mul",1,SWIGTYPE_p_cyclone__Matrix4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Matrix4___mul",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  result = ((cyclone::Matrix4 const *)arg1)->operator *((cyclone::Vector3 const &)*arg2);
  {
    cyclone::Vector3 * resultptr = new cyclone::Vector3((const cyclone::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cyclone__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__Matrix4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_cyclone__Matrix4, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix4___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__Matrix4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix4___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix4___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    cyclone::Matrix4::operator *(cyclone::Matrix4 const &) const\n"
    "    cyclone::Matrix4::operator *(cyclone::Vector3 const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix4_transform(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Matrix4 *arg1 = (cyclone::Matrix4 *) 0 ;
  cyclone::Vector3 *arg2 = 0 ;
  cyclone::Vector3 result;
  
  SWIG_check_num_args("cyclone::Matrix4::transform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Matrix4::transform",1,"cyclone::Matrix4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::Matrix4::transform",2,"cyclone::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Matrix4,0))){
    SWIG_fail_ptr("Matrix4_transform",1,SWIGTYPE_p_cyclone__Matrix4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Matrix4_transform",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  result = ((cyclone::Matrix4 const *)arg1)->transform((cyclone::Vector3 const &)*arg2);
  {
    cyclone::Vector3 * resultptr = new cyclone::Vector3((const cyclone::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cyclone__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4_getDeterminant(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Matrix4 *arg1 = (cyclone::Matrix4 *) 0 ;
  cyclone::real result;
  
  SWIG_check_num_args("cyclone::Matrix4::getDeterminant",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Matrix4::getDeterminant",1,"cyclone::Matrix4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Matrix4,0))){
    SWIG_fail_ptr("Matrix4_getDeterminant",1,SWIGTYPE_p_cyclone__Matrix4);
  }
  
  result = (cyclone::real)((cyclone::Matrix4 const *)arg1)->getDeterminant();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4_setInverse(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Matrix4 *arg1 = (cyclone::Matrix4 *) 0 ;
  cyclone::Matrix4 *arg2 = 0 ;
  
  SWIG_check_num_args("cyclone::Matrix4::setInverse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Matrix4::setInverse",1,"cyclone::Matrix4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::Matrix4::setInverse",2,"cyclone::Matrix4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Matrix4,0))){
    SWIG_fail_ptr("Matrix4_setInverse",1,SWIGTYPE_p_cyclone__Matrix4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Matrix4,0))){
    SWIG_fail_ptr("Matrix4_setInverse",2,SWIGTYPE_p_cyclone__Matrix4);
  }
  
  (arg1)->setInverse((cyclone::Matrix4 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4_inverse(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Matrix4 *arg1 = (cyclone::Matrix4 *) 0 ;
  cyclone::Matrix4 result;
  
  SWIG_check_num_args("cyclone::Matrix4::inverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Matrix4::inverse",1,"cyclone::Matrix4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Matrix4,0))){
    SWIG_fail_ptr("Matrix4_inverse",1,SWIGTYPE_p_cyclone__Matrix4);
  }
  
  result = ((cyclone::Matrix4 const *)arg1)->inverse();
  {
    cyclone::Matrix4 * resultptr = new cyclone::Matrix4((const cyclone::Matrix4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cyclone__Matrix4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4_invert(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Matrix4 *arg1 = (cyclone::Matrix4 *) 0 ;
  
  SWIG_check_num_args("cyclone::Matrix4::invert",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Matrix4::invert",1,"cyclone::Matrix4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Matrix4,0))){
    SWIG_fail_ptr("Matrix4_invert",1,SWIGTYPE_p_cyclone__Matrix4);
  }
  
  (arg1)->invert();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4_transformDirection(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Matrix4 *arg1 = (cyclone::Matrix4 *) 0 ;
  cyclone::Vector3 *arg2 = 0 ;
  cyclone::Vector3 result;
  
  SWIG_check_num_args("cyclone::Matrix4::transformDirection",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Matrix4::transformDirection",1,"cyclone::Matrix4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::Matrix4::transformDirection",2,"cyclone::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Matrix4,0))){
    SWIG_fail_ptr("Matrix4_transformDirection",1,SWIGTYPE_p_cyclone__Matrix4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Matrix4_transformDirection",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  result = ((cyclone::Matrix4 const *)arg1)->transformDirection((cyclone::Vector3 const &)*arg2);
  {
    cyclone::Vector3 * resultptr = new cyclone::Vector3((const cyclone::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cyclone__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4_transformInverseDirection(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Matrix4 *arg1 = (cyclone::Matrix4 *) 0 ;
  cyclone::Vector3 *arg2 = 0 ;
  cyclone::Vector3 result;
  
  SWIG_check_num_args("cyclone::Matrix4::transformInverseDirection",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Matrix4::transformInverseDirection",1,"cyclone::Matrix4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::Matrix4::transformInverseDirection",2,"cyclone::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Matrix4,0))){
    SWIG_fail_ptr("Matrix4_transformInverseDirection",1,SWIGTYPE_p_cyclone__Matrix4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Matrix4_transformInverseDirection",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  result = ((cyclone::Matrix4 const *)arg1)->transformInverseDirection((cyclone::Vector3 const &)*arg2);
  {
    cyclone::Vector3 * resultptr = new cyclone::Vector3((const cyclone::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cyclone__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4_transformInverse(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Matrix4 *arg1 = (cyclone::Matrix4 *) 0 ;
  cyclone::Vector3 *arg2 = 0 ;
  cyclone::Vector3 result;
  
  SWIG_check_num_args("cyclone::Matrix4::transformInverse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Matrix4::transformInverse",1,"cyclone::Matrix4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::Matrix4::transformInverse",2,"cyclone::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Matrix4,0))){
    SWIG_fail_ptr("Matrix4_transformInverse",1,SWIGTYPE_p_cyclone__Matrix4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Matrix4_transformInverse",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  result = ((cyclone::Matrix4 const *)arg1)->transformInverse((cyclone::Vector3 const &)*arg2);
  {
    cyclone::Vector3 * resultptr = new cyclone::Vector3((const cyclone::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cyclone__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4_getAxisVector(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Matrix4 *arg1 = (cyclone::Matrix4 *) 0 ;
  int arg2 ;
  cyclone::Vector3 result;
  
  SWIG_check_num_args("cyclone::Matrix4::getAxisVector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Matrix4::getAxisVector",1,"cyclone::Matrix4 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::Matrix4::getAxisVector",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Matrix4,0))){
    SWIG_fail_ptr("Matrix4_getAxisVector",1,SWIGTYPE_p_cyclone__Matrix4);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((cyclone::Matrix4 const *)arg1)->getAxisVector(arg2);
  {
    cyclone::Vector3 * resultptr = new cyclone::Vector3((const cyclone::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cyclone__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4_setOrientationAndPos(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Matrix4 *arg1 = (cyclone::Matrix4 *) 0 ;
  cyclone::Quaternion *arg2 = 0 ;
  cyclone::Vector3 *arg3 = 0 ;
  
  SWIG_check_num_args("cyclone::Matrix4::setOrientationAndPos",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Matrix4::setOrientationAndPos",1,"cyclone::Matrix4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::Matrix4::setOrientationAndPos",2,"cyclone::Quaternion const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("cyclone::Matrix4::setOrientationAndPos",3,"cyclone::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Matrix4,0))){
    SWIG_fail_ptr("Matrix4_setOrientationAndPos",1,SWIGTYPE_p_cyclone__Matrix4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Quaternion,0))){
    SWIG_fail_ptr("Matrix4_setOrientationAndPos",2,SWIGTYPE_p_cyclone__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Matrix4_setOrientationAndPos",3,SWIGTYPE_p_cyclone__Vector3);
  }
  
  (arg1)->setOrientationAndPos((cyclone::Quaternion const &)*arg2,(cyclone::Vector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4_fillGLArray(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Matrix4 *arg1 = (cyclone::Matrix4 *) 0 ;
  float *arg2 ;
  
  SWIG_check_num_args("cyclone::Matrix4::fillGLArray",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Matrix4::fillGLArray",1,"cyclone::Matrix4 const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::Matrix4::fillGLArray",2,"float [16]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Matrix4,0))){
    SWIG_fail_ptr("Matrix4_fillGLArray",1,SWIGTYPE_p_cyclone__Matrix4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Matrix4_fillGLArray",2,SWIGTYPE_p_float);
  }
  
  ((cyclone::Matrix4 const *)arg1)->fillGLArray(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Matrix4(void *obj) {
cyclone::Matrix4 *arg1 = (cyclone::Matrix4 *) obj;
delete arg1;
}
static int _proxy__wrap_new_Matrix4(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Matrix4);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Matrix4_attributes[] = {
    { "data", _wrap_Matrix4_data_get, _wrap_Matrix4_data_set },
    {0,0,0}
};
static swig_lua_method swig_Matrix4_methods[]= {
    { "setDiagonal", _wrap_Matrix4_setDiagonal},
    { "__mul", _wrap_Matrix4___mul},
    { "transform", _wrap_Matrix4_transform},
    { "getDeterminant", _wrap_Matrix4_getDeterminant},
    { "setInverse", _wrap_Matrix4_setInverse},
    { "inverse", _wrap_Matrix4_inverse},
    { "invert", _wrap_Matrix4_invert},
    { "transformDirection", _wrap_Matrix4_transformDirection},
    { "transformInverseDirection", _wrap_Matrix4_transformInverseDirection},
    { "transformInverse", _wrap_Matrix4_transformInverse},
    { "getAxisVector", _wrap_Matrix4_getAxisVector},
    { "setOrientationAndPos", _wrap_Matrix4_setOrientationAndPos},
    { "fillGLArray", _wrap_Matrix4_fillGLArray},
    {0,0}
};
static swig_lua_method swig_Matrix4_meta[] = {
    { "__mul", _wrap_Matrix4___mul},
    {0,0}
};

static swig_lua_attribute swig_Matrix4_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Matrix4_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Matrix4_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Matrix4_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Matrix4_Sf_SwigStatic = {
    "Matrix4",
    swig_Matrix4_Sf_SwigStatic_methods,
    swig_Matrix4_Sf_SwigStatic_attributes,
    swig_Matrix4_Sf_SwigStatic_constants,
    swig_Matrix4_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Matrix4_bases[] = {0};
static const char *swig_Matrix4_base_names[] = {0};
static swig_lua_class _wrap_class_Matrix4 = { "Matrix4", "Matrix4", &SWIGTYPE_p_cyclone__Matrix4,_proxy__wrap_new_Matrix4, swig_delete_Matrix4, swig_Matrix4_methods, swig_Matrix4_attributes, &swig_Matrix4_Sf_SwigStatic, swig_Matrix4_meta, swig_Matrix4_bases, swig_Matrix4_base_names };

static int _wrap_Matrix3_data_set(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Matrix3 *arg1 = (cyclone::Matrix3 *) 0 ;
  cyclone::real *arg2 ;
  
  SWIG_check_num_args("cyclone::Matrix3::data",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Matrix3::data",1,"cyclone::Matrix3 *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::Matrix3::data",2,"cyclone::real [9]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Matrix3,0))){
    SWIG_fail_ptr("Matrix3_data_set",1,SWIGTYPE_p_cyclone__Matrix3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Matrix3_data_set",2,SWIGTYPE_p_double);
  }
  
  {
    size_t ii;
    cyclone::real *b = (cyclone::real *) arg1->data;
    for (ii = 0; ii < (size_t)9; ii++) b[ii] = *((cyclone::real *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix3_data_get(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Matrix3 *arg1 = (cyclone::Matrix3 *) 0 ;
  cyclone::real *result = 0 ;
  
  SWIG_check_num_args("cyclone::Matrix3::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Matrix3::data",1,"cyclone::Matrix3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Matrix3,0))){
    SWIG_fail_ptr("Matrix3_data_get",1,SWIGTYPE_p_cyclone__Matrix3);
  }
  
  result = (cyclone::real *)(cyclone::real *) ((arg1)->data);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Matrix3__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Matrix3 *result = 0 ;
  
  SWIG_check_num_args("cyclone::Matrix3::Matrix3",0,0)
  result = (cyclone::Matrix3 *)new cyclone::Matrix3();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__Matrix3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Matrix3__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Vector3 *arg1 = 0 ;
  cyclone::Vector3 *arg2 = 0 ;
  cyclone::Vector3 *arg3 = 0 ;
  cyclone::Matrix3 *result = 0 ;
  
  SWIG_check_num_args("cyclone::Matrix3::Matrix3",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("cyclone::Matrix3::Matrix3",1,"cyclone::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::Matrix3::Matrix3",2,"cyclone::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("cyclone::Matrix3::Matrix3",3,"cyclone::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("new_Matrix3",1,SWIGTYPE_p_cyclone__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("new_Matrix3",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("new_Matrix3",3,SWIGTYPE_p_cyclone__Vector3);
  }
  
  result = (cyclone::Matrix3 *)new cyclone::Matrix3((cyclone::Vector3 const &)*arg1,(cyclone::Vector3 const &)*arg2,(cyclone::Vector3 const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__Matrix3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Matrix3__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::real arg1 ;
  cyclone::real arg2 ;
  cyclone::real arg3 ;
  cyclone::real arg4 ;
  cyclone::real arg5 ;
  cyclone::real arg6 ;
  cyclone::real arg7 ;
  cyclone::real arg8 ;
  cyclone::real arg9 ;
  cyclone::Matrix3 *result = 0 ;
  
  SWIG_check_num_args("cyclone::Matrix3::Matrix3",9,9)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cyclone::Matrix3::Matrix3",1,"cyclone::real");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::Matrix3::Matrix3",2,"cyclone::real");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::Matrix3::Matrix3",3,"cyclone::real");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cyclone::Matrix3::Matrix3",4,"cyclone::real");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cyclone::Matrix3::Matrix3",5,"cyclone::real");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cyclone::Matrix3::Matrix3",6,"cyclone::real");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cyclone::Matrix3::Matrix3",7,"cyclone::real");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cyclone::Matrix3::Matrix3",8,"cyclone::real");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cyclone::Matrix3::Matrix3",9,"cyclone::real");
  arg1 = (cyclone::real)lua_tonumber(L, 1);
  arg2 = (cyclone::real)lua_tonumber(L, 2);
  arg3 = (cyclone::real)lua_tonumber(L, 3);
  arg4 = (cyclone::real)lua_tonumber(L, 4);
  arg5 = (cyclone::real)lua_tonumber(L, 5);
  arg6 = (cyclone::real)lua_tonumber(L, 6);
  arg7 = (cyclone::real)lua_tonumber(L, 7);
  arg8 = (cyclone::real)lua_tonumber(L, 8);
  arg9 = (cyclone::real)lua_tonumber(L, 9);
  result = (cyclone::Matrix3 *)new cyclone::Matrix3(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__Matrix3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Matrix3(lua_State* L) {
  int argc;
  int argv[10]={
    1,2,3,4,5,6,7,8,9,10
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Matrix3__SWIG_0(L);
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_Matrix3__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      return _wrap_new_Matrix3__SWIG_2(L);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Matrix3'\n"
    "  Possible C/C++ prototypes are:\n"
    "    cyclone::Matrix3::Matrix3()\n"
    "    cyclone::Matrix3::Matrix3(cyclone::Vector3 const &,cyclone::Vector3 const &,cyclone::Vector3 const &)\n"
    "    cyclone::Matrix3::Matrix3(cyclone::real,cyclone::real,cyclone::real,cyclone::real,cyclone::real,cyclone::real,cyclone::real,cyclone::real,cyclone::real)\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix3_setDiagonal(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Matrix3 *arg1 = (cyclone::Matrix3 *) 0 ;
  cyclone::real arg2 ;
  cyclone::real arg3 ;
  cyclone::real arg4 ;
  
  SWIG_check_num_args("cyclone::Matrix3::setDiagonal",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Matrix3::setDiagonal",1,"cyclone::Matrix3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::Matrix3::setDiagonal",2,"cyclone::real");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::Matrix3::setDiagonal",3,"cyclone::real");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cyclone::Matrix3::setDiagonal",4,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Matrix3,0))){
    SWIG_fail_ptr("Matrix3_setDiagonal",1,SWIGTYPE_p_cyclone__Matrix3);
  }
  
  arg2 = (cyclone::real)lua_tonumber(L, 2);
  arg3 = (cyclone::real)lua_tonumber(L, 3);
  arg4 = (cyclone::real)lua_tonumber(L, 4);
  (arg1)->setDiagonal(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix3_setInertiaTensorCoeffs__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Matrix3 *arg1 = (cyclone::Matrix3 *) 0 ;
  cyclone::real arg2 ;
  cyclone::real arg3 ;
  cyclone::real arg4 ;
  cyclone::real arg5 ;
  cyclone::real arg6 ;
  cyclone::real arg7 ;
  
  SWIG_check_num_args("cyclone::Matrix3::setInertiaTensorCoeffs",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Matrix3::setInertiaTensorCoeffs",1,"cyclone::Matrix3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::Matrix3::setInertiaTensorCoeffs",2,"cyclone::real");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::Matrix3::setInertiaTensorCoeffs",3,"cyclone::real");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cyclone::Matrix3::setInertiaTensorCoeffs",4,"cyclone::real");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cyclone::Matrix3::setInertiaTensorCoeffs",5,"cyclone::real");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cyclone::Matrix3::setInertiaTensorCoeffs",6,"cyclone::real");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cyclone::Matrix3::setInertiaTensorCoeffs",7,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Matrix3,0))){
    SWIG_fail_ptr("Matrix3_setInertiaTensorCoeffs",1,SWIGTYPE_p_cyclone__Matrix3);
  }
  
  arg2 = (cyclone::real)lua_tonumber(L, 2);
  arg3 = (cyclone::real)lua_tonumber(L, 3);
  arg4 = (cyclone::real)lua_tonumber(L, 4);
  arg5 = (cyclone::real)lua_tonumber(L, 5);
  arg6 = (cyclone::real)lua_tonumber(L, 6);
  arg7 = (cyclone::real)lua_tonumber(L, 7);
  (arg1)->setInertiaTensorCoeffs(arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix3_setInertiaTensorCoeffs__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Matrix3 *arg1 = (cyclone::Matrix3 *) 0 ;
  cyclone::real arg2 ;
  cyclone::real arg3 ;
  cyclone::real arg4 ;
  cyclone::real arg5 ;
  cyclone::real arg6 ;
  
  SWIG_check_num_args("cyclone::Matrix3::setInertiaTensorCoeffs",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Matrix3::setInertiaTensorCoeffs",1,"cyclone::Matrix3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::Matrix3::setInertiaTensorCoeffs",2,"cyclone::real");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::Matrix3::setInertiaTensorCoeffs",3,"cyclone::real");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cyclone::Matrix3::setInertiaTensorCoeffs",4,"cyclone::real");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cyclone::Matrix3::setInertiaTensorCoeffs",5,"cyclone::real");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cyclone::Matrix3::setInertiaTensorCoeffs",6,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Matrix3,0))){
    SWIG_fail_ptr("Matrix3_setInertiaTensorCoeffs",1,SWIGTYPE_p_cyclone__Matrix3);
  }
  
  arg2 = (cyclone::real)lua_tonumber(L, 2);
  arg3 = (cyclone::real)lua_tonumber(L, 3);
  arg4 = (cyclone::real)lua_tonumber(L, 4);
  arg5 = (cyclone::real)lua_tonumber(L, 5);
  arg6 = (cyclone::real)lua_tonumber(L, 6);
  (arg1)->setInertiaTensorCoeffs(arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix3_setInertiaTensorCoeffs__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Matrix3 *arg1 = (cyclone::Matrix3 *) 0 ;
  cyclone::real arg2 ;
  cyclone::real arg3 ;
  cyclone::real arg4 ;
  cyclone::real arg5 ;
  
  SWIG_check_num_args("cyclone::Matrix3::setInertiaTensorCoeffs",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Matrix3::setInertiaTensorCoeffs",1,"cyclone::Matrix3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::Matrix3::setInertiaTensorCoeffs",2,"cyclone::real");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::Matrix3::setInertiaTensorCoeffs",3,"cyclone::real");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cyclone::Matrix3::setInertiaTensorCoeffs",4,"cyclone::real");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cyclone::Matrix3::setInertiaTensorCoeffs",5,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Matrix3,0))){
    SWIG_fail_ptr("Matrix3_setInertiaTensorCoeffs",1,SWIGTYPE_p_cyclone__Matrix3);
  }
  
  arg2 = (cyclone::real)lua_tonumber(L, 2);
  arg3 = (cyclone::real)lua_tonumber(L, 3);
  arg4 = (cyclone::real)lua_tonumber(L, 4);
  arg5 = (cyclone::real)lua_tonumber(L, 5);
  (arg1)->setInertiaTensorCoeffs(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix3_setInertiaTensorCoeffs__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Matrix3 *arg1 = (cyclone::Matrix3 *) 0 ;
  cyclone::real arg2 ;
  cyclone::real arg3 ;
  cyclone::real arg4 ;
  
  SWIG_check_num_args("cyclone::Matrix3::setInertiaTensorCoeffs",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Matrix3::setInertiaTensorCoeffs",1,"cyclone::Matrix3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::Matrix3::setInertiaTensorCoeffs",2,"cyclone::real");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::Matrix3::setInertiaTensorCoeffs",3,"cyclone::real");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cyclone::Matrix3::setInertiaTensorCoeffs",4,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Matrix3,0))){
    SWIG_fail_ptr("Matrix3_setInertiaTensorCoeffs",1,SWIGTYPE_p_cyclone__Matrix3);
  }
  
  arg2 = (cyclone::real)lua_tonumber(L, 2);
  arg3 = (cyclone::real)lua_tonumber(L, 3);
  arg4 = (cyclone::real)lua_tonumber(L, 4);
  (arg1)->setInertiaTensorCoeffs(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix3_setInertiaTensorCoeffs(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__Matrix3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Matrix3_setInertiaTensorCoeffs__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__Matrix3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_Matrix3_setInertiaTensorCoeffs__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__Matrix3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_Matrix3_setInertiaTensorCoeffs__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__Matrix3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_Matrix3_setInertiaTensorCoeffs__SWIG_0(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix3_setInertiaTensorCoeffs'\n"
    "  Possible C/C++ prototypes are:\n"
    "    cyclone::Matrix3::setInertiaTensorCoeffs(cyclone::real,cyclone::real,cyclone::real,cyclone::real,cyclone::real,cyclone::real)\n"
    "    cyclone::Matrix3::setInertiaTensorCoeffs(cyclone::real,cyclone::real,cyclone::real,cyclone::real,cyclone::real)\n"
    "    cyclone::Matrix3::setInertiaTensorCoeffs(cyclone::real,cyclone::real,cyclone::real,cyclone::real)\n"
    "    cyclone::Matrix3::setInertiaTensorCoeffs(cyclone::real,cyclone::real,cyclone::real)\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix3_setBlockInertiaTensor(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Matrix3 *arg1 = (cyclone::Matrix3 *) 0 ;
  cyclone::Vector3 *arg2 = 0 ;
  cyclone::real arg3 ;
  
  SWIG_check_num_args("cyclone::Matrix3::setBlockInertiaTensor",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Matrix3::setBlockInertiaTensor",1,"cyclone::Matrix3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::Matrix3::setBlockInertiaTensor",2,"cyclone::Vector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::Matrix3::setBlockInertiaTensor",3,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Matrix3,0))){
    SWIG_fail_ptr("Matrix3_setBlockInertiaTensor",1,SWIGTYPE_p_cyclone__Matrix3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Matrix3_setBlockInertiaTensor",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  arg3 = (cyclone::real)lua_tonumber(L, 3);
  (arg1)->setBlockInertiaTensor((cyclone::Vector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix3_setSkewSymmetric(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Matrix3 *arg1 = (cyclone::Matrix3 *) 0 ;
  cyclone::Vector3 arg2 ;
  cyclone::Vector3 *argp2 ;
  
  SWIG_check_num_args("cyclone::Matrix3::setSkewSymmetric",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Matrix3::setSkewSymmetric",1,"cyclone::Matrix3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::Matrix3::setSkewSymmetric",2,"cyclone::Vector3 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Matrix3,0))){
    SWIG_fail_ptr("Matrix3_setSkewSymmetric",1,SWIGTYPE_p_cyclone__Matrix3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Matrix3_setSkewSymmetric",2,SWIGTYPE_p_cyclone__Vector3);
  }
  arg2 = *argp2;
  
  (arg1)->setSkewSymmetric(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix3_setComponents(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Matrix3 *arg1 = (cyclone::Matrix3 *) 0 ;
  cyclone::Vector3 *arg2 = 0 ;
  cyclone::Vector3 *arg3 = 0 ;
  cyclone::Vector3 *arg4 = 0 ;
  
  SWIG_check_num_args("cyclone::Matrix3::setComponents",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Matrix3::setComponents",1,"cyclone::Matrix3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::Matrix3::setComponents",2,"cyclone::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("cyclone::Matrix3::setComponents",3,"cyclone::Vector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("cyclone::Matrix3::setComponents",4,"cyclone::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Matrix3,0))){
    SWIG_fail_ptr("Matrix3_setComponents",1,SWIGTYPE_p_cyclone__Matrix3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Matrix3_setComponents",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Matrix3_setComponents",3,SWIGTYPE_p_cyclone__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Matrix3_setComponents",4,SWIGTYPE_p_cyclone__Vector3);
  }
  
  (arg1)->setComponents((cyclone::Vector3 const &)*arg2,(cyclone::Vector3 const &)*arg3,(cyclone::Vector3 const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix3___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Matrix3 *arg1 = (cyclone::Matrix3 *) 0 ;
  cyclone::Vector3 *arg2 = 0 ;
  cyclone::Vector3 result;
  
  SWIG_check_num_args("cyclone::Matrix3::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Matrix3::operator *",1,"cyclone::Matrix3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::Matrix3::operator *",2,"cyclone::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Matrix3,0))){
    SWIG_fail_ptr("Matrix3___mul",1,SWIGTYPE_p_cyclone__Matrix3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Matrix3___mul",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  result = ((cyclone::Matrix3 const *)arg1)->operator *((cyclone::Vector3 const &)*arg2);
  {
    cyclone::Vector3 * resultptr = new cyclone::Vector3((const cyclone::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cyclone__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix3_transform(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Matrix3 *arg1 = (cyclone::Matrix3 *) 0 ;
  cyclone::Vector3 *arg2 = 0 ;
  cyclone::Vector3 result;
  
  SWIG_check_num_args("cyclone::Matrix3::transform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Matrix3::transform",1,"cyclone::Matrix3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::Matrix3::transform",2,"cyclone::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Matrix3,0))){
    SWIG_fail_ptr("Matrix3_transform",1,SWIGTYPE_p_cyclone__Matrix3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Matrix3_transform",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  result = ((cyclone::Matrix3 const *)arg1)->transform((cyclone::Vector3 const &)*arg2);
  {
    cyclone::Vector3 * resultptr = new cyclone::Vector3((const cyclone::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cyclone__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix3_transformTranspose(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Matrix3 *arg1 = (cyclone::Matrix3 *) 0 ;
  cyclone::Vector3 *arg2 = 0 ;
  cyclone::Vector3 result;
  
  SWIG_check_num_args("cyclone::Matrix3::transformTranspose",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Matrix3::transformTranspose",1,"cyclone::Matrix3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::Matrix3::transformTranspose",2,"cyclone::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Matrix3,0))){
    SWIG_fail_ptr("Matrix3_transformTranspose",1,SWIGTYPE_p_cyclone__Matrix3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Matrix3_transformTranspose",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  result = ((cyclone::Matrix3 const *)arg1)->transformTranspose((cyclone::Vector3 const &)*arg2);
  {
    cyclone::Vector3 * resultptr = new cyclone::Vector3((const cyclone::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cyclone__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix3_getRowVector(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Matrix3 *arg1 = (cyclone::Matrix3 *) 0 ;
  int arg2 ;
  cyclone::Vector3 result;
  
  SWIG_check_num_args("cyclone::Matrix3::getRowVector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Matrix3::getRowVector",1,"cyclone::Matrix3 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::Matrix3::getRowVector",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Matrix3,0))){
    SWIG_fail_ptr("Matrix3_getRowVector",1,SWIGTYPE_p_cyclone__Matrix3);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((cyclone::Matrix3 const *)arg1)->getRowVector(arg2);
  {
    cyclone::Vector3 * resultptr = new cyclone::Vector3((const cyclone::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cyclone__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix3_getAxisVector(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Matrix3 *arg1 = (cyclone::Matrix3 *) 0 ;
  int arg2 ;
  cyclone::Vector3 result;
  
  SWIG_check_num_args("cyclone::Matrix3::getAxisVector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Matrix3::getAxisVector",1,"cyclone::Matrix3 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::Matrix3::getAxisVector",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Matrix3,0))){
    SWIG_fail_ptr("Matrix3_getAxisVector",1,SWIGTYPE_p_cyclone__Matrix3);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((cyclone::Matrix3 const *)arg1)->getAxisVector(arg2);
  {
    cyclone::Vector3 * resultptr = new cyclone::Vector3((const cyclone::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cyclone__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix3_setInverse(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Matrix3 *arg1 = (cyclone::Matrix3 *) 0 ;
  cyclone::Matrix3 *arg2 = 0 ;
  
  SWIG_check_num_args("cyclone::Matrix3::setInverse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Matrix3::setInverse",1,"cyclone::Matrix3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::Matrix3::setInverse",2,"cyclone::Matrix3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Matrix3,0))){
    SWIG_fail_ptr("Matrix3_setInverse",1,SWIGTYPE_p_cyclone__Matrix3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Matrix3,0))){
    SWIG_fail_ptr("Matrix3_setInverse",2,SWIGTYPE_p_cyclone__Matrix3);
  }
  
  (arg1)->setInverse((cyclone::Matrix3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix3_inverse(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Matrix3 *arg1 = (cyclone::Matrix3 *) 0 ;
  cyclone::Matrix3 result;
  
  SWIG_check_num_args("cyclone::Matrix3::inverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Matrix3::inverse",1,"cyclone::Matrix3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Matrix3,0))){
    SWIG_fail_ptr("Matrix3_inverse",1,SWIGTYPE_p_cyclone__Matrix3);
  }
  
  result = ((cyclone::Matrix3 const *)arg1)->inverse();
  {
    cyclone::Matrix3 * resultptr = new cyclone::Matrix3((const cyclone::Matrix3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cyclone__Matrix3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix3_invert(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Matrix3 *arg1 = (cyclone::Matrix3 *) 0 ;
  
  SWIG_check_num_args("cyclone::Matrix3::invert",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Matrix3::invert",1,"cyclone::Matrix3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Matrix3,0))){
    SWIG_fail_ptr("Matrix3_invert",1,SWIGTYPE_p_cyclone__Matrix3);
  }
  
  (arg1)->invert();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix3_setTranspose(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Matrix3 *arg1 = (cyclone::Matrix3 *) 0 ;
  cyclone::Matrix3 *arg2 = 0 ;
  
  SWIG_check_num_args("cyclone::Matrix3::setTranspose",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Matrix3::setTranspose",1,"cyclone::Matrix3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::Matrix3::setTranspose",2,"cyclone::Matrix3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Matrix3,0))){
    SWIG_fail_ptr("Matrix3_setTranspose",1,SWIGTYPE_p_cyclone__Matrix3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Matrix3,0))){
    SWIG_fail_ptr("Matrix3_setTranspose",2,SWIGTYPE_p_cyclone__Matrix3);
  }
  
  (arg1)->setTranspose((cyclone::Matrix3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix3_transpose(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Matrix3 *arg1 = (cyclone::Matrix3 *) 0 ;
  cyclone::Matrix3 result;
  
  SWIG_check_num_args("cyclone::Matrix3::transpose",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Matrix3::transpose",1,"cyclone::Matrix3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Matrix3,0))){
    SWIG_fail_ptr("Matrix3_transpose",1,SWIGTYPE_p_cyclone__Matrix3);
  }
  
  result = ((cyclone::Matrix3 const *)arg1)->transpose();
  {
    cyclone::Matrix3 * resultptr = new cyclone::Matrix3((const cyclone::Matrix3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cyclone__Matrix3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix3___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Matrix3 *arg1 = (cyclone::Matrix3 *) 0 ;
  cyclone::Matrix3 *arg2 = 0 ;
  cyclone::Matrix3 result;
  
  SWIG_check_num_args("cyclone::Matrix3::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Matrix3::operator *",1,"cyclone::Matrix3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::Matrix3::operator *",2,"cyclone::Matrix3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Matrix3,0))){
    SWIG_fail_ptr("Matrix3___mul",1,SWIGTYPE_p_cyclone__Matrix3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Matrix3,0))){
    SWIG_fail_ptr("Matrix3___mul",2,SWIGTYPE_p_cyclone__Matrix3);
  }
  
  result = ((cyclone::Matrix3 const *)arg1)->operator *((cyclone::Matrix3 const &)*arg2);
  {
    cyclone::Matrix3 * resultptr = new cyclone::Matrix3((const cyclone::Matrix3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cyclone__Matrix3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix3___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__Matrix3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix3___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__Matrix3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_cyclone__Matrix3, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix3___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix3___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    cyclone::Matrix3::operator *(cyclone::Vector3 const &) const\n"
    "    cyclone::Matrix3::operator *(cyclone::Matrix3 const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix3_setOrientation(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Matrix3 *arg1 = (cyclone::Matrix3 *) 0 ;
  cyclone::Quaternion *arg2 = 0 ;
  
  SWIG_check_num_args("cyclone::Matrix3::setOrientation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Matrix3::setOrientation",1,"cyclone::Matrix3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::Matrix3::setOrientation",2,"cyclone::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Matrix3,0))){
    SWIG_fail_ptr("Matrix3_setOrientation",1,SWIGTYPE_p_cyclone__Matrix3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Quaternion,0))){
    SWIG_fail_ptr("Matrix3_setOrientation",2,SWIGTYPE_p_cyclone__Quaternion);
  }
  
  (arg1)->setOrientation((cyclone::Quaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix3_linearInterpolate(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Matrix3 *arg1 = 0 ;
  cyclone::Matrix3 *arg2 = 0 ;
  cyclone::real arg3 ;
  cyclone::Matrix3 result;
  
  SWIG_check_num_args("cyclone::Matrix3::linearInterpolate",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("cyclone::Matrix3::linearInterpolate",1,"cyclone::Matrix3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::Matrix3::linearInterpolate",2,"cyclone::Matrix3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::Matrix3::linearInterpolate",3,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Matrix3,0))){
    SWIG_fail_ptr("Matrix3_linearInterpolate",1,SWIGTYPE_p_cyclone__Matrix3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Matrix3,0))){
    SWIG_fail_ptr("Matrix3_linearInterpolate",2,SWIGTYPE_p_cyclone__Matrix3);
  }
  
  arg3 = (cyclone::real)lua_tonumber(L, 3);
  result = cyclone::Matrix3::linearInterpolate((cyclone::Matrix3 const &)*arg1,(cyclone::Matrix3 const &)*arg2,arg3);
  {
    cyclone::Matrix3 * resultptr = new cyclone::Matrix3((const cyclone::Matrix3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cyclone__Matrix3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Matrix3(void *obj) {
cyclone::Matrix3 *arg1 = (cyclone::Matrix3 *) obj;
delete arg1;
}
static int _proxy__wrap_new_Matrix3(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Matrix3);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Matrix3_attributes[] = {
    { "data", _wrap_Matrix3_data_get, _wrap_Matrix3_data_set },
    {0,0,0}
};
static swig_lua_method swig_Matrix3_methods[]= {
    { "setDiagonal", _wrap_Matrix3_setDiagonal},
    { "setInertiaTensorCoeffs", _wrap_Matrix3_setInertiaTensorCoeffs},
    { "setBlockInertiaTensor", _wrap_Matrix3_setBlockInertiaTensor},
    { "setSkewSymmetric", _wrap_Matrix3_setSkewSymmetric},
    { "setComponents", _wrap_Matrix3_setComponents},
    { "transform", _wrap_Matrix3_transform},
    { "transformTranspose", _wrap_Matrix3_transformTranspose},
    { "getRowVector", _wrap_Matrix3_getRowVector},
    { "getAxisVector", _wrap_Matrix3_getAxisVector},
    { "setInverse", _wrap_Matrix3_setInverse},
    { "inverse", _wrap_Matrix3_inverse},
    { "invert", _wrap_Matrix3_invert},
    { "setTranspose", _wrap_Matrix3_setTranspose},
    { "transpose", _wrap_Matrix3_transpose},
    { "__mul", _wrap_Matrix3___mul},
    { "setOrientation", _wrap_Matrix3_setOrientation},
    {0,0}
};
static swig_lua_method swig_Matrix3_meta[] = {
    { "__mul", _wrap_Matrix3___mul},
    {0,0}
};

static swig_lua_attribute swig_Matrix3_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Matrix3_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Matrix3_Sf_SwigStatic_methods[]= {
    { "linearInterpolate", _wrap_Matrix3_linearInterpolate},
    {0,0}
};
static swig_lua_class* swig_Matrix3_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Matrix3_Sf_SwigStatic = {
    "Matrix3",
    swig_Matrix3_Sf_SwigStatic_methods,
    swig_Matrix3_Sf_SwigStatic_attributes,
    swig_Matrix3_Sf_SwigStatic_constants,
    swig_Matrix3_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Matrix3_bases[] = {0};
static const char *swig_Matrix3_base_names[] = {0};
static swig_lua_class _wrap_class_Matrix3 = { "Matrix3", "Matrix3", &SWIGTYPE_p_cyclone__Matrix3,_proxy__wrap_new_Matrix3, swig_delete_Matrix3, swig_Matrix3_methods, swig_Matrix3_attributes, &swig_Matrix3_Sf_SwigStatic, swig_Matrix3_meta, swig_Matrix3_bases, swig_Matrix3_base_names };

static int _wrap_Random_rotl(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Random *arg1 = (cyclone::Random *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int result;
  
  SWIG_check_num_args("cyclone::Random::rotl",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Random::rotl",1,"cyclone::Random *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::Random::rotl",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::Random::rotl",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Random,0))){
    SWIG_fail_ptr("Random_rotl",1,SWIGTYPE_p_cyclone__Random);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (unsigned int)(arg1)->rotl(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Random_rotr(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Random *arg1 = (cyclone::Random *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int result;
  
  SWIG_check_num_args("cyclone::Random::rotr",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Random::rotr",1,"cyclone::Random *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::Random::rotr",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::Random::rotr",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Random,0))){
    SWIG_fail_ptr("Random_rotr",1,SWIGTYPE_p_cyclone__Random);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (unsigned int)(arg1)->rotr(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Random__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Random *result = 0 ;
  
  SWIG_check_num_args("cyclone::Random::Random",0,0)
  result = (cyclone::Random *)new cyclone::Random();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__Random,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Random__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  cyclone::Random *result = 0 ;
  
  SWIG_check_num_args("cyclone::Random::Random",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cyclone::Random::Random",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (cyclone::Random *)new cyclone::Random(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__Random,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Random(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Random__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Random__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Random'\n"
    "  Possible C/C++ prototypes are:\n"
    "    cyclone::Random::Random()\n"
    "    cyclone::Random::Random(unsigned int)\n");
  lua_error(L);return 0;
}


static int _wrap_Random_seed(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Random *arg1 = (cyclone::Random *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("cyclone::Random::seed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Random::seed",1,"cyclone::Random *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::Random::seed",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Random,0))){
    SWIG_fail_ptr("Random_seed",1,SWIGTYPE_p_cyclone__Random);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->seed(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Random_randomBits(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Random *arg1 = (cyclone::Random *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("cyclone::Random::randomBits",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Random::randomBits",1,"cyclone::Random *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Random,0))){
    SWIG_fail_ptr("Random_randomBits",1,SWIGTYPE_p_cyclone__Random);
  }
  
  result = (unsigned int)(arg1)->randomBits();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Random_randomReal__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Random *arg1 = (cyclone::Random *) 0 ;
  cyclone::real result;
  
  SWIG_check_num_args("cyclone::Random::randomReal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Random::randomReal",1,"cyclone::Random *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Random,0))){
    SWIG_fail_ptr("Random_randomReal",1,SWIGTYPE_p_cyclone__Random);
  }
  
  result = (cyclone::real)(arg1)->randomReal();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Random_randomReal__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Random *arg1 = (cyclone::Random *) 0 ;
  cyclone::real arg2 ;
  cyclone::real result;
  
  SWIG_check_num_args("cyclone::Random::randomReal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Random::randomReal",1,"cyclone::Random *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::Random::randomReal",2,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Random,0))){
    SWIG_fail_ptr("Random_randomReal",1,SWIGTYPE_p_cyclone__Random);
  }
  
  arg2 = (cyclone::real)lua_tonumber(L, 2);
  result = (cyclone::real)(arg1)->randomReal(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Random_randomReal__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Random *arg1 = (cyclone::Random *) 0 ;
  cyclone::real arg2 ;
  cyclone::real arg3 ;
  cyclone::real result;
  
  SWIG_check_num_args("cyclone::Random::randomReal",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Random::randomReal",1,"cyclone::Random *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::Random::randomReal",2,"cyclone::real");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::Random::randomReal",3,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Random,0))){
    SWIG_fail_ptr("Random_randomReal",1,SWIGTYPE_p_cyclone__Random);
  }
  
  arg2 = (cyclone::real)lua_tonumber(L, 2);
  arg3 = (cyclone::real)lua_tonumber(L, 3);
  result = (cyclone::real)(arg1)->randomReal(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Random_randomReal(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__Random, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Random_randomReal__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__Random, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Random_randomReal__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__Random, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Random_randomReal__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Random_randomReal'\n"
    "  Possible C/C++ prototypes are:\n"
    "    cyclone::Random::randomReal()\n"
    "    cyclone::Random::randomReal(cyclone::real)\n"
    "    cyclone::Random::randomReal(cyclone::real,cyclone::real)\n");
  lua_error(L);return 0;
}


static int _wrap_Random_randomInt(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Random *arg1 = (cyclone::Random *) 0 ;
  unsigned int arg2 ;
  unsigned int result;
  
  SWIG_check_num_args("cyclone::Random::randomInt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Random::randomInt",1,"cyclone::Random *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::Random::randomInt",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Random,0))){
    SWIG_fail_ptr("Random_randomInt",1,SWIGTYPE_p_cyclone__Random);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (unsigned int)(arg1)->randomInt(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Random_randomBinomial(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Random *arg1 = (cyclone::Random *) 0 ;
  cyclone::real arg2 ;
  cyclone::real result;
  
  SWIG_check_num_args("cyclone::Random::randomBinomial",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Random::randomBinomial",1,"cyclone::Random *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::Random::randomBinomial",2,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Random,0))){
    SWIG_fail_ptr("Random_randomBinomial",1,SWIGTYPE_p_cyclone__Random);
  }
  
  arg2 = (cyclone::real)lua_tonumber(L, 2);
  result = (cyclone::real)(arg1)->randomBinomial(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Random_randomVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Random *arg1 = (cyclone::Random *) 0 ;
  cyclone::real arg2 ;
  cyclone::Vector3 result;
  
  SWIG_check_num_args("cyclone::Random::randomVector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Random::randomVector",1,"cyclone::Random *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::Random::randomVector",2,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Random,0))){
    SWIG_fail_ptr("Random_randomVector",1,SWIGTYPE_p_cyclone__Random);
  }
  
  arg2 = (cyclone::real)lua_tonumber(L, 2);
  result = (arg1)->randomVector(arg2);
  {
    cyclone::Vector3 * resultptr = new cyclone::Vector3((const cyclone::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cyclone__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Random_randomVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Random *arg1 = (cyclone::Random *) 0 ;
  cyclone::Vector3 *arg2 = 0 ;
  cyclone::Vector3 result;
  
  SWIG_check_num_args("cyclone::Random::randomVector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Random::randomVector",1,"cyclone::Random *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::Random::randomVector",2,"cyclone::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Random,0))){
    SWIG_fail_ptr("Random_randomVector",1,SWIGTYPE_p_cyclone__Random);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Random_randomVector",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  result = (arg1)->randomVector((cyclone::Vector3 const &)*arg2);
  {
    cyclone::Vector3 * resultptr = new cyclone::Vector3((const cyclone::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cyclone__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Random_randomVector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Random *arg1 = (cyclone::Random *) 0 ;
  cyclone::Vector3 *arg2 = 0 ;
  cyclone::Vector3 *arg3 = 0 ;
  cyclone::Vector3 result;
  
  SWIG_check_num_args("cyclone::Random::randomVector",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Random::randomVector",1,"cyclone::Random *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::Random::randomVector",2,"cyclone::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("cyclone::Random::randomVector",3,"cyclone::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Random,0))){
    SWIG_fail_ptr("Random_randomVector",1,SWIGTYPE_p_cyclone__Random);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Random_randomVector",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Random_randomVector",3,SWIGTYPE_p_cyclone__Vector3);
  }
  
  result = (arg1)->randomVector((cyclone::Vector3 const &)*arg2,(cyclone::Vector3 const &)*arg3);
  {
    cyclone::Vector3 * resultptr = new cyclone::Vector3((const cyclone::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cyclone__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Random_randomVector(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__Random, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Random_randomVector__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__Random, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Random_randomVector__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__Random, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Random_randomVector__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Random_randomVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    cyclone::Random::randomVector(cyclone::real)\n"
    "    cyclone::Random::randomVector(cyclone::Vector3 const &)\n"
    "    cyclone::Random::randomVector(cyclone::Vector3 const &,cyclone::Vector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Random_randomXZVector(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Random *arg1 = (cyclone::Random *) 0 ;
  cyclone::real arg2 ;
  cyclone::Vector3 result;
  
  SWIG_check_num_args("cyclone::Random::randomXZVector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Random::randomXZVector",1,"cyclone::Random *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::Random::randomXZVector",2,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Random,0))){
    SWIG_fail_ptr("Random_randomXZVector",1,SWIGTYPE_p_cyclone__Random);
  }
  
  arg2 = (cyclone::real)lua_tonumber(L, 2);
  result = (arg1)->randomXZVector(arg2);
  {
    cyclone::Vector3 * resultptr = new cyclone::Vector3((const cyclone::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cyclone__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Random_randomQuaternion(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Random *arg1 = (cyclone::Random *) 0 ;
  cyclone::Quaternion result;
  
  SWIG_check_num_args("cyclone::Random::randomQuaternion",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Random::randomQuaternion",1,"cyclone::Random *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Random,0))){
    SWIG_fail_ptr("Random_randomQuaternion",1,SWIGTYPE_p_cyclone__Random);
  }
  
  result = (arg1)->randomQuaternion();
  {
    cyclone::Quaternion * resultptr = new cyclone::Quaternion((const cyclone::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cyclone__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Random(void *obj) {
cyclone::Random *arg1 = (cyclone::Random *) obj;
delete arg1;
}
static int _proxy__wrap_new_Random(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Random);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Random_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Random_methods[]= {
    { "rotl", _wrap_Random_rotl},
    { "rotr", _wrap_Random_rotr},
    { "seed", _wrap_Random_seed},
    { "randomBits", _wrap_Random_randomBits},
    { "randomReal", _wrap_Random_randomReal},
    { "randomInt", _wrap_Random_randomInt},
    { "randomBinomial", _wrap_Random_randomBinomial},
    { "randomVector", _wrap_Random_randomVector},
    { "randomXZVector", _wrap_Random_randomXZVector},
    { "randomQuaternion", _wrap_Random_randomQuaternion},
    {0,0}
};
static swig_lua_method swig_Random_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Random_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Random_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Random_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Random_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Random_Sf_SwigStatic = {
    "Random",
    swig_Random_Sf_SwigStatic_methods,
    swig_Random_Sf_SwigStatic_attributes,
    swig_Random_Sf_SwigStatic_constants,
    swig_Random_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Random_bases[] = {0};
static const char *swig_Random_base_names[] = {0};
static swig_lua_class _wrap_class_Random = { "Random", "Random", &SWIGTYPE_p_cyclone__Random,_proxy__wrap_new_Random, swig_delete_Random, swig_Random_methods, swig_Random_attributes, &swig_Random_Sf_SwigStatic, swig_Random_meta, swig_Random_bases, swig_Random_base_names };

static int _wrap_Particle_integrate(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Particle *arg1 = (cyclone::Particle *) 0 ;
  cyclone::real arg2 ;
  
  SWIG_check_num_args("cyclone::Particle::integrate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Particle::integrate",1,"cyclone::Particle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::Particle::integrate",2,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Particle,0))){
    SWIG_fail_ptr("Particle_integrate",1,SWIGTYPE_p_cyclone__Particle);
  }
  
  arg2 = (cyclone::real)lua_tonumber(L, 2);
  (arg1)->integrate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particle_setMass(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Particle *arg1 = (cyclone::Particle *) 0 ;
  cyclone::real arg2 ;
  
  SWIG_check_num_args("cyclone::Particle::setMass",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Particle::setMass",1,"cyclone::Particle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::Particle::setMass",2,"cyclone::real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Particle,0))){
    SWIG_fail_ptr("Particle_setMass",1,SWIGTYPE_p_cyclone__Particle);
  }
  
  arg2 = (cyclone::real const)lua_tonumber(L, 2);
  (arg1)->setMass(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particle_getMass(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Particle *arg1 = (cyclone::Particle *) 0 ;
  cyclone::real result;
  
  SWIG_check_num_args("cyclone::Particle::getMass",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Particle::getMass",1,"cyclone::Particle const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Particle,0))){
    SWIG_fail_ptr("Particle_getMass",1,SWIGTYPE_p_cyclone__Particle);
  }
  
  result = (cyclone::real)((cyclone::Particle const *)arg1)->getMass();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particle_setInverseMass(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Particle *arg1 = (cyclone::Particle *) 0 ;
  cyclone::real arg2 ;
  
  SWIG_check_num_args("cyclone::Particle::setInverseMass",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Particle::setInverseMass",1,"cyclone::Particle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::Particle::setInverseMass",2,"cyclone::real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Particle,0))){
    SWIG_fail_ptr("Particle_setInverseMass",1,SWIGTYPE_p_cyclone__Particle);
  }
  
  arg2 = (cyclone::real const)lua_tonumber(L, 2);
  (arg1)->setInverseMass(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particle_getInverseMass(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Particle *arg1 = (cyclone::Particle *) 0 ;
  cyclone::real result;
  
  SWIG_check_num_args("cyclone::Particle::getInverseMass",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Particle::getInverseMass",1,"cyclone::Particle const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Particle,0))){
    SWIG_fail_ptr("Particle_getInverseMass",1,SWIGTYPE_p_cyclone__Particle);
  }
  
  result = (cyclone::real)((cyclone::Particle const *)arg1)->getInverseMass();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particle_hasFiniteMass(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Particle *arg1 = (cyclone::Particle *) 0 ;
  bool result;
  
  SWIG_check_num_args("cyclone::Particle::hasFiniteMass",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Particle::hasFiniteMass",1,"cyclone::Particle const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Particle,0))){
    SWIG_fail_ptr("Particle_hasFiniteMass",1,SWIGTYPE_p_cyclone__Particle);
  }
  
  result = (bool)((cyclone::Particle const *)arg1)->hasFiniteMass();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particle_setDamping(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Particle *arg1 = (cyclone::Particle *) 0 ;
  cyclone::real arg2 ;
  
  SWIG_check_num_args("cyclone::Particle::setDamping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Particle::setDamping",1,"cyclone::Particle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::Particle::setDamping",2,"cyclone::real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Particle,0))){
    SWIG_fail_ptr("Particle_setDamping",1,SWIGTYPE_p_cyclone__Particle);
  }
  
  arg2 = (cyclone::real const)lua_tonumber(L, 2);
  (arg1)->setDamping(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particle_getDamping(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Particle *arg1 = (cyclone::Particle *) 0 ;
  cyclone::real result;
  
  SWIG_check_num_args("cyclone::Particle::getDamping",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Particle::getDamping",1,"cyclone::Particle const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Particle,0))){
    SWIG_fail_ptr("Particle_getDamping",1,SWIGTYPE_p_cyclone__Particle);
  }
  
  result = (cyclone::real)((cyclone::Particle const *)arg1)->getDamping();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particle_setPosition__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Particle *arg1 = (cyclone::Particle *) 0 ;
  cyclone::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("cyclone::Particle::setPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Particle::setPosition",1,"cyclone::Particle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::Particle::setPosition",2,"cyclone::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Particle,0))){
    SWIG_fail_ptr("Particle_setPosition",1,SWIGTYPE_p_cyclone__Particle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Particle_setPosition",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  (arg1)->setPosition((cyclone::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particle_setPosition__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Particle *arg1 = (cyclone::Particle *) 0 ;
  cyclone::real arg2 ;
  cyclone::real arg3 ;
  cyclone::real arg4 ;
  
  SWIG_check_num_args("cyclone::Particle::setPosition",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Particle::setPosition",1,"cyclone::Particle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::Particle::setPosition",2,"cyclone::real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::Particle::setPosition",3,"cyclone::real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cyclone::Particle::setPosition",4,"cyclone::real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Particle,0))){
    SWIG_fail_ptr("Particle_setPosition",1,SWIGTYPE_p_cyclone__Particle);
  }
  
  arg2 = (cyclone::real const)lua_tonumber(L, 2);
  arg3 = (cyclone::real const)lua_tonumber(L, 3);
  arg4 = (cyclone::real const)lua_tonumber(L, 4);
  (arg1)->setPosition(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particle_setPosition(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__Particle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Particle_setPosition__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__Particle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Particle_setPosition__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Particle_setPosition'\n"
    "  Possible C/C++ prototypes are:\n"
    "    cyclone::Particle::setPosition(cyclone::Vector3 const &)\n"
    "    cyclone::Particle::setPosition(cyclone::real const,cyclone::real const,cyclone::real const)\n");
  lua_error(L);return 0;
}


static int _wrap_Particle_getPosition__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Particle *arg1 = (cyclone::Particle *) 0 ;
  cyclone::Vector3 *arg2 = (cyclone::Vector3 *) 0 ;
  
  SWIG_check_num_args("cyclone::Particle::getPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Particle::getPosition",1,"cyclone::Particle const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::Particle::getPosition",2,"cyclone::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Particle,0))){
    SWIG_fail_ptr("Particle_getPosition",1,SWIGTYPE_p_cyclone__Particle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Particle_getPosition",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  ((cyclone::Particle const *)arg1)->getPosition(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particle_getPosition__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Particle *arg1 = (cyclone::Particle *) 0 ;
  cyclone::Vector3 result;
  
  SWIG_check_num_args("cyclone::Particle::getPosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Particle::getPosition",1,"cyclone::Particle const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Particle,0))){
    SWIG_fail_ptr("Particle_getPosition",1,SWIGTYPE_p_cyclone__Particle);
  }
  
  result = ((cyclone::Particle const *)arg1)->getPosition();
  {
    cyclone::Vector3 * resultptr = new cyclone::Vector3((const cyclone::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cyclone__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particle_getPosition(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__Particle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Particle_getPosition__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__Particle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_cyclone__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Particle_getPosition__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Particle_getPosition'\n"
    "  Possible C/C++ prototypes are:\n"
    "    cyclone::Particle::getPosition(cyclone::Vector3 *) const\n"
    "    cyclone::Particle::getPosition() const\n");
  lua_error(L);return 0;
}


static int _wrap_Particle_setVelocity__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Particle *arg1 = (cyclone::Particle *) 0 ;
  cyclone::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("cyclone::Particle::setVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Particle::setVelocity",1,"cyclone::Particle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::Particle::setVelocity",2,"cyclone::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Particle,0))){
    SWIG_fail_ptr("Particle_setVelocity",1,SWIGTYPE_p_cyclone__Particle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Particle_setVelocity",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  (arg1)->setVelocity((cyclone::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particle_setVelocity__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Particle *arg1 = (cyclone::Particle *) 0 ;
  cyclone::real arg2 ;
  cyclone::real arg3 ;
  cyclone::real arg4 ;
  
  SWIG_check_num_args("cyclone::Particle::setVelocity",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Particle::setVelocity",1,"cyclone::Particle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::Particle::setVelocity",2,"cyclone::real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::Particle::setVelocity",3,"cyclone::real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cyclone::Particle::setVelocity",4,"cyclone::real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Particle,0))){
    SWIG_fail_ptr("Particle_setVelocity",1,SWIGTYPE_p_cyclone__Particle);
  }
  
  arg2 = (cyclone::real const)lua_tonumber(L, 2);
  arg3 = (cyclone::real const)lua_tonumber(L, 3);
  arg4 = (cyclone::real const)lua_tonumber(L, 4);
  (arg1)->setVelocity(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particle_setVelocity(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__Particle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Particle_setVelocity__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__Particle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Particle_setVelocity__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Particle_setVelocity'\n"
    "  Possible C/C++ prototypes are:\n"
    "    cyclone::Particle::setVelocity(cyclone::Vector3 const &)\n"
    "    cyclone::Particle::setVelocity(cyclone::real const,cyclone::real const,cyclone::real const)\n");
  lua_error(L);return 0;
}


static int _wrap_Particle_getVelocity__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Particle *arg1 = (cyclone::Particle *) 0 ;
  cyclone::Vector3 *arg2 = (cyclone::Vector3 *) 0 ;
  
  SWIG_check_num_args("cyclone::Particle::getVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Particle::getVelocity",1,"cyclone::Particle const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::Particle::getVelocity",2,"cyclone::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Particle,0))){
    SWIG_fail_ptr("Particle_getVelocity",1,SWIGTYPE_p_cyclone__Particle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Particle_getVelocity",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  ((cyclone::Particle const *)arg1)->getVelocity(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particle_getVelocity__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Particle *arg1 = (cyclone::Particle *) 0 ;
  cyclone::Vector3 result;
  
  SWIG_check_num_args("cyclone::Particle::getVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Particle::getVelocity",1,"cyclone::Particle const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Particle,0))){
    SWIG_fail_ptr("Particle_getVelocity",1,SWIGTYPE_p_cyclone__Particle);
  }
  
  result = ((cyclone::Particle const *)arg1)->getVelocity();
  {
    cyclone::Vector3 * resultptr = new cyclone::Vector3((const cyclone::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cyclone__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particle_getVelocity(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__Particle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Particle_getVelocity__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__Particle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_cyclone__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Particle_getVelocity__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Particle_getVelocity'\n"
    "  Possible C/C++ prototypes are:\n"
    "    cyclone::Particle::getVelocity(cyclone::Vector3 *) const\n"
    "    cyclone::Particle::getVelocity() const\n");
  lua_error(L);return 0;
}


static int _wrap_Particle_setAcceleration__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Particle *arg1 = (cyclone::Particle *) 0 ;
  cyclone::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("cyclone::Particle::setAcceleration",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Particle::setAcceleration",1,"cyclone::Particle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::Particle::setAcceleration",2,"cyclone::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Particle,0))){
    SWIG_fail_ptr("Particle_setAcceleration",1,SWIGTYPE_p_cyclone__Particle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Particle_setAcceleration",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  (arg1)->setAcceleration((cyclone::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particle_setAcceleration__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Particle *arg1 = (cyclone::Particle *) 0 ;
  cyclone::real arg2 ;
  cyclone::real arg3 ;
  cyclone::real arg4 ;
  
  SWIG_check_num_args("cyclone::Particle::setAcceleration",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Particle::setAcceleration",1,"cyclone::Particle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::Particle::setAcceleration",2,"cyclone::real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::Particle::setAcceleration",3,"cyclone::real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cyclone::Particle::setAcceleration",4,"cyclone::real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Particle,0))){
    SWIG_fail_ptr("Particle_setAcceleration",1,SWIGTYPE_p_cyclone__Particle);
  }
  
  arg2 = (cyclone::real const)lua_tonumber(L, 2);
  arg3 = (cyclone::real const)lua_tonumber(L, 3);
  arg4 = (cyclone::real const)lua_tonumber(L, 4);
  (arg1)->setAcceleration(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particle_setAcceleration(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__Particle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Particle_setAcceleration__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__Particle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Particle_setAcceleration__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Particle_setAcceleration'\n"
    "  Possible C/C++ prototypes are:\n"
    "    cyclone::Particle::setAcceleration(cyclone::Vector3 const &)\n"
    "    cyclone::Particle::setAcceleration(cyclone::real const,cyclone::real const,cyclone::real const)\n");
  lua_error(L);return 0;
}


static int _wrap_Particle_getAcceleration__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Particle *arg1 = (cyclone::Particle *) 0 ;
  cyclone::Vector3 *arg2 = (cyclone::Vector3 *) 0 ;
  
  SWIG_check_num_args("cyclone::Particle::getAcceleration",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Particle::getAcceleration",1,"cyclone::Particle const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::Particle::getAcceleration",2,"cyclone::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Particle,0))){
    SWIG_fail_ptr("Particle_getAcceleration",1,SWIGTYPE_p_cyclone__Particle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Particle_getAcceleration",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  ((cyclone::Particle const *)arg1)->getAcceleration(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particle_getAcceleration__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Particle *arg1 = (cyclone::Particle *) 0 ;
  cyclone::Vector3 result;
  
  SWIG_check_num_args("cyclone::Particle::getAcceleration",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Particle::getAcceleration",1,"cyclone::Particle const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Particle,0))){
    SWIG_fail_ptr("Particle_getAcceleration",1,SWIGTYPE_p_cyclone__Particle);
  }
  
  result = ((cyclone::Particle const *)arg1)->getAcceleration();
  {
    cyclone::Vector3 * resultptr = new cyclone::Vector3((const cyclone::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cyclone__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particle_getAcceleration(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__Particle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Particle_getAcceleration__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__Particle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_cyclone__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Particle_getAcceleration__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Particle_getAcceleration'\n"
    "  Possible C/C++ prototypes are:\n"
    "    cyclone::Particle::getAcceleration(cyclone::Vector3 *) const\n"
    "    cyclone::Particle::getAcceleration() const\n");
  lua_error(L);return 0;
}


static int _wrap_Particle_clearAccumulator(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Particle *arg1 = (cyclone::Particle *) 0 ;
  
  SWIG_check_num_args("cyclone::Particle::clearAccumulator",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Particle::clearAccumulator",1,"cyclone::Particle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Particle,0))){
    SWIG_fail_ptr("Particle_clearAccumulator",1,SWIGTYPE_p_cyclone__Particle);
  }
  
  (arg1)->clearAccumulator();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particle_addForce(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Particle *arg1 = (cyclone::Particle *) 0 ;
  cyclone::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("cyclone::Particle::addForce",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Particle::addForce",1,"cyclone::Particle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::Particle::addForce",2,"cyclone::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Particle,0))){
    SWIG_fail_ptr("Particle_addForce",1,SWIGTYPE_p_cyclone__Particle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Particle_addForce",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  (arg1)->addForce((cyclone::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Particle(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Particle *result = 0 ;
  
  SWIG_check_num_args("cyclone::Particle::Particle",0,0)
  result = (cyclone::Particle *)new cyclone::Particle();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__Particle,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Particle(void *obj) {
cyclone::Particle *arg1 = (cyclone::Particle *) obj;
delete arg1;
}
static int _proxy__wrap_new_Particle(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Particle);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Particle_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Particle_methods[]= {
    { "integrate", _wrap_Particle_integrate},
    { "setMass", _wrap_Particle_setMass},
    { "getMass", _wrap_Particle_getMass},
    { "setInverseMass", _wrap_Particle_setInverseMass},
    { "getInverseMass", _wrap_Particle_getInverseMass},
    { "hasFiniteMass", _wrap_Particle_hasFiniteMass},
    { "setDamping", _wrap_Particle_setDamping},
    { "getDamping", _wrap_Particle_getDamping},
    { "setPosition", _wrap_Particle_setPosition},
    { "getPosition", _wrap_Particle_getPosition},
    { "setVelocity", _wrap_Particle_setVelocity},
    { "getVelocity", _wrap_Particle_getVelocity},
    { "setAcceleration", _wrap_Particle_setAcceleration},
    { "getAcceleration", _wrap_Particle_getAcceleration},
    { "clearAccumulator", _wrap_Particle_clearAccumulator},
    { "addForce", _wrap_Particle_addForce},
    {0,0}
};
static swig_lua_method swig_Particle_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Particle_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Particle_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Particle_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Particle_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Particle_Sf_SwigStatic = {
    "Particle",
    swig_Particle_Sf_SwigStatic_methods,
    swig_Particle_Sf_SwigStatic_attributes,
    swig_Particle_Sf_SwigStatic_constants,
    swig_Particle_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Particle_bases[] = {0};
static const char *swig_Particle_base_names[] = {0};
static swig_lua_class _wrap_class_Particle = { "Particle", "Particle", &SWIGTYPE_p_cyclone__Particle,_proxy__wrap_new_Particle, swig_delete_Particle, swig_Particle_methods, swig_Particle_attributes, &swig_Particle_Sf_SwigStatic, swig_Particle_meta, swig_Particle_bases, swig_Particle_base_names };

static int _wrap_RigidBody_calculateDerivedData(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  
  SWIG_check_num_args("cyclone::RigidBody::calculateDerivedData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::calculateDerivedData",1,"cyclone::RigidBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_calculateDerivedData",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  (arg1)->calculateDerivedData();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_integrate(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  cyclone::real arg2 ;
  
  SWIG_check_num_args("cyclone::RigidBody::integrate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::integrate",1,"cyclone::RigidBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::RigidBody::integrate",2,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_integrate",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  arg2 = (cyclone::real)lua_tonumber(L, 2);
  (arg1)->integrate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_setMass(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  cyclone::real arg2 ;
  
  SWIG_check_num_args("cyclone::RigidBody::setMass",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::setMass",1,"cyclone::RigidBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::RigidBody::setMass",2,"cyclone::real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_setMass",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  arg2 = (cyclone::real const)lua_tonumber(L, 2);
  (arg1)->setMass(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_getMass(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  cyclone::real result;
  
  SWIG_check_num_args("cyclone::RigidBody::getMass",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::getMass",1,"cyclone::RigidBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_getMass",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  result = (cyclone::real)((cyclone::RigidBody const *)arg1)->getMass();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_setInverseMass(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  cyclone::real arg2 ;
  
  SWIG_check_num_args("cyclone::RigidBody::setInverseMass",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::setInverseMass",1,"cyclone::RigidBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::RigidBody::setInverseMass",2,"cyclone::real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_setInverseMass",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  arg2 = (cyclone::real const)lua_tonumber(L, 2);
  (arg1)->setInverseMass(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_getInverseMass(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  cyclone::real result;
  
  SWIG_check_num_args("cyclone::RigidBody::getInverseMass",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::getInverseMass",1,"cyclone::RigidBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_getInverseMass",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  result = (cyclone::real)((cyclone::RigidBody const *)arg1)->getInverseMass();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_hasFiniteMass(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  bool result;
  
  SWIG_check_num_args("cyclone::RigidBody::hasFiniteMass",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::hasFiniteMass",1,"cyclone::RigidBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_hasFiniteMass",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  result = (bool)((cyclone::RigidBody const *)arg1)->hasFiniteMass();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_setInertiaTensor(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  cyclone::Matrix3 *arg2 = 0 ;
  
  SWIG_check_num_args("cyclone::RigidBody::setInertiaTensor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::setInertiaTensor",1,"cyclone::RigidBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::RigidBody::setInertiaTensor",2,"cyclone::Matrix3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_setInertiaTensor",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Matrix3,0))){
    SWIG_fail_ptr("RigidBody_setInertiaTensor",2,SWIGTYPE_p_cyclone__Matrix3);
  }
  
  (arg1)->setInertiaTensor((cyclone::Matrix3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_getInertiaTensor__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  cyclone::Matrix3 *arg2 = (cyclone::Matrix3 *) 0 ;
  
  SWIG_check_num_args("cyclone::RigidBody::getInertiaTensor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::getInertiaTensor",1,"cyclone::RigidBody const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::RigidBody::getInertiaTensor",2,"cyclone::Matrix3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_getInertiaTensor",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Matrix3,0))){
    SWIG_fail_ptr("RigidBody_getInertiaTensor",2,SWIGTYPE_p_cyclone__Matrix3);
  }
  
  ((cyclone::RigidBody const *)arg1)->getInertiaTensor(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_getInertiaTensor__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  cyclone::Matrix3 result;
  
  SWIG_check_num_args("cyclone::RigidBody::getInertiaTensor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::getInertiaTensor",1,"cyclone::RigidBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_getInertiaTensor",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  result = ((cyclone::RigidBody const *)arg1)->getInertiaTensor();
  {
    cyclone::Matrix3 * resultptr = new cyclone::Matrix3((const cyclone::Matrix3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cyclone__Matrix3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_getInertiaTensor(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__RigidBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_RigidBody_getInertiaTensor__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__RigidBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_cyclone__Matrix3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_RigidBody_getInertiaTensor__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RigidBody_getInertiaTensor'\n"
    "  Possible C/C++ prototypes are:\n"
    "    cyclone::RigidBody::getInertiaTensor(cyclone::Matrix3 *) const\n"
    "    cyclone::RigidBody::getInertiaTensor() const\n");
  lua_error(L);return 0;
}


static int _wrap_RigidBody_getInertiaTensorWorld__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  cyclone::Matrix3 *arg2 = (cyclone::Matrix3 *) 0 ;
  
  SWIG_check_num_args("cyclone::RigidBody::getInertiaTensorWorld",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::getInertiaTensorWorld",1,"cyclone::RigidBody const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::RigidBody::getInertiaTensorWorld",2,"cyclone::Matrix3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_getInertiaTensorWorld",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Matrix3,0))){
    SWIG_fail_ptr("RigidBody_getInertiaTensorWorld",2,SWIGTYPE_p_cyclone__Matrix3);
  }
  
  ((cyclone::RigidBody const *)arg1)->getInertiaTensorWorld(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_getInertiaTensorWorld__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  cyclone::Matrix3 result;
  
  SWIG_check_num_args("cyclone::RigidBody::getInertiaTensorWorld",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::getInertiaTensorWorld",1,"cyclone::RigidBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_getInertiaTensorWorld",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  result = ((cyclone::RigidBody const *)arg1)->getInertiaTensorWorld();
  {
    cyclone::Matrix3 * resultptr = new cyclone::Matrix3((const cyclone::Matrix3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cyclone__Matrix3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_getInertiaTensorWorld(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__RigidBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_RigidBody_getInertiaTensorWorld__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__RigidBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_cyclone__Matrix3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_RigidBody_getInertiaTensorWorld__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RigidBody_getInertiaTensorWorld'\n"
    "  Possible C/C++ prototypes are:\n"
    "    cyclone::RigidBody::getInertiaTensorWorld(cyclone::Matrix3 *) const\n"
    "    cyclone::RigidBody::getInertiaTensorWorld() const\n");
  lua_error(L);return 0;
}


static int _wrap_RigidBody_setInverseInertiaTensor(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  cyclone::Matrix3 *arg2 = 0 ;
  
  SWIG_check_num_args("cyclone::RigidBody::setInverseInertiaTensor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::setInverseInertiaTensor",1,"cyclone::RigidBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::RigidBody::setInverseInertiaTensor",2,"cyclone::Matrix3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_setInverseInertiaTensor",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Matrix3,0))){
    SWIG_fail_ptr("RigidBody_setInverseInertiaTensor",2,SWIGTYPE_p_cyclone__Matrix3);
  }
  
  (arg1)->setInverseInertiaTensor((cyclone::Matrix3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_getInverseInertiaTensor__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  cyclone::Matrix3 *arg2 = (cyclone::Matrix3 *) 0 ;
  
  SWIG_check_num_args("cyclone::RigidBody::getInverseInertiaTensor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::getInverseInertiaTensor",1,"cyclone::RigidBody const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::RigidBody::getInverseInertiaTensor",2,"cyclone::Matrix3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_getInverseInertiaTensor",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Matrix3,0))){
    SWIG_fail_ptr("RigidBody_getInverseInertiaTensor",2,SWIGTYPE_p_cyclone__Matrix3);
  }
  
  ((cyclone::RigidBody const *)arg1)->getInverseInertiaTensor(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_getInverseInertiaTensor__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  cyclone::Matrix3 result;
  
  SWIG_check_num_args("cyclone::RigidBody::getInverseInertiaTensor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::getInverseInertiaTensor",1,"cyclone::RigidBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_getInverseInertiaTensor",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  result = ((cyclone::RigidBody const *)arg1)->getInverseInertiaTensor();
  {
    cyclone::Matrix3 * resultptr = new cyclone::Matrix3((const cyclone::Matrix3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cyclone__Matrix3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_getInverseInertiaTensor(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__RigidBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_RigidBody_getInverseInertiaTensor__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__RigidBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_cyclone__Matrix3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_RigidBody_getInverseInertiaTensor__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RigidBody_getInverseInertiaTensor'\n"
    "  Possible C/C++ prototypes are:\n"
    "    cyclone::RigidBody::getInverseInertiaTensor(cyclone::Matrix3 *) const\n"
    "    cyclone::RigidBody::getInverseInertiaTensor() const\n");
  lua_error(L);return 0;
}


static int _wrap_RigidBody_getInverseInertiaTensorWorld__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  cyclone::Matrix3 *arg2 = (cyclone::Matrix3 *) 0 ;
  
  SWIG_check_num_args("cyclone::RigidBody::getInverseInertiaTensorWorld",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::getInverseInertiaTensorWorld",1,"cyclone::RigidBody const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::RigidBody::getInverseInertiaTensorWorld",2,"cyclone::Matrix3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_getInverseInertiaTensorWorld",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Matrix3,0))){
    SWIG_fail_ptr("RigidBody_getInverseInertiaTensorWorld",2,SWIGTYPE_p_cyclone__Matrix3);
  }
  
  ((cyclone::RigidBody const *)arg1)->getInverseInertiaTensorWorld(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_getInverseInertiaTensorWorld__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  cyclone::Matrix3 result;
  
  SWIG_check_num_args("cyclone::RigidBody::getInverseInertiaTensorWorld",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::getInverseInertiaTensorWorld",1,"cyclone::RigidBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_getInverseInertiaTensorWorld",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  result = ((cyclone::RigidBody const *)arg1)->getInverseInertiaTensorWorld();
  {
    cyclone::Matrix3 * resultptr = new cyclone::Matrix3((const cyclone::Matrix3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cyclone__Matrix3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_getInverseInertiaTensorWorld(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__RigidBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_RigidBody_getInverseInertiaTensorWorld__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__RigidBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_cyclone__Matrix3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_RigidBody_getInverseInertiaTensorWorld__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RigidBody_getInverseInertiaTensorWorld'\n"
    "  Possible C/C++ prototypes are:\n"
    "    cyclone::RigidBody::getInverseInertiaTensorWorld(cyclone::Matrix3 *) const\n"
    "    cyclone::RigidBody::getInverseInertiaTensorWorld() const\n");
  lua_error(L);return 0;
}


static int _wrap_RigidBody_setDamping(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  cyclone::real arg2 ;
  cyclone::real arg3 ;
  
  SWIG_check_num_args("cyclone::RigidBody::setDamping",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::setDamping",1,"cyclone::RigidBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::RigidBody::setDamping",2,"cyclone::real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::RigidBody::setDamping",3,"cyclone::real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_setDamping",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  arg2 = (cyclone::real const)lua_tonumber(L, 2);
  arg3 = (cyclone::real const)lua_tonumber(L, 3);
  (arg1)->setDamping(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_setLinearDamping(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  cyclone::real arg2 ;
  
  SWIG_check_num_args("cyclone::RigidBody::setLinearDamping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::setLinearDamping",1,"cyclone::RigidBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::RigidBody::setLinearDamping",2,"cyclone::real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_setLinearDamping",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  arg2 = (cyclone::real const)lua_tonumber(L, 2);
  (arg1)->setLinearDamping(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_getLinearDamping(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  cyclone::real result;
  
  SWIG_check_num_args("cyclone::RigidBody::getLinearDamping",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::getLinearDamping",1,"cyclone::RigidBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_getLinearDamping",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  result = (cyclone::real)((cyclone::RigidBody const *)arg1)->getLinearDamping();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_setAngularDamping(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  cyclone::real arg2 ;
  
  SWIG_check_num_args("cyclone::RigidBody::setAngularDamping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::setAngularDamping",1,"cyclone::RigidBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::RigidBody::setAngularDamping",2,"cyclone::real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_setAngularDamping",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  arg2 = (cyclone::real const)lua_tonumber(L, 2);
  (arg1)->setAngularDamping(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_getAngularDamping(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  cyclone::real result;
  
  SWIG_check_num_args("cyclone::RigidBody::getAngularDamping",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::getAngularDamping",1,"cyclone::RigidBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_getAngularDamping",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  result = (cyclone::real)((cyclone::RigidBody const *)arg1)->getAngularDamping();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_setPosition__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  cyclone::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("cyclone::RigidBody::setPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::setPosition",1,"cyclone::RigidBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::RigidBody::setPosition",2,"cyclone::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_setPosition",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("RigidBody_setPosition",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  (arg1)->setPosition((cyclone::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_setPosition__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  cyclone::real arg2 ;
  cyclone::real arg3 ;
  cyclone::real arg4 ;
  
  SWIG_check_num_args("cyclone::RigidBody::setPosition",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::setPosition",1,"cyclone::RigidBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::RigidBody::setPosition",2,"cyclone::real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::RigidBody::setPosition",3,"cyclone::real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cyclone::RigidBody::setPosition",4,"cyclone::real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_setPosition",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  arg2 = (cyclone::real const)lua_tonumber(L, 2);
  arg3 = (cyclone::real const)lua_tonumber(L, 3);
  arg4 = (cyclone::real const)lua_tonumber(L, 4);
  (arg1)->setPosition(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_setPosition(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__RigidBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_RigidBody_setPosition__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__RigidBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_RigidBody_setPosition__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RigidBody_setPosition'\n"
    "  Possible C/C++ prototypes are:\n"
    "    cyclone::RigidBody::setPosition(cyclone::Vector3 const &)\n"
    "    cyclone::RigidBody::setPosition(cyclone::real const,cyclone::real const,cyclone::real const)\n");
  lua_error(L);return 0;
}


static int _wrap_RigidBody_getPosition__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  cyclone::Vector3 *arg2 = (cyclone::Vector3 *) 0 ;
  
  SWIG_check_num_args("cyclone::RigidBody::getPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::getPosition",1,"cyclone::RigidBody const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::RigidBody::getPosition",2,"cyclone::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_getPosition",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("RigidBody_getPosition",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  ((cyclone::RigidBody const *)arg1)->getPosition(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_getPosition__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  cyclone::Vector3 result;
  
  SWIG_check_num_args("cyclone::RigidBody::getPosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::getPosition",1,"cyclone::RigidBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_getPosition",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  result = ((cyclone::RigidBody const *)arg1)->getPosition();
  {
    cyclone::Vector3 * resultptr = new cyclone::Vector3((const cyclone::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cyclone__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_getPosition(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__RigidBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_RigidBody_getPosition__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__RigidBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_cyclone__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_RigidBody_getPosition__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RigidBody_getPosition'\n"
    "  Possible C/C++ prototypes are:\n"
    "    cyclone::RigidBody::getPosition(cyclone::Vector3 *) const\n"
    "    cyclone::RigidBody::getPosition() const\n");
  lua_error(L);return 0;
}


static int _wrap_RigidBody_setOrientation__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  cyclone::Quaternion *arg2 = 0 ;
  
  SWIG_check_num_args("cyclone::RigidBody::setOrientation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::setOrientation",1,"cyclone::RigidBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::RigidBody::setOrientation",2,"cyclone::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_setOrientation",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Quaternion,0))){
    SWIG_fail_ptr("RigidBody_setOrientation",2,SWIGTYPE_p_cyclone__Quaternion);
  }
  
  (arg1)->setOrientation((cyclone::Quaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_setOrientation__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  cyclone::real arg2 ;
  cyclone::real arg3 ;
  cyclone::real arg4 ;
  cyclone::real arg5 ;
  
  SWIG_check_num_args("cyclone::RigidBody::setOrientation",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::setOrientation",1,"cyclone::RigidBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::RigidBody::setOrientation",2,"cyclone::real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::RigidBody::setOrientation",3,"cyclone::real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cyclone::RigidBody::setOrientation",4,"cyclone::real const");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cyclone::RigidBody::setOrientation",5,"cyclone::real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_setOrientation",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  arg2 = (cyclone::real const)lua_tonumber(L, 2);
  arg3 = (cyclone::real const)lua_tonumber(L, 3);
  arg4 = (cyclone::real const)lua_tonumber(L, 4);
  arg5 = (cyclone::real const)lua_tonumber(L, 5);
  (arg1)->setOrientation(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_setOrientation(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__RigidBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_cyclone__Quaternion, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_RigidBody_setOrientation__SWIG_0(L);
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__RigidBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_RigidBody_setOrientation__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RigidBody_setOrientation'\n"
    "  Possible C/C++ prototypes are:\n"
    "    cyclone::RigidBody::setOrientation(cyclone::Quaternion const &)\n"
    "    cyclone::RigidBody::setOrientation(cyclone::real const,cyclone::real const,cyclone::real const,cyclone::real const)\n");
  lua_error(L);return 0;
}


static int _wrap_RigidBody_getOrientation__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  cyclone::Quaternion *arg2 = (cyclone::Quaternion *) 0 ;
  
  SWIG_check_num_args("cyclone::RigidBody::getOrientation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::getOrientation",1,"cyclone::RigidBody const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::RigidBody::getOrientation",2,"cyclone::Quaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_getOrientation",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Quaternion,0))){
    SWIG_fail_ptr("RigidBody_getOrientation",2,SWIGTYPE_p_cyclone__Quaternion);
  }
  
  ((cyclone::RigidBody const *)arg1)->getOrientation(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_getOrientation__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  cyclone::Quaternion result;
  
  SWIG_check_num_args("cyclone::RigidBody::getOrientation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::getOrientation",1,"cyclone::RigidBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_getOrientation",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  result = ((cyclone::RigidBody const *)arg1)->getOrientation();
  {
    cyclone::Quaternion * resultptr = new cyclone::Quaternion((const cyclone::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cyclone__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_getOrientation__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  cyclone::Matrix3 *arg2 = (cyclone::Matrix3 *) 0 ;
  
  SWIG_check_num_args("cyclone::RigidBody::getOrientation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::getOrientation",1,"cyclone::RigidBody const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::RigidBody::getOrientation",2,"cyclone::Matrix3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_getOrientation",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Matrix3,0))){
    SWIG_fail_ptr("RigidBody_getOrientation",2,SWIGTYPE_p_cyclone__Matrix3);
  }
  
  ((cyclone::RigidBody const *)arg1)->getOrientation(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_getOrientation__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  cyclone::real *arg2 ;
  
  SWIG_check_num_args("cyclone::RigidBody::getOrientation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::getOrientation",1,"cyclone::RigidBody const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::RigidBody::getOrientation",2,"cyclone::real [9]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_getOrientation",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("RigidBody_getOrientation",2,SWIGTYPE_p_double);
  }
  
  ((cyclone::RigidBody const *)arg1)->getOrientation(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_getOrientation(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__RigidBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_RigidBody_getOrientation__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__RigidBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_cyclone__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_RigidBody_getOrientation__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__RigidBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_cyclone__Matrix3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_RigidBody_getOrientation__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__RigidBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_RigidBody_getOrientation__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RigidBody_getOrientation'\n"
    "  Possible C/C++ prototypes are:\n"
    "    cyclone::RigidBody::getOrientation(cyclone::Quaternion *) const\n"
    "    cyclone::RigidBody::getOrientation() const\n"
    "    cyclone::RigidBody::getOrientation(cyclone::Matrix3 *) const\n"
    "    cyclone::RigidBody::getOrientation(cyclone::real [9]) const\n");
  lua_error(L);return 0;
}


static int _wrap_RigidBody_getTransform__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  cyclone::Matrix4 *arg2 = (cyclone::Matrix4 *) 0 ;
  
  SWIG_check_num_args("cyclone::RigidBody::getTransform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::getTransform",1,"cyclone::RigidBody const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::RigidBody::getTransform",2,"cyclone::Matrix4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_getTransform",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Matrix4,0))){
    SWIG_fail_ptr("RigidBody_getTransform",2,SWIGTYPE_p_cyclone__Matrix4);
  }
  
  ((cyclone::RigidBody const *)arg1)->getTransform(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_getTransform__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  cyclone::real *arg2 ;
  
  SWIG_check_num_args("cyclone::RigidBody::getTransform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::getTransform",1,"cyclone::RigidBody const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::RigidBody::getTransform",2,"cyclone::real [16]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_getTransform",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("RigidBody_getTransform",2,SWIGTYPE_p_double);
  }
  
  ((cyclone::RigidBody const *)arg1)->getTransform(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_getGLTransform(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  float *arg2 ;
  
  SWIG_check_num_args("cyclone::RigidBody::getGLTransform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::getGLTransform",1,"cyclone::RigidBody const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::RigidBody::getGLTransform",2,"float [16]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_getGLTransform",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RigidBody_getGLTransform",2,SWIGTYPE_p_float);
  }
  
  ((cyclone::RigidBody const *)arg1)->getGLTransform(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_getTransform__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  cyclone::Matrix4 result;
  
  SWIG_check_num_args("cyclone::RigidBody::getTransform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::getTransform",1,"cyclone::RigidBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_getTransform",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  result = ((cyclone::RigidBody const *)arg1)->getTransform();
  {
    cyclone::Matrix4 * resultptr = new cyclone::Matrix4((const cyclone::Matrix4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cyclone__Matrix4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_getTransform(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__RigidBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_RigidBody_getTransform__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__RigidBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_RigidBody_getTransform__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__RigidBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_cyclone__Matrix4, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_RigidBody_getTransform__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RigidBody_getTransform'\n"
    "  Possible C/C++ prototypes are:\n"
    "    cyclone::RigidBody::getTransform(cyclone::Matrix4 *) const\n"
    "    cyclone::RigidBody::getTransform(cyclone::real [16]) const\n"
    "    cyclone::RigidBody::getTransform() const\n");
  lua_error(L);return 0;
}


static int _wrap_RigidBody_getPointInLocalSpace(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  cyclone::Vector3 *arg2 = 0 ;
  cyclone::Vector3 result;
  
  SWIG_check_num_args("cyclone::RigidBody::getPointInLocalSpace",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::getPointInLocalSpace",1,"cyclone::RigidBody const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::RigidBody::getPointInLocalSpace",2,"cyclone::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_getPointInLocalSpace",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("RigidBody_getPointInLocalSpace",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  result = ((cyclone::RigidBody const *)arg1)->getPointInLocalSpace((cyclone::Vector3 const &)*arg2);
  {
    cyclone::Vector3 * resultptr = new cyclone::Vector3((const cyclone::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cyclone__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_getPointInWorldSpace(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  cyclone::Vector3 *arg2 = 0 ;
  cyclone::Vector3 result;
  
  SWIG_check_num_args("cyclone::RigidBody::getPointInWorldSpace",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::getPointInWorldSpace",1,"cyclone::RigidBody const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::RigidBody::getPointInWorldSpace",2,"cyclone::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_getPointInWorldSpace",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("RigidBody_getPointInWorldSpace",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  result = ((cyclone::RigidBody const *)arg1)->getPointInWorldSpace((cyclone::Vector3 const &)*arg2);
  {
    cyclone::Vector3 * resultptr = new cyclone::Vector3((const cyclone::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cyclone__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_getDirectionInLocalSpace(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  cyclone::Vector3 *arg2 = 0 ;
  cyclone::Vector3 result;
  
  SWIG_check_num_args("cyclone::RigidBody::getDirectionInLocalSpace",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::getDirectionInLocalSpace",1,"cyclone::RigidBody const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::RigidBody::getDirectionInLocalSpace",2,"cyclone::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_getDirectionInLocalSpace",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("RigidBody_getDirectionInLocalSpace",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  result = ((cyclone::RigidBody const *)arg1)->getDirectionInLocalSpace((cyclone::Vector3 const &)*arg2);
  {
    cyclone::Vector3 * resultptr = new cyclone::Vector3((const cyclone::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cyclone__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_getDirectionInWorldSpace(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  cyclone::Vector3 *arg2 = 0 ;
  cyclone::Vector3 result;
  
  SWIG_check_num_args("cyclone::RigidBody::getDirectionInWorldSpace",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::getDirectionInWorldSpace",1,"cyclone::RigidBody const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::RigidBody::getDirectionInWorldSpace",2,"cyclone::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_getDirectionInWorldSpace",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("RigidBody_getDirectionInWorldSpace",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  result = ((cyclone::RigidBody const *)arg1)->getDirectionInWorldSpace((cyclone::Vector3 const &)*arg2);
  {
    cyclone::Vector3 * resultptr = new cyclone::Vector3((const cyclone::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cyclone__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_setVelocity__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  cyclone::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("cyclone::RigidBody::setVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::setVelocity",1,"cyclone::RigidBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::RigidBody::setVelocity",2,"cyclone::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_setVelocity",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("RigidBody_setVelocity",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  (arg1)->setVelocity((cyclone::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_setVelocity__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  cyclone::real arg2 ;
  cyclone::real arg3 ;
  cyclone::real arg4 ;
  
  SWIG_check_num_args("cyclone::RigidBody::setVelocity",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::setVelocity",1,"cyclone::RigidBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::RigidBody::setVelocity",2,"cyclone::real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::RigidBody::setVelocity",3,"cyclone::real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cyclone::RigidBody::setVelocity",4,"cyclone::real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_setVelocity",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  arg2 = (cyclone::real const)lua_tonumber(L, 2);
  arg3 = (cyclone::real const)lua_tonumber(L, 3);
  arg4 = (cyclone::real const)lua_tonumber(L, 4);
  (arg1)->setVelocity(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_setVelocity(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__RigidBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_RigidBody_setVelocity__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__RigidBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_RigidBody_setVelocity__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RigidBody_setVelocity'\n"
    "  Possible C/C++ prototypes are:\n"
    "    cyclone::RigidBody::setVelocity(cyclone::Vector3 const &)\n"
    "    cyclone::RigidBody::setVelocity(cyclone::real const,cyclone::real const,cyclone::real const)\n");
  lua_error(L);return 0;
}


static int _wrap_RigidBody_getVelocity__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  cyclone::Vector3 *arg2 = (cyclone::Vector3 *) 0 ;
  
  SWIG_check_num_args("cyclone::RigidBody::getVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::getVelocity",1,"cyclone::RigidBody const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::RigidBody::getVelocity",2,"cyclone::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_getVelocity",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("RigidBody_getVelocity",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  ((cyclone::RigidBody const *)arg1)->getVelocity(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_getVelocity__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  cyclone::Vector3 result;
  
  SWIG_check_num_args("cyclone::RigidBody::getVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::getVelocity",1,"cyclone::RigidBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_getVelocity",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  result = ((cyclone::RigidBody const *)arg1)->getVelocity();
  {
    cyclone::Vector3 * resultptr = new cyclone::Vector3((const cyclone::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cyclone__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_getVelocity(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__RigidBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_RigidBody_getVelocity__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__RigidBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_cyclone__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_RigidBody_getVelocity__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RigidBody_getVelocity'\n"
    "  Possible C/C++ prototypes are:\n"
    "    cyclone::RigidBody::getVelocity(cyclone::Vector3 *) const\n"
    "    cyclone::RigidBody::getVelocity() const\n");
  lua_error(L);return 0;
}


static int _wrap_RigidBody_addVelocity(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  cyclone::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("cyclone::RigidBody::addVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::addVelocity",1,"cyclone::RigidBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::RigidBody::addVelocity",2,"cyclone::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_addVelocity",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("RigidBody_addVelocity",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  (arg1)->addVelocity((cyclone::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_setRotation__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  cyclone::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("cyclone::RigidBody::setRotation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::setRotation",1,"cyclone::RigidBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::RigidBody::setRotation",2,"cyclone::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_setRotation",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("RigidBody_setRotation",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  (arg1)->setRotation((cyclone::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_setRotation__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  cyclone::real arg2 ;
  cyclone::real arg3 ;
  cyclone::real arg4 ;
  
  SWIG_check_num_args("cyclone::RigidBody::setRotation",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::setRotation",1,"cyclone::RigidBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::RigidBody::setRotation",2,"cyclone::real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::RigidBody::setRotation",3,"cyclone::real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cyclone::RigidBody::setRotation",4,"cyclone::real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_setRotation",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  arg2 = (cyclone::real const)lua_tonumber(L, 2);
  arg3 = (cyclone::real const)lua_tonumber(L, 3);
  arg4 = (cyclone::real const)lua_tonumber(L, 4);
  (arg1)->setRotation(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_setRotation(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__RigidBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_RigidBody_setRotation__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__RigidBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_RigidBody_setRotation__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RigidBody_setRotation'\n"
    "  Possible C/C++ prototypes are:\n"
    "    cyclone::RigidBody::setRotation(cyclone::Vector3 const &)\n"
    "    cyclone::RigidBody::setRotation(cyclone::real const,cyclone::real const,cyclone::real const)\n");
  lua_error(L);return 0;
}


static int _wrap_RigidBody_getRotation__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  cyclone::Vector3 *arg2 = (cyclone::Vector3 *) 0 ;
  
  SWIG_check_num_args("cyclone::RigidBody::getRotation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::getRotation",1,"cyclone::RigidBody const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::RigidBody::getRotation",2,"cyclone::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_getRotation",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("RigidBody_getRotation",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  ((cyclone::RigidBody const *)arg1)->getRotation(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_getRotation__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  cyclone::Vector3 result;
  
  SWIG_check_num_args("cyclone::RigidBody::getRotation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::getRotation",1,"cyclone::RigidBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_getRotation",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  result = ((cyclone::RigidBody const *)arg1)->getRotation();
  {
    cyclone::Vector3 * resultptr = new cyclone::Vector3((const cyclone::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cyclone__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_getRotation(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__RigidBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_RigidBody_getRotation__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__RigidBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_cyclone__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_RigidBody_getRotation__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RigidBody_getRotation'\n"
    "  Possible C/C++ prototypes are:\n"
    "    cyclone::RigidBody::getRotation(cyclone::Vector3 *) const\n"
    "    cyclone::RigidBody::getRotation() const\n");
  lua_error(L);return 0;
}


static int _wrap_RigidBody_addRotation(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  cyclone::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("cyclone::RigidBody::addRotation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::addRotation",1,"cyclone::RigidBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::RigidBody::addRotation",2,"cyclone::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_addRotation",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("RigidBody_addRotation",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  (arg1)->addRotation((cyclone::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_getAwake(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  bool result;
  
  SWIG_check_num_args("cyclone::RigidBody::getAwake",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::getAwake",1,"cyclone::RigidBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_getAwake",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  result = (bool)((cyclone::RigidBody const *)arg1)->getAwake();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_setAwake__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("cyclone::RigidBody::setAwake",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::setAwake",1,"cyclone::RigidBody *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("cyclone::RigidBody::setAwake",2,"bool const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_setAwake",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setAwake(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_setAwake__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  
  SWIG_check_num_args("cyclone::RigidBody::setAwake",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::setAwake",1,"cyclone::RigidBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_setAwake",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  (arg1)->setAwake();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_setAwake(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__RigidBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_RigidBody_setAwake__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__RigidBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_RigidBody_setAwake__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RigidBody_setAwake'\n"
    "  Possible C/C++ prototypes are:\n"
    "    cyclone::RigidBody::setAwake(bool const)\n"
    "    cyclone::RigidBody::setAwake()\n");
  lua_error(L);return 0;
}


static int _wrap_RigidBody_getCanSleep(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  bool result;
  
  SWIG_check_num_args("cyclone::RigidBody::getCanSleep",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::getCanSleep",1,"cyclone::RigidBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_getCanSleep",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  result = (bool)((cyclone::RigidBody const *)arg1)->getCanSleep();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_setCanSleep__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("cyclone::RigidBody::setCanSleep",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::setCanSleep",1,"cyclone::RigidBody *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("cyclone::RigidBody::setCanSleep",2,"bool const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_setCanSleep",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setCanSleep(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_setCanSleep__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  
  SWIG_check_num_args("cyclone::RigidBody::setCanSleep",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::setCanSleep",1,"cyclone::RigidBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_setCanSleep",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  (arg1)->setCanSleep();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_setCanSleep(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__RigidBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_RigidBody_setCanSleep__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__RigidBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_RigidBody_setCanSleep__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RigidBody_setCanSleep'\n"
    "  Possible C/C++ prototypes are:\n"
    "    cyclone::RigidBody::setCanSleep(bool const)\n"
    "    cyclone::RigidBody::setCanSleep()\n");
  lua_error(L);return 0;
}


static int _wrap_RigidBody_getLastFrameAcceleration__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  cyclone::Vector3 *arg2 = (cyclone::Vector3 *) 0 ;
  
  SWIG_check_num_args("cyclone::RigidBody::getLastFrameAcceleration",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::getLastFrameAcceleration",1,"cyclone::RigidBody const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::RigidBody::getLastFrameAcceleration",2,"cyclone::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_getLastFrameAcceleration",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("RigidBody_getLastFrameAcceleration",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  ((cyclone::RigidBody const *)arg1)->getLastFrameAcceleration(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_getLastFrameAcceleration__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  cyclone::Vector3 result;
  
  SWIG_check_num_args("cyclone::RigidBody::getLastFrameAcceleration",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::getLastFrameAcceleration",1,"cyclone::RigidBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_getLastFrameAcceleration",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  result = ((cyclone::RigidBody const *)arg1)->getLastFrameAcceleration();
  {
    cyclone::Vector3 * resultptr = new cyclone::Vector3((const cyclone::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cyclone__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_getLastFrameAcceleration(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__RigidBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_RigidBody_getLastFrameAcceleration__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__RigidBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_cyclone__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_RigidBody_getLastFrameAcceleration__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RigidBody_getLastFrameAcceleration'\n"
    "  Possible C/C++ prototypes are:\n"
    "    cyclone::RigidBody::getLastFrameAcceleration(cyclone::Vector3 *) const\n"
    "    cyclone::RigidBody::getLastFrameAcceleration() const\n");
  lua_error(L);return 0;
}


static int _wrap_RigidBody_clearAccumulators(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  
  SWIG_check_num_args("cyclone::RigidBody::clearAccumulators",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::clearAccumulators",1,"cyclone::RigidBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_clearAccumulators",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  (arg1)->clearAccumulators();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_addForce(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  cyclone::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("cyclone::RigidBody::addForce",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::addForce",1,"cyclone::RigidBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::RigidBody::addForce",2,"cyclone::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_addForce",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("RigidBody_addForce",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  (arg1)->addForce((cyclone::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_addForceAtPoint(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  cyclone::Vector3 *arg2 = 0 ;
  cyclone::Vector3 *arg3 = 0 ;
  
  SWIG_check_num_args("cyclone::RigidBody::addForceAtPoint",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::addForceAtPoint",1,"cyclone::RigidBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::RigidBody::addForceAtPoint",2,"cyclone::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("cyclone::RigidBody::addForceAtPoint",3,"cyclone::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_addForceAtPoint",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("RigidBody_addForceAtPoint",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("RigidBody_addForceAtPoint",3,SWIGTYPE_p_cyclone__Vector3);
  }
  
  (arg1)->addForceAtPoint((cyclone::Vector3 const &)*arg2,(cyclone::Vector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_addForceAtBodyPoint(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  cyclone::Vector3 *arg2 = 0 ;
  cyclone::Vector3 *arg3 = 0 ;
  
  SWIG_check_num_args("cyclone::RigidBody::addForceAtBodyPoint",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::addForceAtBodyPoint",1,"cyclone::RigidBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::RigidBody::addForceAtBodyPoint",2,"cyclone::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("cyclone::RigidBody::addForceAtBodyPoint",3,"cyclone::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_addForceAtBodyPoint",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("RigidBody_addForceAtBodyPoint",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("RigidBody_addForceAtBodyPoint",3,SWIGTYPE_p_cyclone__Vector3);
  }
  
  (arg1)->addForceAtBodyPoint((cyclone::Vector3 const &)*arg2,(cyclone::Vector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_addTorque(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  cyclone::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("cyclone::RigidBody::addTorque",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::addTorque",1,"cyclone::RigidBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::RigidBody::addTorque",2,"cyclone::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_addTorque",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("RigidBody_addTorque",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  (arg1)->addTorque((cyclone::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_setAcceleration__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  cyclone::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("cyclone::RigidBody::setAcceleration",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::setAcceleration",1,"cyclone::RigidBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::RigidBody::setAcceleration",2,"cyclone::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_setAcceleration",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("RigidBody_setAcceleration",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  (arg1)->setAcceleration((cyclone::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_setAcceleration__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  cyclone::real arg2 ;
  cyclone::real arg3 ;
  cyclone::real arg4 ;
  
  SWIG_check_num_args("cyclone::RigidBody::setAcceleration",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::setAcceleration",1,"cyclone::RigidBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::RigidBody::setAcceleration",2,"cyclone::real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::RigidBody::setAcceleration",3,"cyclone::real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cyclone::RigidBody::setAcceleration",4,"cyclone::real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_setAcceleration",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  arg2 = (cyclone::real const)lua_tonumber(L, 2);
  arg3 = (cyclone::real const)lua_tonumber(L, 3);
  arg4 = (cyclone::real const)lua_tonumber(L, 4);
  (arg1)->setAcceleration(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_setAcceleration(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__RigidBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_RigidBody_setAcceleration__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__RigidBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_RigidBody_setAcceleration__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RigidBody_setAcceleration'\n"
    "  Possible C/C++ prototypes are:\n"
    "    cyclone::RigidBody::setAcceleration(cyclone::Vector3 const &)\n"
    "    cyclone::RigidBody::setAcceleration(cyclone::real const,cyclone::real const,cyclone::real const)\n");
  lua_error(L);return 0;
}


static int _wrap_RigidBody_getAcceleration__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  cyclone::Vector3 *arg2 = (cyclone::Vector3 *) 0 ;
  
  SWIG_check_num_args("cyclone::RigidBody::getAcceleration",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::getAcceleration",1,"cyclone::RigidBody const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::RigidBody::getAcceleration",2,"cyclone::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_getAcceleration",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("RigidBody_getAcceleration",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  ((cyclone::RigidBody const *)arg1)->getAcceleration(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_getAcceleration__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0 ;
  cyclone::Vector3 result;
  
  SWIG_check_num_args("cyclone::RigidBody::getAcceleration",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::RigidBody::getAcceleration",1,"cyclone::RigidBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("RigidBody_getAcceleration",1,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  result = ((cyclone::RigidBody const *)arg1)->getAcceleration();
  {
    cyclone::Vector3 * resultptr = new cyclone::Vector3((const cyclone::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cyclone__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidBody_getAcceleration(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__RigidBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_RigidBody_getAcceleration__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__RigidBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_cyclone__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_RigidBody_getAcceleration__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RigidBody_getAcceleration'\n"
    "  Possible C/C++ prototypes are:\n"
    "    cyclone::RigidBody::getAcceleration(cyclone::Vector3 *) const\n"
    "    cyclone::RigidBody::getAcceleration() const\n");
  lua_error(L);return 0;
}


static int _wrap_new_RigidBody(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::RigidBody *result = 0 ;
  
  SWIG_check_num_args("cyclone::RigidBody::RigidBody",0,0)
  result = (cyclone::RigidBody *)new cyclone::RigidBody();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__RigidBody,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RigidBody(void *obj) {
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) obj;
delete arg1;
}
static int _proxy__wrap_new_RigidBody(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RigidBody);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RigidBody_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RigidBody_methods[]= {
    { "calculateDerivedData", _wrap_RigidBody_calculateDerivedData},
    { "integrate", _wrap_RigidBody_integrate},
    { "setMass", _wrap_RigidBody_setMass},
    { "getMass", _wrap_RigidBody_getMass},
    { "setInverseMass", _wrap_RigidBody_setInverseMass},
    { "getInverseMass", _wrap_RigidBody_getInverseMass},
    { "hasFiniteMass", _wrap_RigidBody_hasFiniteMass},
    { "setInertiaTensor", _wrap_RigidBody_setInertiaTensor},
    { "getInertiaTensor", _wrap_RigidBody_getInertiaTensor},
    { "getInertiaTensorWorld", _wrap_RigidBody_getInertiaTensorWorld},
    { "setInverseInertiaTensor", _wrap_RigidBody_setInverseInertiaTensor},
    { "getInverseInertiaTensor", _wrap_RigidBody_getInverseInertiaTensor},
    { "getInverseInertiaTensorWorld", _wrap_RigidBody_getInverseInertiaTensorWorld},
    { "setDamping", _wrap_RigidBody_setDamping},
    { "setLinearDamping", _wrap_RigidBody_setLinearDamping},
    { "getLinearDamping", _wrap_RigidBody_getLinearDamping},
    { "setAngularDamping", _wrap_RigidBody_setAngularDamping},
    { "getAngularDamping", _wrap_RigidBody_getAngularDamping},
    { "setPosition", _wrap_RigidBody_setPosition},
    { "getPosition", _wrap_RigidBody_getPosition},
    { "setOrientation", _wrap_RigidBody_setOrientation},
    { "getOrientation", _wrap_RigidBody_getOrientation},
    { "getGLTransform", _wrap_RigidBody_getGLTransform},
    { "getTransform", _wrap_RigidBody_getTransform},
    { "getPointInLocalSpace", _wrap_RigidBody_getPointInLocalSpace},
    { "getPointInWorldSpace", _wrap_RigidBody_getPointInWorldSpace},
    { "getDirectionInLocalSpace", _wrap_RigidBody_getDirectionInLocalSpace},
    { "getDirectionInWorldSpace", _wrap_RigidBody_getDirectionInWorldSpace},
    { "setVelocity", _wrap_RigidBody_setVelocity},
    { "getVelocity", _wrap_RigidBody_getVelocity},
    { "addVelocity", _wrap_RigidBody_addVelocity},
    { "setRotation", _wrap_RigidBody_setRotation},
    { "getRotation", _wrap_RigidBody_getRotation},
    { "addRotation", _wrap_RigidBody_addRotation},
    { "getAwake", _wrap_RigidBody_getAwake},
    { "setAwake", _wrap_RigidBody_setAwake},
    { "getCanSleep", _wrap_RigidBody_getCanSleep},
    { "setCanSleep", _wrap_RigidBody_setCanSleep},
    { "getLastFrameAcceleration", _wrap_RigidBody_getLastFrameAcceleration},
    { "clearAccumulators", _wrap_RigidBody_clearAccumulators},
    { "addForce", _wrap_RigidBody_addForce},
    { "addForceAtPoint", _wrap_RigidBody_addForceAtPoint},
    { "addForceAtBodyPoint", _wrap_RigidBody_addForceAtBodyPoint},
    { "addTorque", _wrap_RigidBody_addTorque},
    { "setAcceleration", _wrap_RigidBody_setAcceleration},
    { "getAcceleration", _wrap_RigidBody_getAcceleration},
    {0,0}
};
static swig_lua_method swig_RigidBody_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RigidBody_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RigidBody_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RigidBody_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RigidBody_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RigidBody_Sf_SwigStatic = {
    "RigidBody",
    swig_RigidBody_Sf_SwigStatic_methods,
    swig_RigidBody_Sf_SwigStatic_attributes,
    swig_RigidBody_Sf_SwigStatic_constants,
    swig_RigidBody_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RigidBody_bases[] = {0};
static const char *swig_RigidBody_base_names[] = {0};
static swig_lua_class _wrap_class_RigidBody = { "RigidBody", "RigidBody", &SWIGTYPE_p_cyclone__RigidBody,_proxy__wrap_new_RigidBody, swig_delete_RigidBody, swig_RigidBody_methods, swig_RigidBody_attributes, &swig_RigidBody_Sf_SwigStatic, swig_RigidBody_meta, swig_RigidBody_bases, swig_RigidBody_base_names };

static int _wrap_ParticleContact_particle_set(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleContact *arg1 = (cyclone::ParticleContact *) 0 ;
  cyclone::Particle **arg2 ;
  
  SWIG_check_num_args("cyclone::ParticleContact::particle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleContact::particle",1,"cyclone::ParticleContact *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::ParticleContact::particle",2,"cyclone::Particle *[2]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleContact,0))){
    SWIG_fail_ptr("ParticleContact_particle_set",1,SWIGTYPE_p_cyclone__ParticleContact);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_cyclone__Particle,0))){
    SWIG_fail_ptr("ParticleContact_particle_set",2,SWIGTYPE_p_p_cyclone__Particle);
  }
  
  {
    size_t ii;
    cyclone::Particle * *b = (cyclone::Particle * *) arg1->particle;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((cyclone::Particle * *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleContact_particle_get(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleContact *arg1 = (cyclone::ParticleContact *) 0 ;
  cyclone::Particle **result = 0 ;
  
  SWIG_check_num_args("cyclone::ParticleContact::particle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleContact::particle",1,"cyclone::ParticleContact *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleContact,0))){
    SWIG_fail_ptr("ParticleContact_particle_get",1,SWIGTYPE_p_cyclone__ParticleContact);
  }
  
  result = (cyclone::Particle **)(cyclone::Particle **) ((arg1)->particle);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_cyclone__Particle,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleContact_restitution_set(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleContact *arg1 = (cyclone::ParticleContact *) 0 ;
  cyclone::real arg2 ;
  
  SWIG_check_num_args("cyclone::ParticleContact::restitution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleContact::restitution",1,"cyclone::ParticleContact *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::ParticleContact::restitution",2,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleContact,0))){
    SWIG_fail_ptr("ParticleContact_restitution_set",1,SWIGTYPE_p_cyclone__ParticleContact);
  }
  
  arg2 = (cyclone::real)lua_tonumber(L, 2);
  if (arg1) (arg1)->restitution = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleContact_restitution_get(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleContact *arg1 = (cyclone::ParticleContact *) 0 ;
  cyclone::real result;
  
  SWIG_check_num_args("cyclone::ParticleContact::restitution",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleContact::restitution",1,"cyclone::ParticleContact *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleContact,0))){
    SWIG_fail_ptr("ParticleContact_restitution_get",1,SWIGTYPE_p_cyclone__ParticleContact);
  }
  
  result = (cyclone::real) ((arg1)->restitution);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleContact_contactNormal_set(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleContact *arg1 = (cyclone::ParticleContact *) 0 ;
  cyclone::Vector3 *arg2 = (cyclone::Vector3 *) 0 ;
  
  SWIG_check_num_args("cyclone::ParticleContact::contactNormal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleContact::contactNormal",1,"cyclone::ParticleContact *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::ParticleContact::contactNormal",2,"cyclone::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleContact,0))){
    SWIG_fail_ptr("ParticleContact_contactNormal_set",1,SWIGTYPE_p_cyclone__ParticleContact);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("ParticleContact_contactNormal_set",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  if (arg1) (arg1)->contactNormal = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleContact_contactNormal_get(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleContact *arg1 = (cyclone::ParticleContact *) 0 ;
  cyclone::Vector3 *result = 0 ;
  
  SWIG_check_num_args("cyclone::ParticleContact::contactNormal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleContact::contactNormal",1,"cyclone::ParticleContact *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleContact,0))){
    SWIG_fail_ptr("ParticleContact_contactNormal_get",1,SWIGTYPE_p_cyclone__ParticleContact);
  }
  
  result = (cyclone::Vector3 *)& ((arg1)->contactNormal);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleContact_penetration_set(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleContact *arg1 = (cyclone::ParticleContact *) 0 ;
  cyclone::real arg2 ;
  
  SWIG_check_num_args("cyclone::ParticleContact::penetration",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleContact::penetration",1,"cyclone::ParticleContact *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::ParticleContact::penetration",2,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleContact,0))){
    SWIG_fail_ptr("ParticleContact_penetration_set",1,SWIGTYPE_p_cyclone__ParticleContact);
  }
  
  arg2 = (cyclone::real)lua_tonumber(L, 2);
  if (arg1) (arg1)->penetration = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleContact_penetration_get(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleContact *arg1 = (cyclone::ParticleContact *) 0 ;
  cyclone::real result;
  
  SWIG_check_num_args("cyclone::ParticleContact::penetration",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleContact::penetration",1,"cyclone::ParticleContact *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleContact,0))){
    SWIG_fail_ptr("ParticleContact_penetration_get",1,SWIGTYPE_p_cyclone__ParticleContact);
  }
  
  result = (cyclone::real) ((arg1)->penetration);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleContact_particleMovement_set(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleContact *arg1 = (cyclone::ParticleContact *) 0 ;
  cyclone::Vector3 *arg2 ;
  
  SWIG_check_num_args("cyclone::ParticleContact::particleMovement",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleContact::particleMovement",1,"cyclone::ParticleContact *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::ParticleContact::particleMovement",2,"cyclone::Vector3 [2]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleContact,0))){
    SWIG_fail_ptr("ParticleContact_particleMovement_set",1,SWIGTYPE_p_cyclone__ParticleContact);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("ParticleContact_particleMovement_set",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  {
    size_t ii;
    cyclone::Vector3 *b = (cyclone::Vector3 *) arg1->particleMovement;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((cyclone::Vector3 *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleContact_particleMovement_get(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleContact *arg1 = (cyclone::ParticleContact *) 0 ;
  cyclone::Vector3 *result = 0 ;
  
  SWIG_check_num_args("cyclone::ParticleContact::particleMovement",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleContact::particleMovement",1,"cyclone::ParticleContact *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleContact,0))){
    SWIG_fail_ptr("ParticleContact_particleMovement_get",1,SWIGTYPE_p_cyclone__ParticleContact);
  }
  
  result = (cyclone::Vector3 *)(cyclone::Vector3 *) ((arg1)->particleMovement);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParticleContact(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleContact *result = 0 ;
  
  SWIG_check_num_args("cyclone::ParticleContact::ParticleContact",0,0)
  result = (cyclone::ParticleContact *)new cyclone::ParticleContact();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__ParticleContact,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ParticleContact(void *obj) {
cyclone::ParticleContact *arg1 = (cyclone::ParticleContact *) obj;
delete arg1;
}
static int _proxy__wrap_new_ParticleContact(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ParticleContact);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ParticleContact_attributes[] = {
    { "particle", _wrap_ParticleContact_particle_get, _wrap_ParticleContact_particle_set },
    { "restitution", _wrap_ParticleContact_restitution_get, _wrap_ParticleContact_restitution_set },
    { "contactNormal", _wrap_ParticleContact_contactNormal_get, _wrap_ParticleContact_contactNormal_set },
    { "penetration", _wrap_ParticleContact_penetration_get, _wrap_ParticleContact_penetration_set },
    { "particleMovement", _wrap_ParticleContact_particleMovement_get, _wrap_ParticleContact_particleMovement_set },
    {0,0,0}
};
static swig_lua_method swig_ParticleContact_methods[]= {
    {0,0}
};
static swig_lua_method swig_ParticleContact_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ParticleContact_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ParticleContact_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ParticleContact_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ParticleContact_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ParticleContact_Sf_SwigStatic = {
    "ParticleContact",
    swig_ParticleContact_Sf_SwigStatic_methods,
    swig_ParticleContact_Sf_SwigStatic_attributes,
    swig_ParticleContact_Sf_SwigStatic_constants,
    swig_ParticleContact_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ParticleContact_bases[] = {0};
static const char *swig_ParticleContact_base_names[] = {0};
static swig_lua_class _wrap_class_ParticleContact = { "ParticleContact", "ParticleContact", &SWIGTYPE_p_cyclone__ParticleContact,_proxy__wrap_new_ParticleContact, swig_delete_ParticleContact, swig_ParticleContact_methods, swig_ParticleContact_attributes, &swig_ParticleContact_Sf_SwigStatic, swig_ParticleContact_meta, swig_ParticleContact_bases, swig_ParticleContact_base_names };

static int _wrap_new_ParticleContactResolver(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  cyclone::ParticleContactResolver *result = 0 ;
  
  SWIG_check_num_args("cyclone::ParticleContactResolver::ParticleContactResolver",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cyclone::ParticleContactResolver::ParticleContactResolver",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (cyclone::ParticleContactResolver *)new cyclone::ParticleContactResolver(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__ParticleContactResolver,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleContactResolver_setIterations(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleContactResolver *arg1 = (cyclone::ParticleContactResolver *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("cyclone::ParticleContactResolver::setIterations",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleContactResolver::setIterations",1,"cyclone::ParticleContactResolver *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::ParticleContactResolver::setIterations",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleContactResolver,0))){
    SWIG_fail_ptr("ParticleContactResolver_setIterations",1,SWIGTYPE_p_cyclone__ParticleContactResolver);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setIterations(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleContactResolver_resolveContacts(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleContactResolver *arg1 = (cyclone::ParticleContactResolver *) 0 ;
  cyclone::ParticleContact *arg2 = (cyclone::ParticleContact *) 0 ;
  unsigned int arg3 ;
  cyclone::real arg4 ;
  
  SWIG_check_num_args("cyclone::ParticleContactResolver::resolveContacts",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleContactResolver::resolveContacts",1,"cyclone::ParticleContactResolver *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::ParticleContactResolver::resolveContacts",2,"cyclone::ParticleContact *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::ParticleContactResolver::resolveContacts",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cyclone::ParticleContactResolver::resolveContacts",4,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleContactResolver,0))){
    SWIG_fail_ptr("ParticleContactResolver_resolveContacts",1,SWIGTYPE_p_cyclone__ParticleContactResolver);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__ParticleContact,0))){
    SWIG_fail_ptr("ParticleContactResolver_resolveContacts",2,SWIGTYPE_p_cyclone__ParticleContact);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  arg4 = (cyclone::real)lua_tonumber(L, 4);
  (arg1)->resolveContacts(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ParticleContactResolver(void *obj) {
cyclone::ParticleContactResolver *arg1 = (cyclone::ParticleContactResolver *) obj;
delete arg1;
}
static int _proxy__wrap_new_ParticleContactResolver(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ParticleContactResolver);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ParticleContactResolver_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ParticleContactResolver_methods[]= {
    { "setIterations", _wrap_ParticleContactResolver_setIterations},
    { "resolveContacts", _wrap_ParticleContactResolver_resolveContacts},
    {0,0}
};
static swig_lua_method swig_ParticleContactResolver_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ParticleContactResolver_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ParticleContactResolver_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ParticleContactResolver_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ParticleContactResolver_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ParticleContactResolver_Sf_SwigStatic = {
    "ParticleContactResolver",
    swig_ParticleContactResolver_Sf_SwigStatic_methods,
    swig_ParticleContactResolver_Sf_SwigStatic_attributes,
    swig_ParticleContactResolver_Sf_SwigStatic_constants,
    swig_ParticleContactResolver_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ParticleContactResolver_bases[] = {0};
static const char *swig_ParticleContactResolver_base_names[] = {0};
static swig_lua_class _wrap_class_ParticleContactResolver = { "ParticleContactResolver", "ParticleContactResolver", &SWIGTYPE_p_cyclone__ParticleContactResolver,_proxy__wrap_new_ParticleContactResolver, swig_delete_ParticleContactResolver, swig_ParticleContactResolver_methods, swig_ParticleContactResolver_attributes, &swig_ParticleContactResolver_Sf_SwigStatic, swig_ParticleContactResolver_meta, swig_ParticleContactResolver_bases, swig_ParticleContactResolver_base_names };

static int _wrap_ParticleContactGenerator_addContact(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleContactGenerator *arg1 = (cyclone::ParticleContactGenerator *) 0 ;
  cyclone::ParticleContact *arg2 = (cyclone::ParticleContact *) 0 ;
  unsigned int arg3 ;
  unsigned int result;
  
  SWIG_check_num_args("cyclone::ParticleContactGenerator::addContact",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleContactGenerator::addContact",1,"cyclone::ParticleContactGenerator const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::ParticleContactGenerator::addContact",2,"cyclone::ParticleContact *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::ParticleContactGenerator::addContact",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleContactGenerator,0))){
    SWIG_fail_ptr("ParticleContactGenerator_addContact",1,SWIGTYPE_p_cyclone__ParticleContactGenerator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__ParticleContact,0))){
    SWIG_fail_ptr("ParticleContactGenerator_addContact",2,SWIGTYPE_p_cyclone__ParticleContact);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (unsigned int)((cyclone::ParticleContactGenerator const *)arg1)->addContact(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParticleContactGenerator(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleContactGenerator *result = 0 ;
  
  SWIG_check_num_args("cyclone::ParticleContactGenerator::ParticleContactGenerator",0,0)
  result = (cyclone::ParticleContactGenerator *)new cyclone::ParticleContactGenerator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__ParticleContactGenerator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ParticleContactGenerator(void *obj) {
cyclone::ParticleContactGenerator *arg1 = (cyclone::ParticleContactGenerator *) obj;
delete arg1;
}
static int _proxy__wrap_new_ParticleContactGenerator(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ParticleContactGenerator);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ParticleContactGenerator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ParticleContactGenerator_methods[]= {
    { "addContact", _wrap_ParticleContactGenerator_addContact},
    {0,0}
};
static swig_lua_method swig_ParticleContactGenerator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ParticleContactGenerator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ParticleContactGenerator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ParticleContactGenerator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ParticleContactGenerator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ParticleContactGenerator_Sf_SwigStatic = {
    "ParticleContactGenerator",
    swig_ParticleContactGenerator_Sf_SwigStatic_methods,
    swig_ParticleContactGenerator_Sf_SwigStatic_attributes,
    swig_ParticleContactGenerator_Sf_SwigStatic_constants,
    swig_ParticleContactGenerator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ParticleContactGenerator_bases[] = {0};
static const char *swig_ParticleContactGenerator_base_names[] = {0};
static swig_lua_class _wrap_class_ParticleContactGenerator = { "ParticleContactGenerator", "ParticleContactGenerator", &SWIGTYPE_p_cyclone__ParticleContactGenerator,_proxy__wrap_new_ParticleContactGenerator, swig_delete_ParticleContactGenerator, swig_ParticleContactGenerator_methods, swig_ParticleContactGenerator_attributes, &swig_ParticleContactGenerator_Sf_SwigStatic, swig_ParticleContactGenerator_meta, swig_ParticleContactGenerator_bases, swig_ParticleContactGenerator_base_names };

static int _wrap_ParticleLink_particle_set(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleLink *arg1 = (cyclone::ParticleLink *) 0 ;
  cyclone::Particle **arg2 ;
  
  SWIG_check_num_args("cyclone::ParticleLink::particle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleLink::particle",1,"cyclone::ParticleLink *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::ParticleLink::particle",2,"cyclone::Particle *[2]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleLink,0))){
    SWIG_fail_ptr("ParticleLink_particle_set",1,SWIGTYPE_p_cyclone__ParticleLink);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_cyclone__Particle,0))){
    SWIG_fail_ptr("ParticleLink_particle_set",2,SWIGTYPE_p_p_cyclone__Particle);
  }
  
  {
    size_t ii;
    cyclone::Particle * *b = (cyclone::Particle * *) arg1->particle;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((cyclone::Particle * *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleLink_particle_get(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleLink *arg1 = (cyclone::ParticleLink *) 0 ;
  cyclone::Particle **result = 0 ;
  
  SWIG_check_num_args("cyclone::ParticleLink::particle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleLink::particle",1,"cyclone::ParticleLink *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleLink,0))){
    SWIG_fail_ptr("ParticleLink_particle_get",1,SWIGTYPE_p_cyclone__ParticleLink);
  }
  
  result = (cyclone::Particle **)(cyclone::Particle **) ((arg1)->particle);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_cyclone__Particle,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleLink_addContact(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleLink *arg1 = (cyclone::ParticleLink *) 0 ;
  cyclone::ParticleContact *arg2 = (cyclone::ParticleContact *) 0 ;
  unsigned int arg3 ;
  unsigned int result;
  
  SWIG_check_num_args("cyclone::ParticleLink::addContact",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleLink::addContact",1,"cyclone::ParticleLink const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::ParticleLink::addContact",2,"cyclone::ParticleContact *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::ParticleLink::addContact",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleLink,0))){
    SWIG_fail_ptr("ParticleLink_addContact",1,SWIGTYPE_p_cyclone__ParticleLink);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__ParticleContact,0))){
    SWIG_fail_ptr("ParticleLink_addContact",2,SWIGTYPE_p_cyclone__ParticleContact);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (unsigned int)((cyclone::ParticleLink const *)arg1)->addContact(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleLink_setParticle0(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleLink *arg1 = (cyclone::ParticleLink *) 0 ;
  cyclone::Particle *arg2 = (cyclone::Particle *) 0 ;
  
  SWIG_check_num_args("cyclone::ParticleLink::setParticle0",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleLink::setParticle0",1,"cyclone::ParticleLink *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::ParticleLink::setParticle0",2,"cyclone::Particle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleLink,0))){
    SWIG_fail_ptr("ParticleLink_setParticle0",1,SWIGTYPE_p_cyclone__ParticleLink);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Particle,0))){
    SWIG_fail_ptr("ParticleLink_setParticle0",2,SWIGTYPE_p_cyclone__Particle);
  }
  
  (arg1)->setParticle0(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleLink_setParticle1(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleLink *arg1 = (cyclone::ParticleLink *) 0 ;
  cyclone::Particle *arg2 = (cyclone::Particle *) 0 ;
  
  SWIG_check_num_args("cyclone::ParticleLink::setParticle1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleLink::setParticle1",1,"cyclone::ParticleLink *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::ParticleLink::setParticle1",2,"cyclone::Particle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleLink,0))){
    SWIG_fail_ptr("ParticleLink_setParticle1",1,SWIGTYPE_p_cyclone__ParticleLink);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Particle,0))){
    SWIG_fail_ptr("ParticleLink_setParticle1",2,SWIGTYPE_p_cyclone__Particle);
  }
  
  (arg1)->setParticle1(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleLink_getParticle0(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleLink *arg1 = (cyclone::ParticleLink *) 0 ;
  cyclone::Particle *result = 0 ;
  
  SWIG_check_num_args("cyclone::ParticleLink::getParticle0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleLink::getParticle0",1,"cyclone::ParticleLink *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleLink,0))){
    SWIG_fail_ptr("ParticleLink_getParticle0",1,SWIGTYPE_p_cyclone__ParticleLink);
  }
  
  result = (cyclone::Particle *)(arg1)->getParticle0();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__Particle,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleLink_getParticle1(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleLink *arg1 = (cyclone::ParticleLink *) 0 ;
  cyclone::Particle *result = 0 ;
  
  SWIG_check_num_args("cyclone::ParticleLink::getParticle1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleLink::getParticle1",1,"cyclone::ParticleLink *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleLink,0))){
    SWIG_fail_ptr("ParticleLink_getParticle1",1,SWIGTYPE_p_cyclone__ParticleLink);
  }
  
  result = (cyclone::Particle *)(arg1)->getParticle1();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__Particle,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParticleLink(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleLink *result = 0 ;
  
  SWIG_check_num_args("cyclone::ParticleLink::ParticleLink",0,0)
  result = (cyclone::ParticleLink *)new cyclone::ParticleLink();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__ParticleLink,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ParticleLink(void *obj) {
cyclone::ParticleLink *arg1 = (cyclone::ParticleLink *) obj;
delete arg1;
}
static int _proxy__wrap_new_ParticleLink(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ParticleLink);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ParticleLink_attributes[] = {
    { "particle", _wrap_ParticleLink_particle_get, _wrap_ParticleLink_particle_set },
    {0,0,0}
};
static swig_lua_method swig_ParticleLink_methods[]= {
    { "addContact", _wrap_ParticleLink_addContact},
    { "setParticle0", _wrap_ParticleLink_setParticle0},
    { "setParticle1", _wrap_ParticleLink_setParticle1},
    { "getParticle0", _wrap_ParticleLink_getParticle0},
    { "getParticle1", _wrap_ParticleLink_getParticle1},
    {0,0}
};
static swig_lua_method swig_ParticleLink_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ParticleLink_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ParticleLink_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ParticleLink_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ParticleLink_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ParticleLink_Sf_SwigStatic = {
    "ParticleLink",
    swig_ParticleLink_Sf_SwigStatic_methods,
    swig_ParticleLink_Sf_SwigStatic_attributes,
    swig_ParticleLink_Sf_SwigStatic_constants,
    swig_ParticleLink_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ParticleLink_bases[] = {0,0};
static const char *swig_ParticleLink_base_names[] = {"cyclone::ParticleContactGenerator *",0};
static swig_lua_class _wrap_class_ParticleLink = { "ParticleLink", "ParticleLink", &SWIGTYPE_p_cyclone__ParticleLink,_proxy__wrap_new_ParticleLink, swig_delete_ParticleLink, swig_ParticleLink_methods, swig_ParticleLink_attributes, &swig_ParticleLink_Sf_SwigStatic, swig_ParticleLink_meta, swig_ParticleLink_bases, swig_ParticleLink_base_names };

static int _wrap_ParticleCable_maxLength_set(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleCable *arg1 = (cyclone::ParticleCable *) 0 ;
  cyclone::real arg2 ;
  
  SWIG_check_num_args("cyclone::ParticleCable::maxLength",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleCable::maxLength",1,"cyclone::ParticleCable *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::ParticleCable::maxLength",2,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleCable,0))){
    SWIG_fail_ptr("ParticleCable_maxLength_set",1,SWIGTYPE_p_cyclone__ParticleCable);
  }
  
  arg2 = (cyclone::real)lua_tonumber(L, 2);
  if (arg1) (arg1)->maxLength = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleCable_maxLength_get(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleCable *arg1 = (cyclone::ParticleCable *) 0 ;
  cyclone::real result;
  
  SWIG_check_num_args("cyclone::ParticleCable::maxLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleCable::maxLength",1,"cyclone::ParticleCable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleCable,0))){
    SWIG_fail_ptr("ParticleCable_maxLength_get",1,SWIGTYPE_p_cyclone__ParticleCable);
  }
  
  result = (cyclone::real) ((arg1)->maxLength);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleCable_restitution_set(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleCable *arg1 = (cyclone::ParticleCable *) 0 ;
  cyclone::real arg2 ;
  
  SWIG_check_num_args("cyclone::ParticleCable::restitution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleCable::restitution",1,"cyclone::ParticleCable *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::ParticleCable::restitution",2,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleCable,0))){
    SWIG_fail_ptr("ParticleCable_restitution_set",1,SWIGTYPE_p_cyclone__ParticleCable);
  }
  
  arg2 = (cyclone::real)lua_tonumber(L, 2);
  if (arg1) (arg1)->restitution = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleCable_restitution_get(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleCable *arg1 = (cyclone::ParticleCable *) 0 ;
  cyclone::real result;
  
  SWIG_check_num_args("cyclone::ParticleCable::restitution",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleCable::restitution",1,"cyclone::ParticleCable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleCable,0))){
    SWIG_fail_ptr("ParticleCable_restitution_get",1,SWIGTYPE_p_cyclone__ParticleCable);
  }
  
  result = (cyclone::real) ((arg1)->restitution);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleCable_addContact(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleCable *arg1 = (cyclone::ParticleCable *) 0 ;
  cyclone::ParticleContact *arg2 = (cyclone::ParticleContact *) 0 ;
  unsigned int arg3 ;
  unsigned int result;
  
  SWIG_check_num_args("cyclone::ParticleCable::addContact",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleCable::addContact",1,"cyclone::ParticleCable const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::ParticleCable::addContact",2,"cyclone::ParticleContact *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::ParticleCable::addContact",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleCable,0))){
    SWIG_fail_ptr("ParticleCable_addContact",1,SWIGTYPE_p_cyclone__ParticleCable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__ParticleContact,0))){
    SWIG_fail_ptr("ParticleCable_addContact",2,SWIGTYPE_p_cyclone__ParticleContact);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (unsigned int)((cyclone::ParticleCable const *)arg1)->addContact(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParticleCable(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleCable *result = 0 ;
  
  SWIG_check_num_args("cyclone::ParticleCable::ParticleCable",0,0)
  result = (cyclone::ParticleCable *)new cyclone::ParticleCable();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__ParticleCable,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ParticleCable(void *obj) {
cyclone::ParticleCable *arg1 = (cyclone::ParticleCable *) obj;
delete arg1;
}
static int _proxy__wrap_new_ParticleCable(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ParticleCable);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ParticleCable_attributes[] = {
    { "maxLength", _wrap_ParticleCable_maxLength_get, _wrap_ParticleCable_maxLength_set },
    { "restitution", _wrap_ParticleCable_restitution_get, _wrap_ParticleCable_restitution_set },
    {0,0,0}
};
static swig_lua_method swig_ParticleCable_methods[]= {
    { "addContact", _wrap_ParticleCable_addContact},
    {0,0}
};
static swig_lua_method swig_ParticleCable_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ParticleCable_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ParticleCable_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ParticleCable_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ParticleCable_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ParticleCable_Sf_SwigStatic = {
    "ParticleCable",
    swig_ParticleCable_Sf_SwigStatic_methods,
    swig_ParticleCable_Sf_SwigStatic_attributes,
    swig_ParticleCable_Sf_SwigStatic_constants,
    swig_ParticleCable_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ParticleCable_bases[] = {0,0};
static const char *swig_ParticleCable_base_names[] = {"cyclone::ParticleLink *",0};
static swig_lua_class _wrap_class_ParticleCable = { "ParticleCable", "ParticleCable", &SWIGTYPE_p_cyclone__ParticleCable,_proxy__wrap_new_ParticleCable, swig_delete_ParticleCable, swig_ParticleCable_methods, swig_ParticleCable_attributes, &swig_ParticleCable_Sf_SwigStatic, swig_ParticleCable_meta, swig_ParticleCable_bases, swig_ParticleCable_base_names };

static int _wrap_ParticleRod_length_set(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleRod *arg1 = (cyclone::ParticleRod *) 0 ;
  cyclone::real arg2 ;
  
  SWIG_check_num_args("cyclone::ParticleRod::length",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleRod::length",1,"cyclone::ParticleRod *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::ParticleRod::length",2,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleRod,0))){
    SWIG_fail_ptr("ParticleRod_length_set",1,SWIGTYPE_p_cyclone__ParticleRod);
  }
  
  arg2 = (cyclone::real)lua_tonumber(L, 2);
  if (arg1) (arg1)->length = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleRod_length_get(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleRod *arg1 = (cyclone::ParticleRod *) 0 ;
  cyclone::real result;
  
  SWIG_check_num_args("cyclone::ParticleRod::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleRod::length",1,"cyclone::ParticleRod *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleRod,0))){
    SWIG_fail_ptr("ParticleRod_length_get",1,SWIGTYPE_p_cyclone__ParticleRod);
  }
  
  result = (cyclone::real) ((arg1)->length);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleRod_addContact(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleRod *arg1 = (cyclone::ParticleRod *) 0 ;
  cyclone::ParticleContact *arg2 = (cyclone::ParticleContact *) 0 ;
  unsigned int arg3 ;
  unsigned int result;
  
  SWIG_check_num_args("cyclone::ParticleRod::addContact",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleRod::addContact",1,"cyclone::ParticleRod const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::ParticleRod::addContact",2,"cyclone::ParticleContact *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::ParticleRod::addContact",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleRod,0))){
    SWIG_fail_ptr("ParticleRod_addContact",1,SWIGTYPE_p_cyclone__ParticleRod);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__ParticleContact,0))){
    SWIG_fail_ptr("ParticleRod_addContact",2,SWIGTYPE_p_cyclone__ParticleContact);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (unsigned int)((cyclone::ParticleRod const *)arg1)->addContact(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParticleRod(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleRod *result = 0 ;
  
  SWIG_check_num_args("cyclone::ParticleRod::ParticleRod",0,0)
  result = (cyclone::ParticleRod *)new cyclone::ParticleRod();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__ParticleRod,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ParticleRod(void *obj) {
cyclone::ParticleRod *arg1 = (cyclone::ParticleRod *) obj;
delete arg1;
}
static int _proxy__wrap_new_ParticleRod(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ParticleRod);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ParticleRod_attributes[] = {
    { "length", _wrap_ParticleRod_length_get, _wrap_ParticleRod_length_set },
    {0,0,0}
};
static swig_lua_method swig_ParticleRod_methods[]= {
    { "addContact", _wrap_ParticleRod_addContact},
    {0,0}
};
static swig_lua_method swig_ParticleRod_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ParticleRod_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ParticleRod_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ParticleRod_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ParticleRod_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ParticleRod_Sf_SwigStatic = {
    "ParticleRod",
    swig_ParticleRod_Sf_SwigStatic_methods,
    swig_ParticleRod_Sf_SwigStatic_attributes,
    swig_ParticleRod_Sf_SwigStatic_constants,
    swig_ParticleRod_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ParticleRod_bases[] = {0,0};
static const char *swig_ParticleRod_base_names[] = {"cyclone::ParticleLink *",0};
static swig_lua_class _wrap_class_ParticleRod = { "ParticleRod", "ParticleRod", &SWIGTYPE_p_cyclone__ParticleRod,_proxy__wrap_new_ParticleRod, swig_delete_ParticleRod, swig_ParticleRod_methods, swig_ParticleRod_attributes, &swig_ParticleRod_Sf_SwigStatic, swig_ParticleRod_meta, swig_ParticleRod_bases, swig_ParticleRod_base_names };

static int _wrap_ParticleConstraint_particle_set(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleConstraint *arg1 = (cyclone::ParticleConstraint *) 0 ;
  cyclone::Particle *arg2 = (cyclone::Particle *) 0 ;
  
  SWIG_check_num_args("cyclone::ParticleConstraint::particle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleConstraint::particle",1,"cyclone::ParticleConstraint *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::ParticleConstraint::particle",2,"cyclone::Particle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleConstraint,0))){
    SWIG_fail_ptr("ParticleConstraint_particle_set",1,SWIGTYPE_p_cyclone__ParticleConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Particle,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ParticleConstraint_particle_set",2,SWIGTYPE_p_cyclone__Particle);
  }
  
  if (arg1) (arg1)->particle = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleConstraint_particle_get(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleConstraint *arg1 = (cyclone::ParticleConstraint *) 0 ;
  cyclone::Particle *result = 0 ;
  
  SWIG_check_num_args("cyclone::ParticleConstraint::particle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleConstraint::particle",1,"cyclone::ParticleConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleConstraint,0))){
    SWIG_fail_ptr("ParticleConstraint_particle_get",1,SWIGTYPE_p_cyclone__ParticleConstraint);
  }
  
  result = (cyclone::Particle *) ((arg1)->particle);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__Particle,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleConstraint_anchor_set(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleConstraint *arg1 = (cyclone::ParticleConstraint *) 0 ;
  cyclone::Vector3 *arg2 = (cyclone::Vector3 *) 0 ;
  
  SWIG_check_num_args("cyclone::ParticleConstraint::anchor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleConstraint::anchor",1,"cyclone::ParticleConstraint *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::ParticleConstraint::anchor",2,"cyclone::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleConstraint,0))){
    SWIG_fail_ptr("ParticleConstraint_anchor_set",1,SWIGTYPE_p_cyclone__ParticleConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("ParticleConstraint_anchor_set",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  if (arg1) (arg1)->anchor = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleConstraint_anchor_get(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleConstraint *arg1 = (cyclone::ParticleConstraint *) 0 ;
  cyclone::Vector3 *result = 0 ;
  
  SWIG_check_num_args("cyclone::ParticleConstraint::anchor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleConstraint::anchor",1,"cyclone::ParticleConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleConstraint,0))){
    SWIG_fail_ptr("ParticleConstraint_anchor_get",1,SWIGTYPE_p_cyclone__ParticleConstraint);
  }
  
  result = (cyclone::Vector3 *)& ((arg1)->anchor);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleConstraint_addContact(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleConstraint *arg1 = (cyclone::ParticleConstraint *) 0 ;
  cyclone::ParticleContact *arg2 = (cyclone::ParticleContact *) 0 ;
  unsigned int arg3 ;
  unsigned int result;
  
  SWIG_check_num_args("cyclone::ParticleConstraint::addContact",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleConstraint::addContact",1,"cyclone::ParticleConstraint const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::ParticleConstraint::addContact",2,"cyclone::ParticleContact *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::ParticleConstraint::addContact",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleConstraint,0))){
    SWIG_fail_ptr("ParticleConstraint_addContact",1,SWIGTYPE_p_cyclone__ParticleConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__ParticleContact,0))){
    SWIG_fail_ptr("ParticleConstraint_addContact",2,SWIGTYPE_p_cyclone__ParticleContact);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (unsigned int)((cyclone::ParticleConstraint const *)arg1)->addContact(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ParticleConstraint(void *obj) {
cyclone::ParticleConstraint *arg1 = (cyclone::ParticleConstraint *) obj;
delete arg1;
}
static swig_lua_attribute swig_ParticleConstraint_attributes[] = {
    { "particle", _wrap_ParticleConstraint_particle_get, _wrap_ParticleConstraint_particle_set },
    { "anchor", _wrap_ParticleConstraint_anchor_get, _wrap_ParticleConstraint_anchor_set },
    {0,0,0}
};
static swig_lua_method swig_ParticleConstraint_methods[]= {
    { "addContact", _wrap_ParticleConstraint_addContact},
    {0,0}
};
static swig_lua_method swig_ParticleConstraint_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ParticleConstraint_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ParticleConstraint_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ParticleConstraint_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ParticleConstraint_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ParticleConstraint_Sf_SwigStatic = {
    "ParticleConstraint",
    swig_ParticleConstraint_Sf_SwigStatic_methods,
    swig_ParticleConstraint_Sf_SwigStatic_attributes,
    swig_ParticleConstraint_Sf_SwigStatic_constants,
    swig_ParticleConstraint_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ParticleConstraint_bases[] = {0,0};
static const char *swig_ParticleConstraint_base_names[] = {"cyclone::ParticleContactGenerator *",0};
static swig_lua_class _wrap_class_ParticleConstraint = { "ParticleConstraint", "ParticleConstraint", &SWIGTYPE_p_cyclone__ParticleConstraint,0, swig_delete_ParticleConstraint, swig_ParticleConstraint_methods, swig_ParticleConstraint_attributes, &swig_ParticleConstraint_Sf_SwigStatic, swig_ParticleConstraint_meta, swig_ParticleConstraint_bases, swig_ParticleConstraint_base_names };

static int _wrap_ParticleCableConstraint_maxLength_set(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleCableConstraint *arg1 = (cyclone::ParticleCableConstraint *) 0 ;
  cyclone::real arg2 ;
  
  SWIG_check_num_args("cyclone::ParticleCableConstraint::maxLength",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleCableConstraint::maxLength",1,"cyclone::ParticleCableConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::ParticleCableConstraint::maxLength",2,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleCableConstraint,0))){
    SWIG_fail_ptr("ParticleCableConstraint_maxLength_set",1,SWIGTYPE_p_cyclone__ParticleCableConstraint);
  }
  
  arg2 = (cyclone::real)lua_tonumber(L, 2);
  if (arg1) (arg1)->maxLength = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleCableConstraint_maxLength_get(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleCableConstraint *arg1 = (cyclone::ParticleCableConstraint *) 0 ;
  cyclone::real result;
  
  SWIG_check_num_args("cyclone::ParticleCableConstraint::maxLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleCableConstraint::maxLength",1,"cyclone::ParticleCableConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleCableConstraint,0))){
    SWIG_fail_ptr("ParticleCableConstraint_maxLength_get",1,SWIGTYPE_p_cyclone__ParticleCableConstraint);
  }
  
  result = (cyclone::real) ((arg1)->maxLength);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleCableConstraint_restitution_set(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleCableConstraint *arg1 = (cyclone::ParticleCableConstraint *) 0 ;
  cyclone::real arg2 ;
  
  SWIG_check_num_args("cyclone::ParticleCableConstraint::restitution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleCableConstraint::restitution",1,"cyclone::ParticleCableConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::ParticleCableConstraint::restitution",2,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleCableConstraint,0))){
    SWIG_fail_ptr("ParticleCableConstraint_restitution_set",1,SWIGTYPE_p_cyclone__ParticleCableConstraint);
  }
  
  arg2 = (cyclone::real)lua_tonumber(L, 2);
  if (arg1) (arg1)->restitution = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleCableConstraint_restitution_get(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleCableConstraint *arg1 = (cyclone::ParticleCableConstraint *) 0 ;
  cyclone::real result;
  
  SWIG_check_num_args("cyclone::ParticleCableConstraint::restitution",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleCableConstraint::restitution",1,"cyclone::ParticleCableConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleCableConstraint,0))){
    SWIG_fail_ptr("ParticleCableConstraint_restitution_get",1,SWIGTYPE_p_cyclone__ParticleCableConstraint);
  }
  
  result = (cyclone::real) ((arg1)->restitution);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleCableConstraint_addContact(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleCableConstraint *arg1 = (cyclone::ParticleCableConstraint *) 0 ;
  cyclone::ParticleContact *arg2 = (cyclone::ParticleContact *) 0 ;
  unsigned int arg3 ;
  unsigned int result;
  
  SWIG_check_num_args("cyclone::ParticleCableConstraint::addContact",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleCableConstraint::addContact",1,"cyclone::ParticleCableConstraint const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::ParticleCableConstraint::addContact",2,"cyclone::ParticleContact *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::ParticleCableConstraint::addContact",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleCableConstraint,0))){
    SWIG_fail_ptr("ParticleCableConstraint_addContact",1,SWIGTYPE_p_cyclone__ParticleCableConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__ParticleContact,0))){
    SWIG_fail_ptr("ParticleCableConstraint_addContact",2,SWIGTYPE_p_cyclone__ParticleContact);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (unsigned int)((cyclone::ParticleCableConstraint const *)arg1)->addContact(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParticleCableConstraint(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleCableConstraint *result = 0 ;
  
  SWIG_check_num_args("cyclone::ParticleCableConstraint::ParticleCableConstraint",0,0)
  result = (cyclone::ParticleCableConstraint *)new cyclone::ParticleCableConstraint();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__ParticleCableConstraint,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ParticleCableConstraint(void *obj) {
cyclone::ParticleCableConstraint *arg1 = (cyclone::ParticleCableConstraint *) obj;
delete arg1;
}
static int _proxy__wrap_new_ParticleCableConstraint(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ParticleCableConstraint);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ParticleCableConstraint_attributes[] = {
    { "maxLength", _wrap_ParticleCableConstraint_maxLength_get, _wrap_ParticleCableConstraint_maxLength_set },
    { "restitution", _wrap_ParticleCableConstraint_restitution_get, _wrap_ParticleCableConstraint_restitution_set },
    {0,0,0}
};
static swig_lua_method swig_ParticleCableConstraint_methods[]= {
    { "addContact", _wrap_ParticleCableConstraint_addContact},
    {0,0}
};
static swig_lua_method swig_ParticleCableConstraint_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ParticleCableConstraint_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ParticleCableConstraint_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ParticleCableConstraint_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ParticleCableConstraint_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ParticleCableConstraint_Sf_SwigStatic = {
    "ParticleCableConstraint",
    swig_ParticleCableConstraint_Sf_SwigStatic_methods,
    swig_ParticleCableConstraint_Sf_SwigStatic_attributes,
    swig_ParticleCableConstraint_Sf_SwigStatic_constants,
    swig_ParticleCableConstraint_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ParticleCableConstraint_bases[] = {0,0};
static const char *swig_ParticleCableConstraint_base_names[] = {"cyclone::ParticleConstraint *",0};
static swig_lua_class _wrap_class_ParticleCableConstraint = { "ParticleCableConstraint", "ParticleCableConstraint", &SWIGTYPE_p_cyclone__ParticleCableConstraint,_proxy__wrap_new_ParticleCableConstraint, swig_delete_ParticleCableConstraint, swig_ParticleCableConstraint_methods, swig_ParticleCableConstraint_attributes, &swig_ParticleCableConstraint_Sf_SwigStatic, swig_ParticleCableConstraint_meta, swig_ParticleCableConstraint_bases, swig_ParticleCableConstraint_base_names };

static int _wrap_ParticleRodConstraint_length_set(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleRodConstraint *arg1 = (cyclone::ParticleRodConstraint *) 0 ;
  cyclone::real arg2 ;
  
  SWIG_check_num_args("cyclone::ParticleRodConstraint::length",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleRodConstraint::length",1,"cyclone::ParticleRodConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::ParticleRodConstraint::length",2,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleRodConstraint,0))){
    SWIG_fail_ptr("ParticleRodConstraint_length_set",1,SWIGTYPE_p_cyclone__ParticleRodConstraint);
  }
  
  arg2 = (cyclone::real)lua_tonumber(L, 2);
  if (arg1) (arg1)->length = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleRodConstraint_length_get(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleRodConstraint *arg1 = (cyclone::ParticleRodConstraint *) 0 ;
  cyclone::real result;
  
  SWIG_check_num_args("cyclone::ParticleRodConstraint::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleRodConstraint::length",1,"cyclone::ParticleRodConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleRodConstraint,0))){
    SWIG_fail_ptr("ParticleRodConstraint_length_get",1,SWIGTYPE_p_cyclone__ParticleRodConstraint);
  }
  
  result = (cyclone::real) ((arg1)->length);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleRodConstraint_addContact(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleRodConstraint *arg1 = (cyclone::ParticleRodConstraint *) 0 ;
  cyclone::ParticleContact *arg2 = (cyclone::ParticleContact *) 0 ;
  unsigned int arg3 ;
  unsigned int result;
  
  SWIG_check_num_args("cyclone::ParticleRodConstraint::addContact",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleRodConstraint::addContact",1,"cyclone::ParticleRodConstraint const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::ParticleRodConstraint::addContact",2,"cyclone::ParticleContact *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::ParticleRodConstraint::addContact",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleRodConstraint,0))){
    SWIG_fail_ptr("ParticleRodConstraint_addContact",1,SWIGTYPE_p_cyclone__ParticleRodConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__ParticleContact,0))){
    SWIG_fail_ptr("ParticleRodConstraint_addContact",2,SWIGTYPE_p_cyclone__ParticleContact);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (unsigned int)((cyclone::ParticleRodConstraint const *)arg1)->addContact(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParticleRodConstraint(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleRodConstraint *result = 0 ;
  
  SWIG_check_num_args("cyclone::ParticleRodConstraint::ParticleRodConstraint",0,0)
  result = (cyclone::ParticleRodConstraint *)new cyclone::ParticleRodConstraint();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__ParticleRodConstraint,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ParticleRodConstraint(void *obj) {
cyclone::ParticleRodConstraint *arg1 = (cyclone::ParticleRodConstraint *) obj;
delete arg1;
}
static int _proxy__wrap_new_ParticleRodConstraint(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ParticleRodConstraint);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ParticleRodConstraint_attributes[] = {
    { "length", _wrap_ParticleRodConstraint_length_get, _wrap_ParticleRodConstraint_length_set },
    {0,0,0}
};
static swig_lua_method swig_ParticleRodConstraint_methods[]= {
    { "addContact", _wrap_ParticleRodConstraint_addContact},
    {0,0}
};
static swig_lua_method swig_ParticleRodConstraint_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ParticleRodConstraint_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ParticleRodConstraint_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ParticleRodConstraint_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ParticleRodConstraint_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ParticleRodConstraint_Sf_SwigStatic = {
    "ParticleRodConstraint",
    swig_ParticleRodConstraint_Sf_SwigStatic_methods,
    swig_ParticleRodConstraint_Sf_SwigStatic_attributes,
    swig_ParticleRodConstraint_Sf_SwigStatic_constants,
    swig_ParticleRodConstraint_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ParticleRodConstraint_bases[] = {0,0};
static const char *swig_ParticleRodConstraint_base_names[] = {"cyclone::ParticleConstraint *",0};
static swig_lua_class _wrap_class_ParticleRodConstraint = { "ParticleRodConstraint", "ParticleRodConstraint", &SWIGTYPE_p_cyclone__ParticleRodConstraint,_proxy__wrap_new_ParticleRodConstraint, swig_delete_ParticleRodConstraint, swig_ParticleRodConstraint_methods, swig_ParticleRodConstraint_attributes, &swig_ParticleRodConstraint_Sf_SwigStatic, swig_ParticleRodConstraint_meta, swig_ParticleRodConstraint_bases, swig_ParticleRodConstraint_base_names };

static int _wrap_ParticleForceGenerator_updateForce(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleForceGenerator *arg1 = (cyclone::ParticleForceGenerator *) 0 ;
  cyclone::Particle *arg2 = (cyclone::Particle *) 0 ;
  cyclone::real arg3 ;
  
  SWIG_check_num_args("cyclone::ParticleForceGenerator::updateForce",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleForceGenerator::updateForce",1,"cyclone::ParticleForceGenerator *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::ParticleForceGenerator::updateForce",2,"cyclone::Particle *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::ParticleForceGenerator::updateForce",3,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleForceGenerator,0))){
    SWIG_fail_ptr("ParticleForceGenerator_updateForce",1,SWIGTYPE_p_cyclone__ParticleForceGenerator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Particle,0))){
    SWIG_fail_ptr("ParticleForceGenerator_updateForce",2,SWIGTYPE_p_cyclone__Particle);
  }
  
  arg3 = (cyclone::real)lua_tonumber(L, 3);
  (arg1)->updateForce(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParticleForceGenerator(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleForceGenerator *result = 0 ;
  
  SWIG_check_num_args("cyclone::ParticleForceGenerator::ParticleForceGenerator",0,0)
  result = (cyclone::ParticleForceGenerator *)new cyclone::ParticleForceGenerator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__ParticleForceGenerator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ParticleForceGenerator(void *obj) {
cyclone::ParticleForceGenerator *arg1 = (cyclone::ParticleForceGenerator *) obj;
delete arg1;
}
static int _proxy__wrap_new_ParticleForceGenerator(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ParticleForceGenerator);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ParticleForceGenerator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ParticleForceGenerator_methods[]= {
    { "updateForce", _wrap_ParticleForceGenerator_updateForce},
    {0,0}
};
static swig_lua_method swig_ParticleForceGenerator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ParticleForceGenerator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ParticleForceGenerator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ParticleForceGenerator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ParticleForceGenerator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ParticleForceGenerator_Sf_SwigStatic = {
    "ParticleForceGenerator",
    swig_ParticleForceGenerator_Sf_SwigStatic_methods,
    swig_ParticleForceGenerator_Sf_SwigStatic_attributes,
    swig_ParticleForceGenerator_Sf_SwigStatic_constants,
    swig_ParticleForceGenerator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ParticleForceGenerator_bases[] = {0};
static const char *swig_ParticleForceGenerator_base_names[] = {0};
static swig_lua_class _wrap_class_ParticleForceGenerator = { "ParticleForceGenerator", "ParticleForceGenerator", &SWIGTYPE_p_cyclone__ParticleForceGenerator,_proxy__wrap_new_ParticleForceGenerator, swig_delete_ParticleForceGenerator, swig_ParticleForceGenerator_methods, swig_ParticleForceGenerator_attributes, &swig_ParticleForceGenerator_Sf_SwigStatic, swig_ParticleForceGenerator_meta, swig_ParticleForceGenerator_bases, swig_ParticleForceGenerator_base_names };

static int _wrap_new_ParticleGravity(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Vector3 *arg1 = 0 ;
  cyclone::ParticleGravity *result = 0 ;
  
  SWIG_check_num_args("cyclone::ParticleGravity::ParticleGravity",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("cyclone::ParticleGravity::ParticleGravity",1,"cyclone::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("new_ParticleGravity",1,SWIGTYPE_p_cyclone__Vector3);
  }
  
  result = (cyclone::ParticleGravity *)new cyclone::ParticleGravity((cyclone::Vector3 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__ParticleGravity,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleGravity_updateForce(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleGravity *arg1 = (cyclone::ParticleGravity *) 0 ;
  cyclone::Particle *arg2 = (cyclone::Particle *) 0 ;
  cyclone::real arg3 ;
  
  SWIG_check_num_args("cyclone::ParticleGravity::updateForce",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleGravity::updateForce",1,"cyclone::ParticleGravity *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::ParticleGravity::updateForce",2,"cyclone::Particle *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::ParticleGravity::updateForce",3,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleGravity,0))){
    SWIG_fail_ptr("ParticleGravity_updateForce",1,SWIGTYPE_p_cyclone__ParticleGravity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Particle,0))){
    SWIG_fail_ptr("ParticleGravity_updateForce",2,SWIGTYPE_p_cyclone__Particle);
  }
  
  arg3 = (cyclone::real)lua_tonumber(L, 3);
  (arg1)->updateForce(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ParticleGravity(void *obj) {
cyclone::ParticleGravity *arg1 = (cyclone::ParticleGravity *) obj;
delete arg1;
}
static int _proxy__wrap_new_ParticleGravity(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ParticleGravity);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ParticleGravity_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ParticleGravity_methods[]= {
    { "updateForce", _wrap_ParticleGravity_updateForce},
    {0,0}
};
static swig_lua_method swig_ParticleGravity_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ParticleGravity_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ParticleGravity_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ParticleGravity_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ParticleGravity_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ParticleGravity_Sf_SwigStatic = {
    "ParticleGravity",
    swig_ParticleGravity_Sf_SwigStatic_methods,
    swig_ParticleGravity_Sf_SwigStatic_attributes,
    swig_ParticleGravity_Sf_SwigStatic_constants,
    swig_ParticleGravity_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ParticleGravity_bases[] = {0,0};
static const char *swig_ParticleGravity_base_names[] = {"cyclone::ParticleForceGenerator *",0};
static swig_lua_class _wrap_class_ParticleGravity = { "ParticleGravity", "ParticleGravity", &SWIGTYPE_p_cyclone__ParticleGravity,_proxy__wrap_new_ParticleGravity, swig_delete_ParticleGravity, swig_ParticleGravity_methods, swig_ParticleGravity_attributes, &swig_ParticleGravity_Sf_SwigStatic, swig_ParticleGravity_meta, swig_ParticleGravity_bases, swig_ParticleGravity_base_names };

static int _wrap_new_ParticleDrag(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::real arg1 ;
  cyclone::real arg2 ;
  cyclone::ParticleDrag *result = 0 ;
  
  SWIG_check_num_args("cyclone::ParticleDrag::ParticleDrag",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cyclone::ParticleDrag::ParticleDrag",1,"cyclone::real");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::ParticleDrag::ParticleDrag",2,"cyclone::real");
  arg1 = (cyclone::real)lua_tonumber(L, 1);
  arg2 = (cyclone::real)lua_tonumber(L, 2);
  result = (cyclone::ParticleDrag *)new cyclone::ParticleDrag(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__ParticleDrag,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleDrag_updateForce(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleDrag *arg1 = (cyclone::ParticleDrag *) 0 ;
  cyclone::Particle *arg2 = (cyclone::Particle *) 0 ;
  cyclone::real arg3 ;
  
  SWIG_check_num_args("cyclone::ParticleDrag::updateForce",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleDrag::updateForce",1,"cyclone::ParticleDrag *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::ParticleDrag::updateForce",2,"cyclone::Particle *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::ParticleDrag::updateForce",3,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleDrag,0))){
    SWIG_fail_ptr("ParticleDrag_updateForce",1,SWIGTYPE_p_cyclone__ParticleDrag);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Particle,0))){
    SWIG_fail_ptr("ParticleDrag_updateForce",2,SWIGTYPE_p_cyclone__Particle);
  }
  
  arg3 = (cyclone::real)lua_tonumber(L, 3);
  (arg1)->updateForce(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ParticleDrag(void *obj) {
cyclone::ParticleDrag *arg1 = (cyclone::ParticleDrag *) obj;
delete arg1;
}
static int _proxy__wrap_new_ParticleDrag(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ParticleDrag);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ParticleDrag_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ParticleDrag_methods[]= {
    { "updateForce", _wrap_ParticleDrag_updateForce},
    {0,0}
};
static swig_lua_method swig_ParticleDrag_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ParticleDrag_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ParticleDrag_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ParticleDrag_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ParticleDrag_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ParticleDrag_Sf_SwigStatic = {
    "ParticleDrag",
    swig_ParticleDrag_Sf_SwigStatic_methods,
    swig_ParticleDrag_Sf_SwigStatic_attributes,
    swig_ParticleDrag_Sf_SwigStatic_constants,
    swig_ParticleDrag_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ParticleDrag_bases[] = {0,0};
static const char *swig_ParticleDrag_base_names[] = {"cyclone::ParticleForceGenerator *",0};
static swig_lua_class _wrap_class_ParticleDrag = { "ParticleDrag", "ParticleDrag", &SWIGTYPE_p_cyclone__ParticleDrag,_proxy__wrap_new_ParticleDrag, swig_delete_ParticleDrag, swig_ParticleDrag_methods, swig_ParticleDrag_attributes, &swig_ParticleDrag_Sf_SwigStatic, swig_ParticleDrag_meta, swig_ParticleDrag_bases, swig_ParticleDrag_base_names };

static int _wrap_new_ParticleAnchoredSpring__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleAnchoredSpring *result = 0 ;
  
  SWIG_check_num_args("cyclone::ParticleAnchoredSpring::ParticleAnchoredSpring",0,0)
  result = (cyclone::ParticleAnchoredSpring *)new cyclone::ParticleAnchoredSpring();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__ParticleAnchoredSpring,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParticleAnchoredSpring__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0 ;
  cyclone::real arg2 ;
  cyclone::real arg3 ;
  cyclone::ParticleAnchoredSpring *result = 0 ;
  
  SWIG_check_num_args("cyclone::ParticleAnchoredSpring::ParticleAnchoredSpring",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleAnchoredSpring::ParticleAnchoredSpring",1,"cyclone::Vector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::ParticleAnchoredSpring::ParticleAnchoredSpring",2,"cyclone::real");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::ParticleAnchoredSpring::ParticleAnchoredSpring",3,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("new_ParticleAnchoredSpring",1,SWIGTYPE_p_cyclone__Vector3);
  }
  
  arg2 = (cyclone::real)lua_tonumber(L, 2);
  arg3 = (cyclone::real)lua_tonumber(L, 3);
  result = (cyclone::ParticleAnchoredSpring *)new cyclone::ParticleAnchoredSpring(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__ParticleAnchoredSpring,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParticleAnchoredSpring(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ParticleAnchoredSpring__SWIG_0(L);
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_ParticleAnchoredSpring__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ParticleAnchoredSpring'\n"
    "  Possible C/C++ prototypes are:\n"
    "    cyclone::ParticleAnchoredSpring::ParticleAnchoredSpring()\n"
    "    cyclone::ParticleAnchoredSpring::ParticleAnchoredSpring(cyclone::Vector3 *,cyclone::real,cyclone::real)\n");
  lua_error(L);return 0;
}


static int _wrap_ParticleAnchoredSpring_getAnchor(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleAnchoredSpring *arg1 = (cyclone::ParticleAnchoredSpring *) 0 ;
  cyclone::Vector3 *result = 0 ;
  
  SWIG_check_num_args("cyclone::ParticleAnchoredSpring::getAnchor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleAnchoredSpring::getAnchor",1,"cyclone::ParticleAnchoredSpring const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleAnchoredSpring,0))){
    SWIG_fail_ptr("ParticleAnchoredSpring_getAnchor",1,SWIGTYPE_p_cyclone__ParticleAnchoredSpring);
  }
  
  result = (cyclone::Vector3 *)((cyclone::ParticleAnchoredSpring const *)arg1)->getAnchor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleAnchoredSpring_init(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleAnchoredSpring *arg1 = (cyclone::ParticleAnchoredSpring *) 0 ;
  cyclone::Vector3 *arg2 = (cyclone::Vector3 *) 0 ;
  cyclone::real arg3 ;
  cyclone::real arg4 ;
  
  SWIG_check_num_args("cyclone::ParticleAnchoredSpring::init",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleAnchoredSpring::init",1,"cyclone::ParticleAnchoredSpring *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::ParticleAnchoredSpring::init",2,"cyclone::Vector3 *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::ParticleAnchoredSpring::init",3,"cyclone::real");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cyclone::ParticleAnchoredSpring::init",4,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleAnchoredSpring,0))){
    SWIG_fail_ptr("ParticleAnchoredSpring_init",1,SWIGTYPE_p_cyclone__ParticleAnchoredSpring);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("ParticleAnchoredSpring_init",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  arg3 = (cyclone::real)lua_tonumber(L, 3);
  arg4 = (cyclone::real)lua_tonumber(L, 4);
  (arg1)->init(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleAnchoredSpring_updateForce(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleAnchoredSpring *arg1 = (cyclone::ParticleAnchoredSpring *) 0 ;
  cyclone::Particle *arg2 = (cyclone::Particle *) 0 ;
  cyclone::real arg3 ;
  
  SWIG_check_num_args("cyclone::ParticleAnchoredSpring::updateForce",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleAnchoredSpring::updateForce",1,"cyclone::ParticleAnchoredSpring *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::ParticleAnchoredSpring::updateForce",2,"cyclone::Particle *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::ParticleAnchoredSpring::updateForce",3,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleAnchoredSpring,0))){
    SWIG_fail_ptr("ParticleAnchoredSpring_updateForce",1,SWIGTYPE_p_cyclone__ParticleAnchoredSpring);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Particle,0))){
    SWIG_fail_ptr("ParticleAnchoredSpring_updateForce",2,SWIGTYPE_p_cyclone__Particle);
  }
  
  arg3 = (cyclone::real)lua_tonumber(L, 3);
  (arg1)->updateForce(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ParticleAnchoredSpring(void *obj) {
cyclone::ParticleAnchoredSpring *arg1 = (cyclone::ParticleAnchoredSpring *) obj;
delete arg1;
}
static int _proxy__wrap_new_ParticleAnchoredSpring(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ParticleAnchoredSpring);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ParticleAnchoredSpring_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ParticleAnchoredSpring_methods[]= {
    { "getAnchor", _wrap_ParticleAnchoredSpring_getAnchor},
    { "init", _wrap_ParticleAnchoredSpring_init},
    { "updateForce", _wrap_ParticleAnchoredSpring_updateForce},
    {0,0}
};
static swig_lua_method swig_ParticleAnchoredSpring_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ParticleAnchoredSpring_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ParticleAnchoredSpring_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ParticleAnchoredSpring_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ParticleAnchoredSpring_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ParticleAnchoredSpring_Sf_SwigStatic = {
    "ParticleAnchoredSpring",
    swig_ParticleAnchoredSpring_Sf_SwigStatic_methods,
    swig_ParticleAnchoredSpring_Sf_SwigStatic_attributes,
    swig_ParticleAnchoredSpring_Sf_SwigStatic_constants,
    swig_ParticleAnchoredSpring_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ParticleAnchoredSpring_bases[] = {0,0};
static const char *swig_ParticleAnchoredSpring_base_names[] = {"cyclone::ParticleForceGenerator *",0};
static swig_lua_class _wrap_class_ParticleAnchoredSpring = { "ParticleAnchoredSpring", "ParticleAnchoredSpring", &SWIGTYPE_p_cyclone__ParticleAnchoredSpring,_proxy__wrap_new_ParticleAnchoredSpring, swig_delete_ParticleAnchoredSpring, swig_ParticleAnchoredSpring_methods, swig_ParticleAnchoredSpring_attributes, &swig_ParticleAnchoredSpring_Sf_SwigStatic, swig_ParticleAnchoredSpring_meta, swig_ParticleAnchoredSpring_bases, swig_ParticleAnchoredSpring_base_names };

static int _wrap_ParticleAnchoredBungee_updateForce(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleAnchoredBungee *arg1 = (cyclone::ParticleAnchoredBungee *) 0 ;
  cyclone::Particle *arg2 = (cyclone::Particle *) 0 ;
  cyclone::real arg3 ;
  
  SWIG_check_num_args("cyclone::ParticleAnchoredBungee::updateForce",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleAnchoredBungee::updateForce",1,"cyclone::ParticleAnchoredBungee *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::ParticleAnchoredBungee::updateForce",2,"cyclone::Particle *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::ParticleAnchoredBungee::updateForce",3,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleAnchoredBungee,0))){
    SWIG_fail_ptr("ParticleAnchoredBungee_updateForce",1,SWIGTYPE_p_cyclone__ParticleAnchoredBungee);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Particle,0))){
    SWIG_fail_ptr("ParticleAnchoredBungee_updateForce",2,SWIGTYPE_p_cyclone__Particle);
  }
  
  arg3 = (cyclone::real)lua_tonumber(L, 3);
  (arg1)->updateForce(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParticleAnchoredBungee(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleAnchoredBungee *result = 0 ;
  
  SWIG_check_num_args("cyclone::ParticleAnchoredBungee::ParticleAnchoredBungee",0,0)
  result = (cyclone::ParticleAnchoredBungee *)new cyclone::ParticleAnchoredBungee();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__ParticleAnchoredBungee,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ParticleAnchoredBungee(void *obj) {
cyclone::ParticleAnchoredBungee *arg1 = (cyclone::ParticleAnchoredBungee *) obj;
delete arg1;
}
static int _proxy__wrap_new_ParticleAnchoredBungee(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ParticleAnchoredBungee);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ParticleAnchoredBungee_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ParticleAnchoredBungee_methods[]= {
    { "updateForce", _wrap_ParticleAnchoredBungee_updateForce},
    {0,0}
};
static swig_lua_method swig_ParticleAnchoredBungee_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ParticleAnchoredBungee_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ParticleAnchoredBungee_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ParticleAnchoredBungee_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ParticleAnchoredBungee_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ParticleAnchoredBungee_Sf_SwigStatic = {
    "ParticleAnchoredBungee",
    swig_ParticleAnchoredBungee_Sf_SwigStatic_methods,
    swig_ParticleAnchoredBungee_Sf_SwigStatic_attributes,
    swig_ParticleAnchoredBungee_Sf_SwigStatic_constants,
    swig_ParticleAnchoredBungee_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ParticleAnchoredBungee_bases[] = {0,0};
static const char *swig_ParticleAnchoredBungee_base_names[] = {"cyclone::ParticleAnchoredSpring *",0};
static swig_lua_class _wrap_class_ParticleAnchoredBungee = { "ParticleAnchoredBungee", "ParticleAnchoredBungee", &SWIGTYPE_p_cyclone__ParticleAnchoredBungee,_proxy__wrap_new_ParticleAnchoredBungee, swig_delete_ParticleAnchoredBungee, swig_ParticleAnchoredBungee_methods, swig_ParticleAnchoredBungee_attributes, &swig_ParticleAnchoredBungee_Sf_SwigStatic, swig_ParticleAnchoredBungee_meta, swig_ParticleAnchoredBungee_bases, swig_ParticleAnchoredBungee_base_names };

static int _wrap_new_ParticleFakeSpring(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0 ;
  cyclone::real arg2 ;
  cyclone::real arg3 ;
  cyclone::ParticleFakeSpring *result = 0 ;
  
  SWIG_check_num_args("cyclone::ParticleFakeSpring::ParticleFakeSpring",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleFakeSpring::ParticleFakeSpring",1,"cyclone::Vector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::ParticleFakeSpring::ParticleFakeSpring",2,"cyclone::real");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::ParticleFakeSpring::ParticleFakeSpring",3,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("new_ParticleFakeSpring",1,SWIGTYPE_p_cyclone__Vector3);
  }
  
  arg2 = (cyclone::real)lua_tonumber(L, 2);
  arg3 = (cyclone::real)lua_tonumber(L, 3);
  result = (cyclone::ParticleFakeSpring *)new cyclone::ParticleFakeSpring(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__ParticleFakeSpring,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleFakeSpring_updateForce(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleFakeSpring *arg1 = (cyclone::ParticleFakeSpring *) 0 ;
  cyclone::Particle *arg2 = (cyclone::Particle *) 0 ;
  cyclone::real arg3 ;
  
  SWIG_check_num_args("cyclone::ParticleFakeSpring::updateForce",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleFakeSpring::updateForce",1,"cyclone::ParticleFakeSpring *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::ParticleFakeSpring::updateForce",2,"cyclone::Particle *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::ParticleFakeSpring::updateForce",3,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleFakeSpring,0))){
    SWIG_fail_ptr("ParticleFakeSpring_updateForce",1,SWIGTYPE_p_cyclone__ParticleFakeSpring);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Particle,0))){
    SWIG_fail_ptr("ParticleFakeSpring_updateForce",2,SWIGTYPE_p_cyclone__Particle);
  }
  
  arg3 = (cyclone::real)lua_tonumber(L, 3);
  (arg1)->updateForce(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ParticleFakeSpring(void *obj) {
cyclone::ParticleFakeSpring *arg1 = (cyclone::ParticleFakeSpring *) obj;
delete arg1;
}
static int _proxy__wrap_new_ParticleFakeSpring(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ParticleFakeSpring);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ParticleFakeSpring_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ParticleFakeSpring_methods[]= {
    { "updateForce", _wrap_ParticleFakeSpring_updateForce},
    {0,0}
};
static swig_lua_method swig_ParticleFakeSpring_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ParticleFakeSpring_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ParticleFakeSpring_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ParticleFakeSpring_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ParticleFakeSpring_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ParticleFakeSpring_Sf_SwigStatic = {
    "ParticleFakeSpring",
    swig_ParticleFakeSpring_Sf_SwigStatic_methods,
    swig_ParticleFakeSpring_Sf_SwigStatic_attributes,
    swig_ParticleFakeSpring_Sf_SwigStatic_constants,
    swig_ParticleFakeSpring_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ParticleFakeSpring_bases[] = {0,0};
static const char *swig_ParticleFakeSpring_base_names[] = {"cyclone::ParticleForceGenerator *",0};
static swig_lua_class _wrap_class_ParticleFakeSpring = { "ParticleFakeSpring", "ParticleFakeSpring", &SWIGTYPE_p_cyclone__ParticleFakeSpring,_proxy__wrap_new_ParticleFakeSpring, swig_delete_ParticleFakeSpring, swig_ParticleFakeSpring_methods, swig_ParticleFakeSpring_attributes, &swig_ParticleFakeSpring_Sf_SwigStatic, swig_ParticleFakeSpring_meta, swig_ParticleFakeSpring_bases, swig_ParticleFakeSpring_base_names };

static int _wrap_new_ParticleSpring(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Particle *arg1 = (cyclone::Particle *) 0 ;
  cyclone::real arg2 ;
  cyclone::real arg3 ;
  cyclone::ParticleSpring *result = 0 ;
  
  SWIG_check_num_args("cyclone::ParticleSpring::ParticleSpring",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleSpring::ParticleSpring",1,"cyclone::Particle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::ParticleSpring::ParticleSpring",2,"cyclone::real");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::ParticleSpring::ParticleSpring",3,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Particle,0))){
    SWIG_fail_ptr("new_ParticleSpring",1,SWIGTYPE_p_cyclone__Particle);
  }
  
  arg2 = (cyclone::real)lua_tonumber(L, 2);
  arg3 = (cyclone::real)lua_tonumber(L, 3);
  result = (cyclone::ParticleSpring *)new cyclone::ParticleSpring(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__ParticleSpring,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSpring_updateForce(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleSpring *arg1 = (cyclone::ParticleSpring *) 0 ;
  cyclone::Particle *arg2 = (cyclone::Particle *) 0 ;
  cyclone::real arg3 ;
  
  SWIG_check_num_args("cyclone::ParticleSpring::updateForce",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleSpring::updateForce",1,"cyclone::ParticleSpring *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::ParticleSpring::updateForce",2,"cyclone::Particle *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::ParticleSpring::updateForce",3,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleSpring,0))){
    SWIG_fail_ptr("ParticleSpring_updateForce",1,SWIGTYPE_p_cyclone__ParticleSpring);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Particle,0))){
    SWIG_fail_ptr("ParticleSpring_updateForce",2,SWIGTYPE_p_cyclone__Particle);
  }
  
  arg3 = (cyclone::real)lua_tonumber(L, 3);
  (arg1)->updateForce(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ParticleSpring(void *obj) {
cyclone::ParticleSpring *arg1 = (cyclone::ParticleSpring *) obj;
delete arg1;
}
static int _proxy__wrap_new_ParticleSpring(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ParticleSpring);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ParticleSpring_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ParticleSpring_methods[]= {
    { "updateForce", _wrap_ParticleSpring_updateForce},
    {0,0}
};
static swig_lua_method swig_ParticleSpring_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ParticleSpring_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ParticleSpring_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ParticleSpring_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ParticleSpring_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ParticleSpring_Sf_SwigStatic = {
    "ParticleSpring",
    swig_ParticleSpring_Sf_SwigStatic_methods,
    swig_ParticleSpring_Sf_SwigStatic_attributes,
    swig_ParticleSpring_Sf_SwigStatic_constants,
    swig_ParticleSpring_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ParticleSpring_bases[] = {0,0};
static const char *swig_ParticleSpring_base_names[] = {"cyclone::ParticleForceGenerator *",0};
static swig_lua_class _wrap_class_ParticleSpring = { "ParticleSpring", "ParticleSpring", &SWIGTYPE_p_cyclone__ParticleSpring,_proxy__wrap_new_ParticleSpring, swig_delete_ParticleSpring, swig_ParticleSpring_methods, swig_ParticleSpring_attributes, &swig_ParticleSpring_Sf_SwigStatic, swig_ParticleSpring_meta, swig_ParticleSpring_bases, swig_ParticleSpring_base_names };

static int _wrap_new_ParticleBungee(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Particle *arg1 = (cyclone::Particle *) 0 ;
  cyclone::real arg2 ;
  cyclone::real arg3 ;
  cyclone::ParticleBungee *result = 0 ;
  
  SWIG_check_num_args("cyclone::ParticleBungee::ParticleBungee",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleBungee::ParticleBungee",1,"cyclone::Particle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::ParticleBungee::ParticleBungee",2,"cyclone::real");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::ParticleBungee::ParticleBungee",3,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Particle,0))){
    SWIG_fail_ptr("new_ParticleBungee",1,SWIGTYPE_p_cyclone__Particle);
  }
  
  arg2 = (cyclone::real)lua_tonumber(L, 2);
  arg3 = (cyclone::real)lua_tonumber(L, 3);
  result = (cyclone::ParticleBungee *)new cyclone::ParticleBungee(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__ParticleBungee,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleBungee_updateForce(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleBungee *arg1 = (cyclone::ParticleBungee *) 0 ;
  cyclone::Particle *arg2 = (cyclone::Particle *) 0 ;
  cyclone::real arg3 ;
  
  SWIG_check_num_args("cyclone::ParticleBungee::updateForce",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleBungee::updateForce",1,"cyclone::ParticleBungee *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::ParticleBungee::updateForce",2,"cyclone::Particle *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::ParticleBungee::updateForce",3,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleBungee,0))){
    SWIG_fail_ptr("ParticleBungee_updateForce",1,SWIGTYPE_p_cyclone__ParticleBungee);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Particle,0))){
    SWIG_fail_ptr("ParticleBungee_updateForce",2,SWIGTYPE_p_cyclone__Particle);
  }
  
  arg3 = (cyclone::real)lua_tonumber(L, 3);
  (arg1)->updateForce(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ParticleBungee(void *obj) {
cyclone::ParticleBungee *arg1 = (cyclone::ParticleBungee *) obj;
delete arg1;
}
static int _proxy__wrap_new_ParticleBungee(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ParticleBungee);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ParticleBungee_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ParticleBungee_methods[]= {
    { "updateForce", _wrap_ParticleBungee_updateForce},
    {0,0}
};
static swig_lua_method swig_ParticleBungee_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ParticleBungee_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ParticleBungee_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ParticleBungee_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ParticleBungee_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ParticleBungee_Sf_SwigStatic = {
    "ParticleBungee",
    swig_ParticleBungee_Sf_SwigStatic_methods,
    swig_ParticleBungee_Sf_SwigStatic_attributes,
    swig_ParticleBungee_Sf_SwigStatic_constants,
    swig_ParticleBungee_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ParticleBungee_bases[] = {0,0};
static const char *swig_ParticleBungee_base_names[] = {"cyclone::ParticleForceGenerator *",0};
static swig_lua_class _wrap_class_ParticleBungee = { "ParticleBungee", "ParticleBungee", &SWIGTYPE_p_cyclone__ParticleBungee,_proxy__wrap_new_ParticleBungee, swig_delete_ParticleBungee, swig_ParticleBungee_methods, swig_ParticleBungee_attributes, &swig_ParticleBungee_Sf_SwigStatic, swig_ParticleBungee_meta, swig_ParticleBungee_bases, swig_ParticleBungee_base_names };

static int _wrap_new_ParticleBuoyancy__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::real arg1 ;
  cyclone::real arg2 ;
  cyclone::real arg3 ;
  cyclone::real arg4 ;
  cyclone::ParticleBuoyancy *result = 0 ;
  
  SWIG_check_num_args("cyclone::ParticleBuoyancy::ParticleBuoyancy",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cyclone::ParticleBuoyancy::ParticleBuoyancy",1,"cyclone::real");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::ParticleBuoyancy::ParticleBuoyancy",2,"cyclone::real");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::ParticleBuoyancy::ParticleBuoyancy",3,"cyclone::real");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cyclone::ParticleBuoyancy::ParticleBuoyancy",4,"cyclone::real");
  arg1 = (cyclone::real)lua_tonumber(L, 1);
  arg2 = (cyclone::real)lua_tonumber(L, 2);
  arg3 = (cyclone::real)lua_tonumber(L, 3);
  arg4 = (cyclone::real)lua_tonumber(L, 4);
  result = (cyclone::ParticleBuoyancy *)new cyclone::ParticleBuoyancy(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__ParticleBuoyancy,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParticleBuoyancy__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::real arg1 ;
  cyclone::real arg2 ;
  cyclone::real arg3 ;
  cyclone::ParticleBuoyancy *result = 0 ;
  
  SWIG_check_num_args("cyclone::ParticleBuoyancy::ParticleBuoyancy",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cyclone::ParticleBuoyancy::ParticleBuoyancy",1,"cyclone::real");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::ParticleBuoyancy::ParticleBuoyancy",2,"cyclone::real");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::ParticleBuoyancy::ParticleBuoyancy",3,"cyclone::real");
  arg1 = (cyclone::real)lua_tonumber(L, 1);
  arg2 = (cyclone::real)lua_tonumber(L, 2);
  arg3 = (cyclone::real)lua_tonumber(L, 3);
  result = (cyclone::ParticleBuoyancy *)new cyclone::ParticleBuoyancy(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__ParticleBuoyancy,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParticleBuoyancy(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_ParticleBuoyancy__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ParticleBuoyancy__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ParticleBuoyancy'\n"
    "  Possible C/C++ prototypes are:\n"
    "    cyclone::ParticleBuoyancy::ParticleBuoyancy(cyclone::real,cyclone::real,cyclone::real,cyclone::real)\n"
    "    cyclone::ParticleBuoyancy::ParticleBuoyancy(cyclone::real,cyclone::real,cyclone::real)\n");
  lua_error(L);return 0;
}


static int _wrap_ParticleBuoyancy_updateForce(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleBuoyancy *arg1 = (cyclone::ParticleBuoyancy *) 0 ;
  cyclone::Particle *arg2 = (cyclone::Particle *) 0 ;
  cyclone::real arg3 ;
  
  SWIG_check_num_args("cyclone::ParticleBuoyancy::updateForce",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleBuoyancy::updateForce",1,"cyclone::ParticleBuoyancy *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::ParticleBuoyancy::updateForce",2,"cyclone::Particle *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::ParticleBuoyancy::updateForce",3,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleBuoyancy,0))){
    SWIG_fail_ptr("ParticleBuoyancy_updateForce",1,SWIGTYPE_p_cyclone__ParticleBuoyancy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Particle,0))){
    SWIG_fail_ptr("ParticleBuoyancy_updateForce",2,SWIGTYPE_p_cyclone__Particle);
  }
  
  arg3 = (cyclone::real)lua_tonumber(L, 3);
  (arg1)->updateForce(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ParticleBuoyancy(void *obj) {
cyclone::ParticleBuoyancy *arg1 = (cyclone::ParticleBuoyancy *) obj;
delete arg1;
}
static int _proxy__wrap_new_ParticleBuoyancy(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ParticleBuoyancy);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ParticleBuoyancy_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ParticleBuoyancy_methods[]= {
    { "updateForce", _wrap_ParticleBuoyancy_updateForce},
    {0,0}
};
static swig_lua_method swig_ParticleBuoyancy_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ParticleBuoyancy_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ParticleBuoyancy_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ParticleBuoyancy_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ParticleBuoyancy_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ParticleBuoyancy_Sf_SwigStatic = {
    "ParticleBuoyancy",
    swig_ParticleBuoyancy_Sf_SwigStatic_methods,
    swig_ParticleBuoyancy_Sf_SwigStatic_attributes,
    swig_ParticleBuoyancy_Sf_SwigStatic_constants,
    swig_ParticleBuoyancy_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ParticleBuoyancy_bases[] = {0,0};
static const char *swig_ParticleBuoyancy_base_names[] = {"cyclone::ParticleForceGenerator *",0};
static swig_lua_class _wrap_class_ParticleBuoyancy = { "ParticleBuoyancy", "ParticleBuoyancy", &SWIGTYPE_p_cyclone__ParticleBuoyancy,_proxy__wrap_new_ParticleBuoyancy, swig_delete_ParticleBuoyancy, swig_ParticleBuoyancy_methods, swig_ParticleBuoyancy_attributes, &swig_ParticleBuoyancy_Sf_SwigStatic, swig_ParticleBuoyancy_meta, swig_ParticleBuoyancy_bases, swig_ParticleBuoyancy_base_names };

static int _wrap_ParticleForceRegistry_add(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleForceRegistry *arg1 = (cyclone::ParticleForceRegistry *) 0 ;
  cyclone::Particle *arg2 = (cyclone::Particle *) 0 ;
  cyclone::ParticleForceGenerator *arg3 = (cyclone::ParticleForceGenerator *) 0 ;
  
  SWIG_check_num_args("cyclone::ParticleForceRegistry::add",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleForceRegistry::add",1,"cyclone::ParticleForceRegistry *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::ParticleForceRegistry::add",2,"cyclone::Particle *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cyclone::ParticleForceRegistry::add",3,"cyclone::ParticleForceGenerator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleForceRegistry,0))){
    SWIG_fail_ptr("ParticleForceRegistry_add",1,SWIGTYPE_p_cyclone__ParticleForceRegistry);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Particle,0))){
    SWIG_fail_ptr("ParticleForceRegistry_add",2,SWIGTYPE_p_cyclone__Particle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_cyclone__ParticleForceGenerator,0))){
    SWIG_fail_ptr("ParticleForceRegistry_add",3,SWIGTYPE_p_cyclone__ParticleForceGenerator);
  }
  
  (arg1)->add(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleForceRegistry_remove(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleForceRegistry *arg1 = (cyclone::ParticleForceRegistry *) 0 ;
  cyclone::Particle *arg2 = (cyclone::Particle *) 0 ;
  cyclone::ParticleForceGenerator *arg3 = (cyclone::ParticleForceGenerator *) 0 ;
  
  SWIG_check_num_args("cyclone::ParticleForceRegistry::remove",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleForceRegistry::remove",1,"cyclone::ParticleForceRegistry *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::ParticleForceRegistry::remove",2,"cyclone::Particle *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cyclone::ParticleForceRegistry::remove",3,"cyclone::ParticleForceGenerator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleForceRegistry,0))){
    SWIG_fail_ptr("ParticleForceRegistry_remove",1,SWIGTYPE_p_cyclone__ParticleForceRegistry);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Particle,0))){
    SWIG_fail_ptr("ParticleForceRegistry_remove",2,SWIGTYPE_p_cyclone__Particle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_cyclone__ParticleForceGenerator,0))){
    SWIG_fail_ptr("ParticleForceRegistry_remove",3,SWIGTYPE_p_cyclone__ParticleForceGenerator);
  }
  
  (arg1)->remove(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleForceRegistry_clear(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleForceRegistry *arg1 = (cyclone::ParticleForceRegistry *) 0 ;
  
  SWIG_check_num_args("cyclone::ParticleForceRegistry::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleForceRegistry::clear",1,"cyclone::ParticleForceRegistry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleForceRegistry,0))){
    SWIG_fail_ptr("ParticleForceRegistry_clear",1,SWIGTYPE_p_cyclone__ParticleForceRegistry);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleForceRegistry_updateForces(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleForceRegistry *arg1 = (cyclone::ParticleForceRegistry *) 0 ;
  cyclone::real arg2 ;
  
  SWIG_check_num_args("cyclone::ParticleForceRegistry::updateForces",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleForceRegistry::updateForces",1,"cyclone::ParticleForceRegistry *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::ParticleForceRegistry::updateForces",2,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleForceRegistry,0))){
    SWIG_fail_ptr("ParticleForceRegistry_updateForces",1,SWIGTYPE_p_cyclone__ParticleForceRegistry);
  }
  
  arg2 = (cyclone::real)lua_tonumber(L, 2);
  (arg1)->updateForces(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParticleForceRegistry(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleForceRegistry *result = 0 ;
  
  SWIG_check_num_args("cyclone::ParticleForceRegistry::ParticleForceRegistry",0,0)
  result = (cyclone::ParticleForceRegistry *)new cyclone::ParticleForceRegistry();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__ParticleForceRegistry,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ParticleForceRegistry(void *obj) {
cyclone::ParticleForceRegistry *arg1 = (cyclone::ParticleForceRegistry *) obj;
delete arg1;
}
static int _proxy__wrap_new_ParticleForceRegistry(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ParticleForceRegistry);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ParticleForceRegistry_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ParticleForceRegistry_methods[]= {
    { "add", _wrap_ParticleForceRegistry_add},
    { "remove", _wrap_ParticleForceRegistry_remove},
    { "clear", _wrap_ParticleForceRegistry_clear},
    { "updateForces", _wrap_ParticleForceRegistry_updateForces},
    {0,0}
};
static swig_lua_method swig_ParticleForceRegistry_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ParticleForceRegistry_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ParticleForceRegistry_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ParticleForceRegistry_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ParticleForceRegistry_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ParticleForceRegistry_Sf_SwigStatic = {
    "ParticleForceRegistry",
    swig_ParticleForceRegistry_Sf_SwigStatic_methods,
    swig_ParticleForceRegistry_Sf_SwigStatic_attributes,
    swig_ParticleForceRegistry_Sf_SwigStatic_constants,
    swig_ParticleForceRegistry_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ParticleForceRegistry_bases[] = {0};
static const char *swig_ParticleForceRegistry_base_names[] = {0};
static swig_lua_class _wrap_class_ParticleForceRegistry = { "ParticleForceRegistry", "ParticleForceRegistry", &SWIGTYPE_p_cyclone__ParticleForceRegistry,_proxy__wrap_new_ParticleForceRegistry, swig_delete_ParticleForceRegistry, swig_ParticleForceRegistry_methods, swig_ParticleForceRegistry_attributes, &swig_ParticleForceRegistry_Sf_SwigStatic, swig_ParticleForceRegistry_meta, swig_ParticleForceRegistry_bases, swig_ParticleForceRegistry_base_names };

static int _wrap_new_ParticleWorld__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  cyclone::ParticleWorld *result = 0 ;
  
  SWIG_check_num_args("cyclone::ParticleWorld::ParticleWorld",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cyclone::ParticleWorld::ParticleWorld",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::ParticleWorld::ParticleWorld",2,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (cyclone::ParticleWorld *)new cyclone::ParticleWorld(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__ParticleWorld,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParticleWorld__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  cyclone::ParticleWorld *result = 0 ;
  
  SWIG_check_num_args("cyclone::ParticleWorld::ParticleWorld",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cyclone::ParticleWorld::ParticleWorld",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (cyclone::ParticleWorld *)new cyclone::ParticleWorld(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__ParticleWorld,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParticleWorld(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_ParticleWorld__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_ParticleWorld__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ParticleWorld'\n"
    "  Possible C/C++ prototypes are:\n"
    "    cyclone::ParticleWorld::ParticleWorld(unsigned int,unsigned int)\n"
    "    cyclone::ParticleWorld::ParticleWorld(unsigned int)\n");
  lua_error(L);return 0;
}


static int _wrap_ParticleWorld_generateContacts(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleWorld *arg1 = (cyclone::ParticleWorld *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("cyclone::ParticleWorld::generateContacts",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleWorld::generateContacts",1,"cyclone::ParticleWorld *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleWorld,0))){
    SWIG_fail_ptr("ParticleWorld_generateContacts",1,SWIGTYPE_p_cyclone__ParticleWorld);
  }
  
  result = (unsigned int)(arg1)->generateContacts();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleWorld_integrate(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleWorld *arg1 = (cyclone::ParticleWorld *) 0 ;
  cyclone::real arg2 ;
  
  SWIG_check_num_args("cyclone::ParticleWorld::integrate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleWorld::integrate",1,"cyclone::ParticleWorld *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::ParticleWorld::integrate",2,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleWorld,0))){
    SWIG_fail_ptr("ParticleWorld_integrate",1,SWIGTYPE_p_cyclone__ParticleWorld);
  }
  
  arg2 = (cyclone::real)lua_tonumber(L, 2);
  (arg1)->integrate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleWorld_runPhysics(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleWorld *arg1 = (cyclone::ParticleWorld *) 0 ;
  cyclone::real arg2 ;
  
  SWIG_check_num_args("cyclone::ParticleWorld::runPhysics",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleWorld::runPhysics",1,"cyclone::ParticleWorld *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::ParticleWorld::runPhysics",2,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleWorld,0))){
    SWIG_fail_ptr("ParticleWorld_runPhysics",1,SWIGTYPE_p_cyclone__ParticleWorld);
  }
  
  arg2 = (cyclone::real)lua_tonumber(L, 2);
  (arg1)->runPhysics(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleWorld_startFrame(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleWorld *arg1 = (cyclone::ParticleWorld *) 0 ;
  
  SWIG_check_num_args("cyclone::ParticleWorld::startFrame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleWorld::startFrame",1,"cyclone::ParticleWorld *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleWorld,0))){
    SWIG_fail_ptr("ParticleWorld_startFrame",1,SWIGTYPE_p_cyclone__ParticleWorld);
  }
  
  (arg1)->startFrame();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleWorld_getParticles(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleWorld *arg1 = (cyclone::ParticleWorld *) 0 ;
  cyclone::ParticleWorld::Particles *result = 0 ;
  
  SWIG_check_num_args("cyclone::ParticleWorld::getParticles",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleWorld::getParticles",1,"cyclone::ParticleWorld *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleWorld,0))){
    SWIG_fail_ptr("ParticleWorld_getParticles",1,SWIGTYPE_p_cyclone__ParticleWorld);
  }
  
  result = (cyclone::ParticleWorld::Particles *) &(arg1)->getParticles();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_cyclone__Particle_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleWorld_getContactGenerators(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleWorld *arg1 = (cyclone::ParticleWorld *) 0 ;
  cyclone::ParticleWorld::ContactGenerators *result = 0 ;
  
  SWIG_check_num_args("cyclone::ParticleWorld::getContactGenerators",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleWorld::getContactGenerators",1,"cyclone::ParticleWorld *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleWorld,0))){
    SWIG_fail_ptr("ParticleWorld_getContactGenerators",1,SWIGTYPE_p_cyclone__ParticleWorld);
  }
  
  result = (cyclone::ParticleWorld::ContactGenerators *) &(arg1)->getContactGenerators();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_cyclone__ParticleContactGenerator_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleWorld_getForceRegistry(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleWorld *arg1 = (cyclone::ParticleWorld *) 0 ;
  cyclone::ParticleForceRegistry *result = 0 ;
  
  SWIG_check_num_args("cyclone::ParticleWorld::getForceRegistry",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleWorld::getForceRegistry",1,"cyclone::ParticleWorld *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleWorld,0))){
    SWIG_fail_ptr("ParticleWorld_getForceRegistry",1,SWIGTYPE_p_cyclone__ParticleWorld);
  }
  
  result = (cyclone::ParticleForceRegistry *) &(arg1)->getForceRegistry();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__ParticleForceRegistry,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleWorld_appendContactGenerator(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleWorld *arg1 = (cyclone::ParticleWorld *) 0 ;
  cyclone::ParticleContactGenerator *arg2 = 0 ;
  
  SWIG_check_num_args("cyclone::ParticleWorld::appendContactGenerator",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleWorld::appendContactGenerator",1,"cyclone::ParticleWorld *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::ParticleWorld::appendContactGenerator",2,"cyclone::ParticleContactGenerator &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleWorld,0))){
    SWIG_fail_ptr("ParticleWorld_appendContactGenerator",1,SWIGTYPE_p_cyclone__ParticleWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__ParticleContactGenerator,0))){
    SWIG_fail_ptr("ParticleWorld_appendContactGenerator",2,SWIGTYPE_p_cyclone__ParticleContactGenerator);
  }
  
  (arg1)->appendContactGenerator(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleWorld_appendParticles(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ParticleWorld *arg1 = (cyclone::ParticleWorld *) 0 ;
  cyclone::Particle *arg2 = 0 ;
  
  SWIG_check_num_args("cyclone::ParticleWorld::appendParticles",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ParticleWorld::appendParticles",1,"cyclone::ParticleWorld *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::ParticleWorld::appendParticles",2,"cyclone::Particle &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ParticleWorld,0))){
    SWIG_fail_ptr("ParticleWorld_appendParticles",1,SWIGTYPE_p_cyclone__ParticleWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Particle,0))){
    SWIG_fail_ptr("ParticleWorld_appendParticles",2,SWIGTYPE_p_cyclone__Particle);
  }
  
  (arg1)->appendParticles(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ParticleWorld(void *obj) {
cyclone::ParticleWorld *arg1 = (cyclone::ParticleWorld *) obj;
delete arg1;
}
static int _proxy__wrap_new_ParticleWorld(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ParticleWorld);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ParticleWorld_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ParticleWorld_methods[]= {
    { "generateContacts", _wrap_ParticleWorld_generateContacts},
    { "integrate", _wrap_ParticleWorld_integrate},
    { "runPhysics", _wrap_ParticleWorld_runPhysics},
    { "startFrame", _wrap_ParticleWorld_startFrame},
    { "getParticles", _wrap_ParticleWorld_getParticles},
    { "getContactGenerators", _wrap_ParticleWorld_getContactGenerators},
    { "getForceRegistry", _wrap_ParticleWorld_getForceRegistry},
    { "appendContactGenerator", _wrap_ParticleWorld_appendContactGenerator},
    { "appendParticles", _wrap_ParticleWorld_appendParticles},
    {0,0}
};
static swig_lua_method swig_ParticleWorld_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ParticleWorld_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ParticleWorld_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ParticleWorld_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ParticleWorld_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ParticleWorld_Sf_SwigStatic = {
    "ParticleWorld",
    swig_ParticleWorld_Sf_SwigStatic_methods,
    swig_ParticleWorld_Sf_SwigStatic_attributes,
    swig_ParticleWorld_Sf_SwigStatic_constants,
    swig_ParticleWorld_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ParticleWorld_bases[] = {0};
static const char *swig_ParticleWorld_base_names[] = {0};
static swig_lua_class _wrap_class_ParticleWorld = { "ParticleWorld", "ParticleWorld", &SWIGTYPE_p_cyclone__ParticleWorld,_proxy__wrap_new_ParticleWorld, swig_delete_ParticleWorld, swig_ParticleWorld_methods, swig_ParticleWorld_attributes, &swig_ParticleWorld_Sf_SwigStatic, swig_ParticleWorld_meta, swig_ParticleWorld_bases, swig_ParticleWorld_base_names };

static int _wrap_GroundContacts_init(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::GroundContacts *arg1 = (cyclone::GroundContacts *) 0 ;
  cyclone::ParticleWorld::Particles *arg2 = (cyclone::ParticleWorld::Particles *) 0 ;
  
  SWIG_check_num_args("cyclone::GroundContacts::init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::GroundContacts::init",1,"cyclone::GroundContacts *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::GroundContacts::init",2,"cyclone::ParticleWorld::Particles *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__GroundContacts,0))){
    SWIG_fail_ptr("GroundContacts_init",1,SWIGTYPE_p_cyclone__GroundContacts);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_cyclone__Particle_p_t,0))){
    SWIG_fail_ptr("GroundContacts_init",2,SWIGTYPE_p_std__vectorT_cyclone__Particle_p_t);
  }
  
  (arg1)->init(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GroundContacts_addContact(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::GroundContacts *arg1 = (cyclone::GroundContacts *) 0 ;
  cyclone::ParticleContact *arg2 = (cyclone::ParticleContact *) 0 ;
  unsigned int arg3 ;
  unsigned int result;
  
  SWIG_check_num_args("cyclone::GroundContacts::addContact",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::GroundContacts::addContact",1,"cyclone::GroundContacts const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::GroundContacts::addContact",2,"cyclone::ParticleContact *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::GroundContacts::addContact",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__GroundContacts,0))){
    SWIG_fail_ptr("GroundContacts_addContact",1,SWIGTYPE_p_cyclone__GroundContacts);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__ParticleContact,0))){
    SWIG_fail_ptr("GroundContacts_addContact",2,SWIGTYPE_p_cyclone__ParticleContact);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (unsigned int)((cyclone::GroundContacts const *)arg1)->addContact(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GroundContacts(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::GroundContacts *result = 0 ;
  
  SWIG_check_num_args("cyclone::GroundContacts::GroundContacts",0,0)
  result = (cyclone::GroundContacts *)new cyclone::GroundContacts();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__GroundContacts,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_GroundContacts(void *obj) {
cyclone::GroundContacts *arg1 = (cyclone::GroundContacts *) obj;
delete arg1;
}
static int _proxy__wrap_new_GroundContacts(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_GroundContacts);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_GroundContacts_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_GroundContacts_methods[]= {
    { "init", _wrap_GroundContacts_init},
    { "addContact", _wrap_GroundContacts_addContact},
    {0,0}
};
static swig_lua_method swig_GroundContacts_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_GroundContacts_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_GroundContacts_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_GroundContacts_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_GroundContacts_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_GroundContacts_Sf_SwigStatic = {
    "GroundContacts",
    swig_GroundContacts_Sf_SwigStatic_methods,
    swig_GroundContacts_Sf_SwigStatic_attributes,
    swig_GroundContacts_Sf_SwigStatic_constants,
    swig_GroundContacts_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_GroundContacts_bases[] = {0,0};
static const char *swig_GroundContacts_base_names[] = {"cyclone::ParticleContactGenerator *",0};
static swig_lua_class _wrap_class_GroundContacts = { "GroundContacts", "GroundContacts", &SWIGTYPE_p_cyclone__GroundContacts,_proxy__wrap_new_GroundContacts, swig_delete_GroundContacts, swig_GroundContacts_methods, swig_GroundContacts_attributes, &swig_GroundContacts_Sf_SwigStatic, swig_GroundContacts_meta, swig_GroundContacts_bases, swig_GroundContacts_base_names };

static int _wrap_CollisionPrimitive_body_set(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::CollisionPrimitive *arg1 = (cyclone::CollisionPrimitive *) 0 ;
  cyclone::RigidBody *arg2 = (cyclone::RigidBody *) 0 ;
  
  SWIG_check_num_args("cyclone::CollisionPrimitive::body",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::CollisionPrimitive::body",1,"cyclone::CollisionPrimitive *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::CollisionPrimitive::body",2,"cyclone::RigidBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__CollisionPrimitive,0))){
    SWIG_fail_ptr("CollisionPrimitive_body_set",1,SWIGTYPE_p_cyclone__CollisionPrimitive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__RigidBody,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("CollisionPrimitive_body_set",2,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  if (arg1) (arg1)->body = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionPrimitive_body_get(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::CollisionPrimitive *arg1 = (cyclone::CollisionPrimitive *) 0 ;
  cyclone::RigidBody *result = 0 ;
  
  SWIG_check_num_args("cyclone::CollisionPrimitive::body",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::CollisionPrimitive::body",1,"cyclone::CollisionPrimitive *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__CollisionPrimitive,0))){
    SWIG_fail_ptr("CollisionPrimitive_body_get",1,SWIGTYPE_p_cyclone__CollisionPrimitive);
  }
  
  result = (cyclone::RigidBody *) ((arg1)->body);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__RigidBody,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionPrimitive_offset_set(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::CollisionPrimitive *arg1 = (cyclone::CollisionPrimitive *) 0 ;
  cyclone::Matrix4 *arg2 = (cyclone::Matrix4 *) 0 ;
  
  SWIG_check_num_args("cyclone::CollisionPrimitive::offset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::CollisionPrimitive::offset",1,"cyclone::CollisionPrimitive *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::CollisionPrimitive::offset",2,"cyclone::Matrix4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__CollisionPrimitive,0))){
    SWIG_fail_ptr("CollisionPrimitive_offset_set",1,SWIGTYPE_p_cyclone__CollisionPrimitive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Matrix4,0))){
    SWIG_fail_ptr("CollisionPrimitive_offset_set",2,SWIGTYPE_p_cyclone__Matrix4);
  }
  
  if (arg1) (arg1)->offset = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionPrimitive_offset_get(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::CollisionPrimitive *arg1 = (cyclone::CollisionPrimitive *) 0 ;
  cyclone::Matrix4 *result = 0 ;
  
  SWIG_check_num_args("cyclone::CollisionPrimitive::offset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::CollisionPrimitive::offset",1,"cyclone::CollisionPrimitive *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__CollisionPrimitive,0))){
    SWIG_fail_ptr("CollisionPrimitive_offset_get",1,SWIGTYPE_p_cyclone__CollisionPrimitive);
  }
  
  result = (cyclone::Matrix4 *)& ((arg1)->offset);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__Matrix4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionPrimitive_calculateInternals(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::CollisionPrimitive *arg1 = (cyclone::CollisionPrimitive *) 0 ;
  
  SWIG_check_num_args("cyclone::CollisionPrimitive::calculateInternals",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::CollisionPrimitive::calculateInternals",1,"cyclone::CollisionPrimitive *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__CollisionPrimitive,0))){
    SWIG_fail_ptr("CollisionPrimitive_calculateInternals",1,SWIGTYPE_p_cyclone__CollisionPrimitive);
  }
  
  (arg1)->calculateInternals();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionPrimitive_getAxis(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::CollisionPrimitive *arg1 = (cyclone::CollisionPrimitive *) 0 ;
  unsigned int arg2 ;
  cyclone::Vector3 result;
  
  SWIG_check_num_args("cyclone::CollisionPrimitive::getAxis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::CollisionPrimitive::getAxis",1,"cyclone::CollisionPrimitive const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::CollisionPrimitive::getAxis",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__CollisionPrimitive,0))){
    SWIG_fail_ptr("CollisionPrimitive_getAxis",1,SWIGTYPE_p_cyclone__CollisionPrimitive);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = ((cyclone::CollisionPrimitive const *)arg1)->getAxis(arg2);
  {
    cyclone::Vector3 * resultptr = new cyclone::Vector3((const cyclone::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cyclone__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionPrimitive_getTransform(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::CollisionPrimitive *arg1 = (cyclone::CollisionPrimitive *) 0 ;
  cyclone::Matrix4 *result = 0 ;
  
  SWIG_check_num_args("cyclone::CollisionPrimitive::getTransform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::CollisionPrimitive::getTransform",1,"cyclone::CollisionPrimitive const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__CollisionPrimitive,0))){
    SWIG_fail_ptr("CollisionPrimitive_getTransform",1,SWIGTYPE_p_cyclone__CollisionPrimitive);
  }
  
  result = (cyclone::Matrix4 *) &((cyclone::CollisionPrimitive const *)arg1)->getTransform();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__Matrix4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CollisionPrimitive(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::CollisionPrimitive *result = 0 ;
  
  SWIG_check_num_args("cyclone::CollisionPrimitive::CollisionPrimitive",0,0)
  result = (cyclone::CollisionPrimitive *)new cyclone::CollisionPrimitive();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__CollisionPrimitive,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CollisionPrimitive(void *obj) {
cyclone::CollisionPrimitive *arg1 = (cyclone::CollisionPrimitive *) obj;
delete arg1;
}
static int _proxy__wrap_new_CollisionPrimitive(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CollisionPrimitive);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CollisionPrimitive_attributes[] = {
    { "body", _wrap_CollisionPrimitive_body_get, _wrap_CollisionPrimitive_body_set },
    { "offset", _wrap_CollisionPrimitive_offset_get, _wrap_CollisionPrimitive_offset_set },
    {0,0,0}
};
static swig_lua_method swig_CollisionPrimitive_methods[]= {
    { "calculateInternals", _wrap_CollisionPrimitive_calculateInternals},
    { "getAxis", _wrap_CollisionPrimitive_getAxis},
    { "getTransform", _wrap_CollisionPrimitive_getTransform},
    {0,0}
};
static swig_lua_method swig_CollisionPrimitive_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CollisionPrimitive_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CollisionPrimitive_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CollisionPrimitive_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CollisionPrimitive_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CollisionPrimitive_Sf_SwigStatic = {
    "CollisionPrimitive",
    swig_CollisionPrimitive_Sf_SwigStatic_methods,
    swig_CollisionPrimitive_Sf_SwigStatic_attributes,
    swig_CollisionPrimitive_Sf_SwigStatic_constants,
    swig_CollisionPrimitive_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CollisionPrimitive_bases[] = {0};
static const char *swig_CollisionPrimitive_base_names[] = {0};
static swig_lua_class _wrap_class_CollisionPrimitive = { "CollisionPrimitive", "CollisionPrimitive", &SWIGTYPE_p_cyclone__CollisionPrimitive,_proxy__wrap_new_CollisionPrimitive, swig_delete_CollisionPrimitive, swig_CollisionPrimitive_methods, swig_CollisionPrimitive_attributes, &swig_CollisionPrimitive_Sf_SwigStatic, swig_CollisionPrimitive_meta, swig_CollisionPrimitive_bases, swig_CollisionPrimitive_base_names };

static int _wrap_CollisionSphere_radius_set(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::CollisionSphere *arg1 = (cyclone::CollisionSphere *) 0 ;
  cyclone::real arg2 ;
  
  SWIG_check_num_args("cyclone::CollisionSphere::radius",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::CollisionSphere::radius",1,"cyclone::CollisionSphere *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::CollisionSphere::radius",2,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__CollisionSphere,0))){
    SWIG_fail_ptr("CollisionSphere_radius_set",1,SWIGTYPE_p_cyclone__CollisionSphere);
  }
  
  arg2 = (cyclone::real)lua_tonumber(L, 2);
  if (arg1) (arg1)->radius = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionSphere_radius_get(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::CollisionSphere *arg1 = (cyclone::CollisionSphere *) 0 ;
  cyclone::real result;
  
  SWIG_check_num_args("cyclone::CollisionSphere::radius",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::CollisionSphere::radius",1,"cyclone::CollisionSphere *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__CollisionSphere,0))){
    SWIG_fail_ptr("CollisionSphere_radius_get",1,SWIGTYPE_p_cyclone__CollisionSphere);
  }
  
  result = (cyclone::real) ((arg1)->radius);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CollisionSphere(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::CollisionSphere *result = 0 ;
  
  SWIG_check_num_args("cyclone::CollisionSphere::CollisionSphere",0,0)
  result = (cyclone::CollisionSphere *)new cyclone::CollisionSphere();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__CollisionSphere,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CollisionSphere(void *obj) {
cyclone::CollisionSphere *arg1 = (cyclone::CollisionSphere *) obj;
delete arg1;
}
static int _proxy__wrap_new_CollisionSphere(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CollisionSphere);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CollisionSphere_attributes[] = {
    { "radius", _wrap_CollisionSphere_radius_get, _wrap_CollisionSphere_radius_set },
    {0,0,0}
};
static swig_lua_method swig_CollisionSphere_methods[]= {
    {0,0}
};
static swig_lua_method swig_CollisionSphere_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CollisionSphere_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CollisionSphere_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CollisionSphere_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CollisionSphere_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CollisionSphere_Sf_SwigStatic = {
    "CollisionSphere",
    swig_CollisionSphere_Sf_SwigStatic_methods,
    swig_CollisionSphere_Sf_SwigStatic_attributes,
    swig_CollisionSphere_Sf_SwigStatic_constants,
    swig_CollisionSphere_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CollisionSphere_bases[] = {0,0};
static const char *swig_CollisionSphere_base_names[] = {"cyclone::CollisionPrimitive *",0};
static swig_lua_class _wrap_class_CollisionSphere = { "CollisionSphere", "CollisionSphere", &SWIGTYPE_p_cyclone__CollisionSphere,_proxy__wrap_new_CollisionSphere, swig_delete_CollisionSphere, swig_CollisionSphere_methods, swig_CollisionSphere_attributes, &swig_CollisionSphere_Sf_SwigStatic, swig_CollisionSphere_meta, swig_CollisionSphere_bases, swig_CollisionSphere_base_names };

static int _wrap_CollisionPlane_direction_set(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::CollisionPlane *arg1 = (cyclone::CollisionPlane *) 0 ;
  cyclone::Vector3 *arg2 = (cyclone::Vector3 *) 0 ;
  
  SWIG_check_num_args("cyclone::CollisionPlane::direction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::CollisionPlane::direction",1,"cyclone::CollisionPlane *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::CollisionPlane::direction",2,"cyclone::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__CollisionPlane,0))){
    SWIG_fail_ptr("CollisionPlane_direction_set",1,SWIGTYPE_p_cyclone__CollisionPlane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("CollisionPlane_direction_set",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  if (arg1) (arg1)->direction = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionPlane_direction_get(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::CollisionPlane *arg1 = (cyclone::CollisionPlane *) 0 ;
  cyclone::Vector3 *result = 0 ;
  
  SWIG_check_num_args("cyclone::CollisionPlane::direction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::CollisionPlane::direction",1,"cyclone::CollisionPlane *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__CollisionPlane,0))){
    SWIG_fail_ptr("CollisionPlane_direction_get",1,SWIGTYPE_p_cyclone__CollisionPlane);
  }
  
  result = (cyclone::Vector3 *)& ((arg1)->direction);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionPlane_offset_set(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::CollisionPlane *arg1 = (cyclone::CollisionPlane *) 0 ;
  cyclone::real arg2 ;
  
  SWIG_check_num_args("cyclone::CollisionPlane::offset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::CollisionPlane::offset",1,"cyclone::CollisionPlane *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::CollisionPlane::offset",2,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__CollisionPlane,0))){
    SWIG_fail_ptr("CollisionPlane_offset_set",1,SWIGTYPE_p_cyclone__CollisionPlane);
  }
  
  arg2 = (cyclone::real)lua_tonumber(L, 2);
  if (arg1) (arg1)->offset = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionPlane_offset_get(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::CollisionPlane *arg1 = (cyclone::CollisionPlane *) 0 ;
  cyclone::real result;
  
  SWIG_check_num_args("cyclone::CollisionPlane::offset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::CollisionPlane::offset",1,"cyclone::CollisionPlane *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__CollisionPlane,0))){
    SWIG_fail_ptr("CollisionPlane_offset_get",1,SWIGTYPE_p_cyclone__CollisionPlane);
  }
  
  result = (cyclone::real) ((arg1)->offset);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CollisionPlane(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::CollisionPlane *result = 0 ;
  
  SWIG_check_num_args("cyclone::CollisionPlane::CollisionPlane",0,0)
  result = (cyclone::CollisionPlane *)new cyclone::CollisionPlane();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__CollisionPlane,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CollisionPlane(void *obj) {
cyclone::CollisionPlane *arg1 = (cyclone::CollisionPlane *) obj;
delete arg1;
}
static int _proxy__wrap_new_CollisionPlane(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CollisionPlane);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CollisionPlane_attributes[] = {
    { "direction", _wrap_CollisionPlane_direction_get, _wrap_CollisionPlane_direction_set },
    { "offset", _wrap_CollisionPlane_offset_get, _wrap_CollisionPlane_offset_set },
    {0,0,0}
};
static swig_lua_method swig_CollisionPlane_methods[]= {
    {0,0}
};
static swig_lua_method swig_CollisionPlane_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CollisionPlane_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CollisionPlane_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CollisionPlane_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CollisionPlane_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CollisionPlane_Sf_SwigStatic = {
    "CollisionPlane",
    swig_CollisionPlane_Sf_SwigStatic_methods,
    swig_CollisionPlane_Sf_SwigStatic_attributes,
    swig_CollisionPlane_Sf_SwigStatic_constants,
    swig_CollisionPlane_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CollisionPlane_bases[] = {0};
static const char *swig_CollisionPlane_base_names[] = {0};
static swig_lua_class _wrap_class_CollisionPlane = { "CollisionPlane", "CollisionPlane", &SWIGTYPE_p_cyclone__CollisionPlane,_proxy__wrap_new_CollisionPlane, swig_delete_CollisionPlane, swig_CollisionPlane_methods, swig_CollisionPlane_attributes, &swig_CollisionPlane_Sf_SwigStatic, swig_CollisionPlane_meta, swig_CollisionPlane_bases, swig_CollisionPlane_base_names };

static int _wrap_CollisionBox_halfSize_set(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::CollisionBox *arg1 = (cyclone::CollisionBox *) 0 ;
  cyclone::Vector3 *arg2 = (cyclone::Vector3 *) 0 ;
  
  SWIG_check_num_args("cyclone::CollisionBox::halfSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::CollisionBox::halfSize",1,"cyclone::CollisionBox *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::CollisionBox::halfSize",2,"cyclone::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__CollisionBox,0))){
    SWIG_fail_ptr("CollisionBox_halfSize_set",1,SWIGTYPE_p_cyclone__CollisionBox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("CollisionBox_halfSize_set",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  if (arg1) (arg1)->halfSize = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionBox_halfSize_get(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::CollisionBox *arg1 = (cyclone::CollisionBox *) 0 ;
  cyclone::Vector3 *result = 0 ;
  
  SWIG_check_num_args("cyclone::CollisionBox::halfSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::CollisionBox::halfSize",1,"cyclone::CollisionBox *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__CollisionBox,0))){
    SWIG_fail_ptr("CollisionBox_halfSize_get",1,SWIGTYPE_p_cyclone__CollisionBox);
  }
  
  result = (cyclone::Vector3 *)& ((arg1)->halfSize);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CollisionBox(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::CollisionBox *result = 0 ;
  
  SWIG_check_num_args("cyclone::CollisionBox::CollisionBox",0,0)
  result = (cyclone::CollisionBox *)new cyclone::CollisionBox();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__CollisionBox,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CollisionBox(void *obj) {
cyclone::CollisionBox *arg1 = (cyclone::CollisionBox *) obj;
delete arg1;
}
static int _proxy__wrap_new_CollisionBox(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CollisionBox);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CollisionBox_attributes[] = {
    { "halfSize", _wrap_CollisionBox_halfSize_get, _wrap_CollisionBox_halfSize_set },
    {0,0,0}
};
static swig_lua_method swig_CollisionBox_methods[]= {
    {0,0}
};
static swig_lua_method swig_CollisionBox_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CollisionBox_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CollisionBox_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CollisionBox_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CollisionBox_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CollisionBox_Sf_SwigStatic = {
    "CollisionBox",
    swig_CollisionBox_Sf_SwigStatic_methods,
    swig_CollisionBox_Sf_SwigStatic_attributes,
    swig_CollisionBox_Sf_SwigStatic_constants,
    swig_CollisionBox_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CollisionBox_bases[] = {0,0};
static const char *swig_CollisionBox_base_names[] = {"cyclone::CollisionPrimitive *",0};
static swig_lua_class _wrap_class_CollisionBox = { "CollisionBox", "CollisionBox", &SWIGTYPE_p_cyclone__CollisionBox,_proxy__wrap_new_CollisionBox, swig_delete_CollisionBox, swig_CollisionBox_methods, swig_CollisionBox_attributes, &swig_CollisionBox_Sf_SwigStatic, swig_CollisionBox_meta, swig_CollisionBox_bases, swig_CollisionBox_base_names };

static int _wrap_IntersectionTests_sphereAndHalfSpace(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::CollisionSphere *arg1 = 0 ;
  cyclone::CollisionPlane *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("cyclone::IntersectionTests::sphereAndHalfSpace",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("cyclone::IntersectionTests::sphereAndHalfSpace",1,"cyclone::CollisionSphere const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::IntersectionTests::sphereAndHalfSpace",2,"cyclone::CollisionPlane const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__CollisionSphere,0))){
    SWIG_fail_ptr("IntersectionTests_sphereAndHalfSpace",1,SWIGTYPE_p_cyclone__CollisionSphere);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__CollisionPlane,0))){
    SWIG_fail_ptr("IntersectionTests_sphereAndHalfSpace",2,SWIGTYPE_p_cyclone__CollisionPlane);
  }
  
  result = (bool)cyclone::IntersectionTests::sphereAndHalfSpace((cyclone::CollisionSphere const &)*arg1,(cyclone::CollisionPlane const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IntersectionTests_sphereAndSphere(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::CollisionSphere *arg1 = 0 ;
  cyclone::CollisionSphere *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("cyclone::IntersectionTests::sphereAndSphere",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("cyclone::IntersectionTests::sphereAndSphere",1,"cyclone::CollisionSphere const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::IntersectionTests::sphereAndSphere",2,"cyclone::CollisionSphere const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__CollisionSphere,0))){
    SWIG_fail_ptr("IntersectionTests_sphereAndSphere",1,SWIGTYPE_p_cyclone__CollisionSphere);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__CollisionSphere,0))){
    SWIG_fail_ptr("IntersectionTests_sphereAndSphere",2,SWIGTYPE_p_cyclone__CollisionSphere);
  }
  
  result = (bool)cyclone::IntersectionTests::sphereAndSphere((cyclone::CollisionSphere const &)*arg1,(cyclone::CollisionSphere const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IntersectionTests_boxAndBox(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::CollisionBox *arg1 = 0 ;
  cyclone::CollisionBox *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("cyclone::IntersectionTests::boxAndBox",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("cyclone::IntersectionTests::boxAndBox",1,"cyclone::CollisionBox const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::IntersectionTests::boxAndBox",2,"cyclone::CollisionBox const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__CollisionBox,0))){
    SWIG_fail_ptr("IntersectionTests_boxAndBox",1,SWIGTYPE_p_cyclone__CollisionBox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__CollisionBox,0))){
    SWIG_fail_ptr("IntersectionTests_boxAndBox",2,SWIGTYPE_p_cyclone__CollisionBox);
  }
  
  result = (bool)cyclone::IntersectionTests::boxAndBox((cyclone::CollisionBox const &)*arg1,(cyclone::CollisionBox const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IntersectionTests_boxAndHalfSpace(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::CollisionBox *arg1 = 0 ;
  cyclone::CollisionPlane *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("cyclone::IntersectionTests::boxAndHalfSpace",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("cyclone::IntersectionTests::boxAndHalfSpace",1,"cyclone::CollisionBox const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::IntersectionTests::boxAndHalfSpace",2,"cyclone::CollisionPlane const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__CollisionBox,0))){
    SWIG_fail_ptr("IntersectionTests_boxAndHalfSpace",1,SWIGTYPE_p_cyclone__CollisionBox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__CollisionPlane,0))){
    SWIG_fail_ptr("IntersectionTests_boxAndHalfSpace",2,SWIGTYPE_p_cyclone__CollisionPlane);
  }
  
  result = (bool)cyclone::IntersectionTests::boxAndHalfSpace((cyclone::CollisionBox const &)*arg1,(cyclone::CollisionPlane const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IntersectionTests(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::IntersectionTests *result = 0 ;
  
  SWIG_check_num_args("cyclone::IntersectionTests::IntersectionTests",0,0)
  result = (cyclone::IntersectionTests *)new cyclone::IntersectionTests();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__IntersectionTests,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IntersectionTests(void *obj) {
cyclone::IntersectionTests *arg1 = (cyclone::IntersectionTests *) obj;
delete arg1;
}
static int _proxy__wrap_new_IntersectionTests(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IntersectionTests);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IntersectionTests_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_IntersectionTests_methods[]= {
    {0,0}
};
static swig_lua_method swig_IntersectionTests_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IntersectionTests_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IntersectionTests_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IntersectionTests_Sf_SwigStatic_methods[]= {
    { "sphereAndHalfSpace", _wrap_IntersectionTests_sphereAndHalfSpace},
    { "sphereAndSphere", _wrap_IntersectionTests_sphereAndSphere},
    { "boxAndBox", _wrap_IntersectionTests_boxAndBox},
    { "boxAndHalfSpace", _wrap_IntersectionTests_boxAndHalfSpace},
    {0,0}
};
static swig_lua_class* swig_IntersectionTests_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IntersectionTests_Sf_SwigStatic = {
    "IntersectionTests",
    swig_IntersectionTests_Sf_SwigStatic_methods,
    swig_IntersectionTests_Sf_SwigStatic_attributes,
    swig_IntersectionTests_Sf_SwigStatic_constants,
    swig_IntersectionTests_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IntersectionTests_bases[] = {0};
static const char *swig_IntersectionTests_base_names[] = {0};
static swig_lua_class _wrap_class_IntersectionTests = { "IntersectionTests", "IntersectionTests", &SWIGTYPE_p_cyclone__IntersectionTests,_proxy__wrap_new_IntersectionTests, swig_delete_IntersectionTests, swig_IntersectionTests_methods, swig_IntersectionTests_attributes, &swig_IntersectionTests_Sf_SwigStatic, swig_IntersectionTests_meta, swig_IntersectionTests_bases, swig_IntersectionTests_base_names };

static int _wrap_CollisionData_contactArray_set(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::CollisionData *arg1 = (cyclone::CollisionData *) 0 ;
  Contact *arg2 = (Contact *) 0 ;
  
  SWIG_check_num_args("cyclone::CollisionData::contactArray",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::CollisionData::contactArray",1,"cyclone::CollisionData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::CollisionData::contactArray",2,"Contact *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__CollisionData,0))){
    SWIG_fail_ptr("CollisionData_contactArray_set",1,SWIGTYPE_p_cyclone__CollisionData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Contact,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("CollisionData_contactArray_set",2,SWIGTYPE_p_Contact);
  }
  
  if (arg1) (arg1)->contactArray = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionData_contactArray_get(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::CollisionData *arg1 = (cyclone::CollisionData *) 0 ;
  Contact *result = 0 ;
  
  SWIG_check_num_args("cyclone::CollisionData::contactArray",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::CollisionData::contactArray",1,"cyclone::CollisionData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__CollisionData,0))){
    SWIG_fail_ptr("CollisionData_contactArray_get",1,SWIGTYPE_p_cyclone__CollisionData);
  }
  
  result = (Contact *) ((arg1)->contactArray);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Contact,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionData_contacts_set(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::CollisionData *arg1 = (cyclone::CollisionData *) 0 ;
  Contact *arg2 = (Contact *) 0 ;
  
  SWIG_check_num_args("cyclone::CollisionData::contacts",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::CollisionData::contacts",1,"cyclone::CollisionData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::CollisionData::contacts",2,"Contact *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__CollisionData,0))){
    SWIG_fail_ptr("CollisionData_contacts_set",1,SWIGTYPE_p_cyclone__CollisionData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Contact,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("CollisionData_contacts_set",2,SWIGTYPE_p_Contact);
  }
  
  if (arg1) (arg1)->contacts = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionData_contacts_get(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::CollisionData *arg1 = (cyclone::CollisionData *) 0 ;
  Contact *result = 0 ;
  
  SWIG_check_num_args("cyclone::CollisionData::contacts",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::CollisionData::contacts",1,"cyclone::CollisionData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__CollisionData,0))){
    SWIG_fail_ptr("CollisionData_contacts_get",1,SWIGTYPE_p_cyclone__CollisionData);
  }
  
  result = (Contact *) ((arg1)->contacts);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Contact,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionData_contactsLeft_set(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::CollisionData *arg1 = (cyclone::CollisionData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("cyclone::CollisionData::contactsLeft",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::CollisionData::contactsLeft",1,"cyclone::CollisionData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::CollisionData::contactsLeft",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__CollisionData,0))){
    SWIG_fail_ptr("CollisionData_contactsLeft_set",1,SWIGTYPE_p_cyclone__CollisionData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->contactsLeft = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionData_contactsLeft_get(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::CollisionData *arg1 = (cyclone::CollisionData *) 0 ;
  int result;
  
  SWIG_check_num_args("cyclone::CollisionData::contactsLeft",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::CollisionData::contactsLeft",1,"cyclone::CollisionData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__CollisionData,0))){
    SWIG_fail_ptr("CollisionData_contactsLeft_get",1,SWIGTYPE_p_cyclone__CollisionData);
  }
  
  result = (int) ((arg1)->contactsLeft);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionData_contactCount_set(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::CollisionData *arg1 = (cyclone::CollisionData *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("cyclone::CollisionData::contactCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::CollisionData::contactCount",1,"cyclone::CollisionData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::CollisionData::contactCount",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__CollisionData,0))){
    SWIG_fail_ptr("CollisionData_contactCount_set",1,SWIGTYPE_p_cyclone__CollisionData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->contactCount = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionData_contactCount_get(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::CollisionData *arg1 = (cyclone::CollisionData *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("cyclone::CollisionData::contactCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::CollisionData::contactCount",1,"cyclone::CollisionData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__CollisionData,0))){
    SWIG_fail_ptr("CollisionData_contactCount_get",1,SWIGTYPE_p_cyclone__CollisionData);
  }
  
  result = (unsigned int) ((arg1)->contactCount);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionData_friction_set(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::CollisionData *arg1 = (cyclone::CollisionData *) 0 ;
  cyclone::real arg2 ;
  
  SWIG_check_num_args("cyclone::CollisionData::friction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::CollisionData::friction",1,"cyclone::CollisionData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::CollisionData::friction",2,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__CollisionData,0))){
    SWIG_fail_ptr("CollisionData_friction_set",1,SWIGTYPE_p_cyclone__CollisionData);
  }
  
  arg2 = (cyclone::real)lua_tonumber(L, 2);
  if (arg1) (arg1)->friction = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionData_friction_get(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::CollisionData *arg1 = (cyclone::CollisionData *) 0 ;
  cyclone::real result;
  
  SWIG_check_num_args("cyclone::CollisionData::friction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::CollisionData::friction",1,"cyclone::CollisionData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__CollisionData,0))){
    SWIG_fail_ptr("CollisionData_friction_get",1,SWIGTYPE_p_cyclone__CollisionData);
  }
  
  result = (cyclone::real) ((arg1)->friction);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionData_restitution_set(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::CollisionData *arg1 = (cyclone::CollisionData *) 0 ;
  cyclone::real arg2 ;
  
  SWIG_check_num_args("cyclone::CollisionData::restitution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::CollisionData::restitution",1,"cyclone::CollisionData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::CollisionData::restitution",2,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__CollisionData,0))){
    SWIG_fail_ptr("CollisionData_restitution_set",1,SWIGTYPE_p_cyclone__CollisionData);
  }
  
  arg2 = (cyclone::real)lua_tonumber(L, 2);
  if (arg1) (arg1)->restitution = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionData_restitution_get(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::CollisionData *arg1 = (cyclone::CollisionData *) 0 ;
  cyclone::real result;
  
  SWIG_check_num_args("cyclone::CollisionData::restitution",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::CollisionData::restitution",1,"cyclone::CollisionData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__CollisionData,0))){
    SWIG_fail_ptr("CollisionData_restitution_get",1,SWIGTYPE_p_cyclone__CollisionData);
  }
  
  result = (cyclone::real) ((arg1)->restitution);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionData_tolerance_set(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::CollisionData *arg1 = (cyclone::CollisionData *) 0 ;
  cyclone::real arg2 ;
  
  SWIG_check_num_args("cyclone::CollisionData::tolerance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::CollisionData::tolerance",1,"cyclone::CollisionData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::CollisionData::tolerance",2,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__CollisionData,0))){
    SWIG_fail_ptr("CollisionData_tolerance_set",1,SWIGTYPE_p_cyclone__CollisionData);
  }
  
  arg2 = (cyclone::real)lua_tonumber(L, 2);
  if (arg1) (arg1)->tolerance = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionData_tolerance_get(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::CollisionData *arg1 = (cyclone::CollisionData *) 0 ;
  cyclone::real result;
  
  SWIG_check_num_args("cyclone::CollisionData::tolerance",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::CollisionData::tolerance",1,"cyclone::CollisionData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__CollisionData,0))){
    SWIG_fail_ptr("CollisionData_tolerance_get",1,SWIGTYPE_p_cyclone__CollisionData);
  }
  
  result = (cyclone::real) ((arg1)->tolerance);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionData_hasMoreContacts(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::CollisionData *arg1 = (cyclone::CollisionData *) 0 ;
  bool result;
  
  SWIG_check_num_args("cyclone::CollisionData::hasMoreContacts",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::CollisionData::hasMoreContacts",1,"cyclone::CollisionData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__CollisionData,0))){
    SWIG_fail_ptr("CollisionData_hasMoreContacts",1,SWIGTYPE_p_cyclone__CollisionData);
  }
  
  result = (bool)(arg1)->hasMoreContacts();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionData_reset(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::CollisionData *arg1 = (cyclone::CollisionData *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("cyclone::CollisionData::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::CollisionData::reset",1,"cyclone::CollisionData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::CollisionData::reset",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__CollisionData,0))){
    SWIG_fail_ptr("CollisionData_reset",1,SWIGTYPE_p_cyclone__CollisionData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->reset(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionData_addContacts(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::CollisionData *arg1 = (cyclone::CollisionData *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("cyclone::CollisionData::addContacts",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::CollisionData::addContacts",1,"cyclone::CollisionData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::CollisionData::addContacts",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__CollisionData,0))){
    SWIG_fail_ptr("CollisionData_addContacts",1,SWIGTYPE_p_cyclone__CollisionData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->addContacts(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CollisionData(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::CollisionData *result = 0 ;
  
  SWIG_check_num_args("cyclone::CollisionData::CollisionData",0,0)
  result = (cyclone::CollisionData *)new cyclone::CollisionData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__CollisionData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CollisionData(void *obj) {
cyclone::CollisionData *arg1 = (cyclone::CollisionData *) obj;
delete arg1;
}
static int _proxy__wrap_new_CollisionData(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CollisionData);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CollisionData_attributes[] = {
    { "contactArray", _wrap_CollisionData_contactArray_get, _wrap_CollisionData_contactArray_set },
    { "contacts", _wrap_CollisionData_contacts_get, _wrap_CollisionData_contacts_set },
    { "contactsLeft", _wrap_CollisionData_contactsLeft_get, _wrap_CollisionData_contactsLeft_set },
    { "contactCount", _wrap_CollisionData_contactCount_get, _wrap_CollisionData_contactCount_set },
    { "friction", _wrap_CollisionData_friction_get, _wrap_CollisionData_friction_set },
    { "restitution", _wrap_CollisionData_restitution_get, _wrap_CollisionData_restitution_set },
    { "tolerance", _wrap_CollisionData_tolerance_get, _wrap_CollisionData_tolerance_set },
    {0,0,0}
};
static swig_lua_method swig_CollisionData_methods[]= {
    { "hasMoreContacts", _wrap_CollisionData_hasMoreContacts},
    { "reset", _wrap_CollisionData_reset},
    { "addContacts", _wrap_CollisionData_addContacts},
    {0,0}
};
static swig_lua_method swig_CollisionData_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CollisionData_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CollisionData_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CollisionData_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CollisionData_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CollisionData_Sf_SwigStatic = {
    "CollisionData",
    swig_CollisionData_Sf_SwigStatic_methods,
    swig_CollisionData_Sf_SwigStatic_attributes,
    swig_CollisionData_Sf_SwigStatic_constants,
    swig_CollisionData_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CollisionData_bases[] = {0};
static const char *swig_CollisionData_base_names[] = {0};
static swig_lua_class _wrap_class_CollisionData = { "CollisionData", "CollisionData", &SWIGTYPE_p_cyclone__CollisionData,_proxy__wrap_new_CollisionData, swig_delete_CollisionData, swig_CollisionData_methods, swig_CollisionData_attributes, &swig_CollisionData_Sf_SwigStatic, swig_CollisionData_meta, swig_CollisionData_bases, swig_CollisionData_base_names };

static int _wrap_new_CollisionDataEx(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  cyclone::CollisionDataEx *result = 0 ;
  
  SWIG_check_num_args("cyclone::CollisionDataEx::CollisionDataEx",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cyclone::CollisionDataEx::CollisionDataEx",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (cyclone::CollisionDataEx *)new cyclone::CollisionDataEx(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__CollisionDataEx,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionDataEx_resolve(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::CollisionDataEx *arg1 = (cyclone::CollisionDataEx *) 0 ;
  cyclone::real arg2 ;
  
  SWIG_check_num_args("cyclone::CollisionDataEx::resolve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::CollisionDataEx::resolve",1,"cyclone::CollisionDataEx *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::CollisionDataEx::resolve",2,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__CollisionDataEx,0))){
    SWIG_fail_ptr("CollisionDataEx_resolve",1,SWIGTYPE_p_cyclone__CollisionDataEx);
  }
  
  arg2 = (cyclone::real)lua_tonumber(L, 2);
  (arg1)->resolve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CollisionDataEx(void *obj) {
cyclone::CollisionDataEx *arg1 = (cyclone::CollisionDataEx *) obj;
delete arg1;
}
static int _proxy__wrap_new_CollisionDataEx(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CollisionDataEx);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CollisionDataEx_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CollisionDataEx_methods[]= {
    { "resolve", _wrap_CollisionDataEx_resolve},
    {0,0}
};
static swig_lua_method swig_CollisionDataEx_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CollisionDataEx_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CollisionDataEx_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CollisionDataEx_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CollisionDataEx_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CollisionDataEx_Sf_SwigStatic = {
    "CollisionDataEx",
    swig_CollisionDataEx_Sf_SwigStatic_methods,
    swig_CollisionDataEx_Sf_SwigStatic_attributes,
    swig_CollisionDataEx_Sf_SwigStatic_constants,
    swig_CollisionDataEx_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CollisionDataEx_bases[] = {0,0};
static const char *swig_CollisionDataEx_base_names[] = {"cyclone::CollisionData *",0};
static swig_lua_class _wrap_class_CollisionDataEx = { "CollisionDataEx", "CollisionDataEx", &SWIGTYPE_p_cyclone__CollisionDataEx,_proxy__wrap_new_CollisionDataEx, swig_delete_CollisionDataEx, swig_CollisionDataEx_methods, swig_CollisionDataEx_attributes, &swig_CollisionDataEx_Sf_SwigStatic, swig_CollisionDataEx_meta, swig_CollisionDataEx_bases, swig_CollisionDataEx_base_names };

static int _wrap_CollisionDetector_sphereAndHalfSpace(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::CollisionSphere *arg1 = 0 ;
  cyclone::CollisionPlane *arg2 = 0 ;
  cyclone::CollisionData *arg3 = (cyclone::CollisionData *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("cyclone::CollisionDetector::sphereAndHalfSpace",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("cyclone::CollisionDetector::sphereAndHalfSpace",1,"cyclone::CollisionSphere const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::CollisionDetector::sphereAndHalfSpace",2,"cyclone::CollisionPlane const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cyclone::CollisionDetector::sphereAndHalfSpace",3,"cyclone::CollisionData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__CollisionSphere,0))){
    SWIG_fail_ptr("CollisionDetector_sphereAndHalfSpace",1,SWIGTYPE_p_cyclone__CollisionSphere);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__CollisionPlane,0))){
    SWIG_fail_ptr("CollisionDetector_sphereAndHalfSpace",2,SWIGTYPE_p_cyclone__CollisionPlane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_cyclone__CollisionData,0))){
    SWIG_fail_ptr("CollisionDetector_sphereAndHalfSpace",3,SWIGTYPE_p_cyclone__CollisionData);
  }
  
  result = (unsigned int)cyclone::CollisionDetector::sphereAndHalfSpace((cyclone::CollisionSphere const &)*arg1,(cyclone::CollisionPlane const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionDetector_sphereAndTruePlane(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::CollisionSphere *arg1 = 0 ;
  cyclone::CollisionPlane *arg2 = 0 ;
  cyclone::CollisionData *arg3 = (cyclone::CollisionData *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("cyclone::CollisionDetector::sphereAndTruePlane",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("cyclone::CollisionDetector::sphereAndTruePlane",1,"cyclone::CollisionSphere const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::CollisionDetector::sphereAndTruePlane",2,"cyclone::CollisionPlane const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cyclone::CollisionDetector::sphereAndTruePlane",3,"cyclone::CollisionData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__CollisionSphere,0))){
    SWIG_fail_ptr("CollisionDetector_sphereAndTruePlane",1,SWIGTYPE_p_cyclone__CollisionSphere);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__CollisionPlane,0))){
    SWIG_fail_ptr("CollisionDetector_sphereAndTruePlane",2,SWIGTYPE_p_cyclone__CollisionPlane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_cyclone__CollisionData,0))){
    SWIG_fail_ptr("CollisionDetector_sphereAndTruePlane",3,SWIGTYPE_p_cyclone__CollisionData);
  }
  
  result = (unsigned int)cyclone::CollisionDetector::sphereAndTruePlane((cyclone::CollisionSphere const &)*arg1,(cyclone::CollisionPlane const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionDetector_sphereAndSphere(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::CollisionSphere *arg1 = 0 ;
  cyclone::CollisionSphere *arg2 = 0 ;
  cyclone::CollisionData *arg3 = (cyclone::CollisionData *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("cyclone::CollisionDetector::sphereAndSphere",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("cyclone::CollisionDetector::sphereAndSphere",1,"cyclone::CollisionSphere const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::CollisionDetector::sphereAndSphere",2,"cyclone::CollisionSphere const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cyclone::CollisionDetector::sphereAndSphere",3,"cyclone::CollisionData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__CollisionSphere,0))){
    SWIG_fail_ptr("CollisionDetector_sphereAndSphere",1,SWIGTYPE_p_cyclone__CollisionSphere);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__CollisionSphere,0))){
    SWIG_fail_ptr("CollisionDetector_sphereAndSphere",2,SWIGTYPE_p_cyclone__CollisionSphere);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_cyclone__CollisionData,0))){
    SWIG_fail_ptr("CollisionDetector_sphereAndSphere",3,SWIGTYPE_p_cyclone__CollisionData);
  }
  
  result = (unsigned int)cyclone::CollisionDetector::sphereAndSphere((cyclone::CollisionSphere const &)*arg1,(cyclone::CollisionSphere const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionDetector_boxAndHalfSpace(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::CollisionBox *arg1 = 0 ;
  cyclone::CollisionPlane *arg2 = 0 ;
  cyclone::CollisionData *arg3 = (cyclone::CollisionData *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("cyclone::CollisionDetector::boxAndHalfSpace",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("cyclone::CollisionDetector::boxAndHalfSpace",1,"cyclone::CollisionBox const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::CollisionDetector::boxAndHalfSpace",2,"cyclone::CollisionPlane const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cyclone::CollisionDetector::boxAndHalfSpace",3,"cyclone::CollisionData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__CollisionBox,0))){
    SWIG_fail_ptr("CollisionDetector_boxAndHalfSpace",1,SWIGTYPE_p_cyclone__CollisionBox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__CollisionPlane,0))){
    SWIG_fail_ptr("CollisionDetector_boxAndHalfSpace",2,SWIGTYPE_p_cyclone__CollisionPlane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_cyclone__CollisionData,0))){
    SWIG_fail_ptr("CollisionDetector_boxAndHalfSpace",3,SWIGTYPE_p_cyclone__CollisionData);
  }
  
  result = (unsigned int)cyclone::CollisionDetector::boxAndHalfSpace((cyclone::CollisionBox const &)*arg1,(cyclone::CollisionPlane const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionDetector_boxAndBox(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::CollisionBox *arg1 = 0 ;
  cyclone::CollisionBox *arg2 = 0 ;
  cyclone::CollisionData *arg3 = (cyclone::CollisionData *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("cyclone::CollisionDetector::boxAndBox",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("cyclone::CollisionDetector::boxAndBox",1,"cyclone::CollisionBox const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::CollisionDetector::boxAndBox",2,"cyclone::CollisionBox const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cyclone::CollisionDetector::boxAndBox",3,"cyclone::CollisionData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__CollisionBox,0))){
    SWIG_fail_ptr("CollisionDetector_boxAndBox",1,SWIGTYPE_p_cyclone__CollisionBox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__CollisionBox,0))){
    SWIG_fail_ptr("CollisionDetector_boxAndBox",2,SWIGTYPE_p_cyclone__CollisionBox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_cyclone__CollisionData,0))){
    SWIG_fail_ptr("CollisionDetector_boxAndBox",3,SWIGTYPE_p_cyclone__CollisionData);
  }
  
  result = (unsigned int)cyclone::CollisionDetector::boxAndBox((cyclone::CollisionBox const &)*arg1,(cyclone::CollisionBox const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionDetector_boxAndPoint(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::CollisionBox *arg1 = 0 ;
  cyclone::Vector3 *arg2 = 0 ;
  cyclone::CollisionData *arg3 = (cyclone::CollisionData *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("cyclone::CollisionDetector::boxAndPoint",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("cyclone::CollisionDetector::boxAndPoint",1,"cyclone::CollisionBox const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::CollisionDetector::boxAndPoint",2,"cyclone::Vector3 const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cyclone::CollisionDetector::boxAndPoint",3,"cyclone::CollisionData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__CollisionBox,0))){
    SWIG_fail_ptr("CollisionDetector_boxAndPoint",1,SWIGTYPE_p_cyclone__CollisionBox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("CollisionDetector_boxAndPoint",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_cyclone__CollisionData,0))){
    SWIG_fail_ptr("CollisionDetector_boxAndPoint",3,SWIGTYPE_p_cyclone__CollisionData);
  }
  
  result = (unsigned int)cyclone::CollisionDetector::boxAndPoint((cyclone::CollisionBox const &)*arg1,(cyclone::Vector3 const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionDetector_boxAndSphere(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::CollisionBox *arg1 = 0 ;
  cyclone::CollisionSphere *arg2 = 0 ;
  cyclone::CollisionData *arg3 = (cyclone::CollisionData *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("cyclone::CollisionDetector::boxAndSphere",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("cyclone::CollisionDetector::boxAndSphere",1,"cyclone::CollisionBox const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::CollisionDetector::boxAndSphere",2,"cyclone::CollisionSphere const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cyclone::CollisionDetector::boxAndSphere",3,"cyclone::CollisionData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__CollisionBox,0))){
    SWIG_fail_ptr("CollisionDetector_boxAndSphere",1,SWIGTYPE_p_cyclone__CollisionBox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__CollisionSphere,0))){
    SWIG_fail_ptr("CollisionDetector_boxAndSphere",2,SWIGTYPE_p_cyclone__CollisionSphere);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_cyclone__CollisionData,0))){
    SWIG_fail_ptr("CollisionDetector_boxAndSphere",3,SWIGTYPE_p_cyclone__CollisionData);
  }
  
  result = (unsigned int)cyclone::CollisionDetector::boxAndSphere((cyclone::CollisionBox const &)*arg1,(cyclone::CollisionSphere const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CollisionDetector(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::CollisionDetector *result = 0 ;
  
  SWIG_check_num_args("cyclone::CollisionDetector::CollisionDetector",0,0)
  result = (cyclone::CollisionDetector *)new cyclone::CollisionDetector();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__CollisionDetector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CollisionDetector(void *obj) {
cyclone::CollisionDetector *arg1 = (cyclone::CollisionDetector *) obj;
delete arg1;
}
static int _proxy__wrap_new_CollisionDetector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CollisionDetector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CollisionDetector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CollisionDetector_methods[]= {
    {0,0}
};
static swig_lua_method swig_CollisionDetector_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CollisionDetector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CollisionDetector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CollisionDetector_Sf_SwigStatic_methods[]= {
    { "sphereAndHalfSpace", _wrap_CollisionDetector_sphereAndHalfSpace},
    { "sphereAndTruePlane", _wrap_CollisionDetector_sphereAndTruePlane},
    { "sphereAndSphere", _wrap_CollisionDetector_sphereAndSphere},
    { "boxAndHalfSpace", _wrap_CollisionDetector_boxAndHalfSpace},
    { "boxAndBox", _wrap_CollisionDetector_boxAndBox},
    { "boxAndPoint", _wrap_CollisionDetector_boxAndPoint},
    { "boxAndSphere", _wrap_CollisionDetector_boxAndSphere},
    {0,0}
};
static swig_lua_class* swig_CollisionDetector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CollisionDetector_Sf_SwigStatic = {
    "CollisionDetector",
    swig_CollisionDetector_Sf_SwigStatic_methods,
    swig_CollisionDetector_Sf_SwigStatic_attributes,
    swig_CollisionDetector_Sf_SwigStatic_constants,
    swig_CollisionDetector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CollisionDetector_bases[] = {0};
static const char *swig_CollisionDetector_base_names[] = {0};
static swig_lua_class _wrap_class_CollisionDetector = { "CollisionDetector", "CollisionDetector", &SWIGTYPE_p_cyclone__CollisionDetector,_proxy__wrap_new_CollisionDetector, swig_delete_CollisionDetector, swig_CollisionDetector_methods, swig_CollisionDetector_attributes, &swig_CollisionDetector_Sf_SwigStatic, swig_CollisionDetector_meta, swig_CollisionDetector_bases, swig_CollisionDetector_base_names };

static int _wrap_Contact_body_set(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Contact *arg1 = (cyclone::Contact *) 0 ;
  cyclone::RigidBody **arg2 ;
  
  SWIG_check_num_args("cyclone::Contact::body",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Contact::body",1,"cyclone::Contact *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::Contact::body",2,"cyclone::RigidBody *[2]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Contact,0))){
    SWIG_fail_ptr("Contact_body_set",1,SWIGTYPE_p_cyclone__Contact);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("Contact_body_set",2,SWIGTYPE_p_p_cyclone__RigidBody);
  }
  
  {
    size_t ii;
    cyclone::RigidBody * *b = (cyclone::RigidBody * *) arg1->body;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((cyclone::RigidBody * *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contact_body_get(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Contact *arg1 = (cyclone::Contact *) 0 ;
  cyclone::RigidBody **result = 0 ;
  
  SWIG_check_num_args("cyclone::Contact::body",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Contact::body",1,"cyclone::Contact *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Contact,0))){
    SWIG_fail_ptr("Contact_body_get",1,SWIGTYPE_p_cyclone__Contact);
  }
  
  result = (cyclone::RigidBody **)(cyclone::RigidBody **) ((arg1)->body);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_cyclone__RigidBody,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contact_friction_set(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Contact *arg1 = (cyclone::Contact *) 0 ;
  cyclone::real arg2 ;
  
  SWIG_check_num_args("cyclone::Contact::friction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Contact::friction",1,"cyclone::Contact *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::Contact::friction",2,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Contact,0))){
    SWIG_fail_ptr("Contact_friction_set",1,SWIGTYPE_p_cyclone__Contact);
  }
  
  arg2 = (cyclone::real)lua_tonumber(L, 2);
  if (arg1) (arg1)->friction = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contact_friction_get(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Contact *arg1 = (cyclone::Contact *) 0 ;
  cyclone::real result;
  
  SWIG_check_num_args("cyclone::Contact::friction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Contact::friction",1,"cyclone::Contact *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Contact,0))){
    SWIG_fail_ptr("Contact_friction_get",1,SWIGTYPE_p_cyclone__Contact);
  }
  
  result = (cyclone::real) ((arg1)->friction);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contact_restitution_set(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Contact *arg1 = (cyclone::Contact *) 0 ;
  cyclone::real arg2 ;
  
  SWIG_check_num_args("cyclone::Contact::restitution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Contact::restitution",1,"cyclone::Contact *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::Contact::restitution",2,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Contact,0))){
    SWIG_fail_ptr("Contact_restitution_set",1,SWIGTYPE_p_cyclone__Contact);
  }
  
  arg2 = (cyclone::real)lua_tonumber(L, 2);
  if (arg1) (arg1)->restitution = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contact_restitution_get(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Contact *arg1 = (cyclone::Contact *) 0 ;
  cyclone::real result;
  
  SWIG_check_num_args("cyclone::Contact::restitution",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Contact::restitution",1,"cyclone::Contact *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Contact,0))){
    SWIG_fail_ptr("Contact_restitution_get",1,SWIGTYPE_p_cyclone__Contact);
  }
  
  result = (cyclone::real) ((arg1)->restitution);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contact_contactPoint_set(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Contact *arg1 = (cyclone::Contact *) 0 ;
  cyclone::Vector3 *arg2 = (cyclone::Vector3 *) 0 ;
  
  SWIG_check_num_args("cyclone::Contact::contactPoint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Contact::contactPoint",1,"cyclone::Contact *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::Contact::contactPoint",2,"cyclone::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Contact,0))){
    SWIG_fail_ptr("Contact_contactPoint_set",1,SWIGTYPE_p_cyclone__Contact);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Contact_contactPoint_set",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  if (arg1) (arg1)->contactPoint = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contact_contactPoint_get(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Contact *arg1 = (cyclone::Contact *) 0 ;
  cyclone::Vector3 *result = 0 ;
  
  SWIG_check_num_args("cyclone::Contact::contactPoint",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Contact::contactPoint",1,"cyclone::Contact *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Contact,0))){
    SWIG_fail_ptr("Contact_contactPoint_get",1,SWIGTYPE_p_cyclone__Contact);
  }
  
  result = (cyclone::Vector3 *)& ((arg1)->contactPoint);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contact_contactNormal_set(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Contact *arg1 = (cyclone::Contact *) 0 ;
  cyclone::Vector3 *arg2 = (cyclone::Vector3 *) 0 ;
  
  SWIG_check_num_args("cyclone::Contact::contactNormal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Contact::contactNormal",1,"cyclone::Contact *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::Contact::contactNormal",2,"cyclone::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Contact,0))){
    SWIG_fail_ptr("Contact_contactNormal_set",1,SWIGTYPE_p_cyclone__Contact);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Contact_contactNormal_set",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  if (arg1) (arg1)->contactNormal = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contact_contactNormal_get(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Contact *arg1 = (cyclone::Contact *) 0 ;
  cyclone::Vector3 *result = 0 ;
  
  SWIG_check_num_args("cyclone::Contact::contactNormal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Contact::contactNormal",1,"cyclone::Contact *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Contact,0))){
    SWIG_fail_ptr("Contact_contactNormal_get",1,SWIGTYPE_p_cyclone__Contact);
  }
  
  result = (cyclone::Vector3 *)& ((arg1)->contactNormal);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contact_penetration_set(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Contact *arg1 = (cyclone::Contact *) 0 ;
  cyclone::real arg2 ;
  
  SWIG_check_num_args("cyclone::Contact::penetration",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Contact::penetration",1,"cyclone::Contact *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::Contact::penetration",2,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Contact,0))){
    SWIG_fail_ptr("Contact_penetration_set",1,SWIGTYPE_p_cyclone__Contact);
  }
  
  arg2 = (cyclone::real)lua_tonumber(L, 2);
  if (arg1) (arg1)->penetration = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contact_penetration_get(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Contact *arg1 = (cyclone::Contact *) 0 ;
  cyclone::real result;
  
  SWIG_check_num_args("cyclone::Contact::penetration",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Contact::penetration",1,"cyclone::Contact *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Contact,0))){
    SWIG_fail_ptr("Contact_penetration_get",1,SWIGTYPE_p_cyclone__Contact);
  }
  
  result = (cyclone::real) ((arg1)->penetration);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contact_setBodyData(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Contact *arg1 = (cyclone::Contact *) 0 ;
  cyclone::RigidBody *arg2 = (cyclone::RigidBody *) 0 ;
  cyclone::RigidBody *arg3 = (cyclone::RigidBody *) 0 ;
  cyclone::real arg4 ;
  cyclone::real arg5 ;
  
  SWIG_check_num_args("cyclone::Contact::setBodyData",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Contact::setBodyData",1,"cyclone::Contact *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::Contact::setBodyData",2,"cyclone::RigidBody *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cyclone::Contact::setBodyData",3,"cyclone::RigidBody *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cyclone::Contact::setBodyData",4,"cyclone::real");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cyclone::Contact::setBodyData",5,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Contact,0))){
    SWIG_fail_ptr("Contact_setBodyData",1,SWIGTYPE_p_cyclone__Contact);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("Contact_setBodyData",2,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("Contact_setBodyData",3,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  arg4 = (cyclone::real)lua_tonumber(L, 4);
  arg5 = (cyclone::real)lua_tonumber(L, 5);
  (arg1)->setBodyData(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Contact(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Contact *result = 0 ;
  
  SWIG_check_num_args("cyclone::Contact::Contact",0,0)
  result = (cyclone::Contact *)new cyclone::Contact();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__Contact,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Contact(void *obj) {
cyclone::Contact *arg1 = (cyclone::Contact *) obj;
delete arg1;
}
static int _proxy__wrap_new_Contact(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Contact);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Contact_attributes[] = {
    { "body", _wrap_Contact_body_get, _wrap_Contact_body_set },
    { "friction", _wrap_Contact_friction_get, _wrap_Contact_friction_set },
    { "restitution", _wrap_Contact_restitution_get, _wrap_Contact_restitution_set },
    { "contactPoint", _wrap_Contact_contactPoint_get, _wrap_Contact_contactPoint_set },
    { "contactNormal", _wrap_Contact_contactNormal_get, _wrap_Contact_contactNormal_set },
    { "penetration", _wrap_Contact_penetration_get, _wrap_Contact_penetration_set },
    {0,0,0}
};
static swig_lua_method swig_Contact_methods[]= {
    { "setBodyData", _wrap_Contact_setBodyData},
    {0,0}
};
static swig_lua_method swig_Contact_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Contact_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Contact_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Contact_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Contact_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Contact_Sf_SwigStatic = {
    "Contact",
    swig_Contact_Sf_SwigStatic_methods,
    swig_Contact_Sf_SwigStatic_attributes,
    swig_Contact_Sf_SwigStatic_constants,
    swig_Contact_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Contact_bases[] = {0};
static const char *swig_Contact_base_names[] = {0};
static swig_lua_class _wrap_class_Contact = { "Contact", "Contact", &SWIGTYPE_p_cyclone__Contact,_proxy__wrap_new_Contact, swig_delete_Contact, swig_Contact_methods, swig_Contact_attributes, &swig_Contact_Sf_SwigStatic, swig_Contact_meta, swig_Contact_bases, swig_Contact_base_names };

static int _wrap_ContactResolver_velocityIterationsUsed_set(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ContactResolver *arg1 = (cyclone::ContactResolver *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("cyclone::ContactResolver::velocityIterationsUsed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ContactResolver::velocityIterationsUsed",1,"cyclone::ContactResolver *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::ContactResolver::velocityIterationsUsed",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ContactResolver,0))){
    SWIG_fail_ptr("ContactResolver_velocityIterationsUsed_set",1,SWIGTYPE_p_cyclone__ContactResolver);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->velocityIterationsUsed = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ContactResolver_velocityIterationsUsed_get(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ContactResolver *arg1 = (cyclone::ContactResolver *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("cyclone::ContactResolver::velocityIterationsUsed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ContactResolver::velocityIterationsUsed",1,"cyclone::ContactResolver *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ContactResolver,0))){
    SWIG_fail_ptr("ContactResolver_velocityIterationsUsed_get",1,SWIGTYPE_p_cyclone__ContactResolver);
  }
  
  result = (unsigned int) ((arg1)->velocityIterationsUsed);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ContactResolver_positionIterationsUsed_set(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ContactResolver *arg1 = (cyclone::ContactResolver *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("cyclone::ContactResolver::positionIterationsUsed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ContactResolver::positionIterationsUsed",1,"cyclone::ContactResolver *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::ContactResolver::positionIterationsUsed",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ContactResolver,0))){
    SWIG_fail_ptr("ContactResolver_positionIterationsUsed_set",1,SWIGTYPE_p_cyclone__ContactResolver);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->positionIterationsUsed = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ContactResolver_positionIterationsUsed_get(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ContactResolver *arg1 = (cyclone::ContactResolver *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("cyclone::ContactResolver::positionIterationsUsed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ContactResolver::positionIterationsUsed",1,"cyclone::ContactResolver *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ContactResolver,0))){
    SWIG_fail_ptr("ContactResolver_positionIterationsUsed_get",1,SWIGTYPE_p_cyclone__ContactResolver);
  }
  
  result = (unsigned int) ((arg1)->positionIterationsUsed);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ContactResolver__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  cyclone::real arg2 ;
  cyclone::real arg3 ;
  cyclone::ContactResolver *result = 0 ;
  
  SWIG_check_num_args("cyclone::ContactResolver::ContactResolver",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cyclone::ContactResolver::ContactResolver",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::ContactResolver::ContactResolver",2,"cyclone::real");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::ContactResolver::ContactResolver",3,"cyclone::real");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (cyclone::real)lua_tonumber(L, 2);
  arg3 = (cyclone::real)lua_tonumber(L, 3);
  result = (cyclone::ContactResolver *)new cyclone::ContactResolver(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__ContactResolver,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ContactResolver__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  cyclone::real arg2 ;
  cyclone::ContactResolver *result = 0 ;
  
  SWIG_check_num_args("cyclone::ContactResolver::ContactResolver",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cyclone::ContactResolver::ContactResolver",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::ContactResolver::ContactResolver",2,"cyclone::real");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (cyclone::real)lua_tonumber(L, 2);
  result = (cyclone::ContactResolver *)new cyclone::ContactResolver(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__ContactResolver,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ContactResolver__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  cyclone::ContactResolver *result = 0 ;
  
  SWIG_check_num_args("cyclone::ContactResolver::ContactResolver",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cyclone::ContactResolver::ContactResolver",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (cyclone::ContactResolver *)new cyclone::ContactResolver(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__ContactResolver,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ContactResolver__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  cyclone::real arg3 ;
  cyclone::real arg4 ;
  cyclone::ContactResolver *result = 0 ;
  
  SWIG_check_num_args("cyclone::ContactResolver::ContactResolver",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cyclone::ContactResolver::ContactResolver",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::ContactResolver::ContactResolver",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::ContactResolver::ContactResolver",3,"cyclone::real");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cyclone::ContactResolver::ContactResolver",4,"cyclone::real");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (cyclone::real)lua_tonumber(L, 3);
  arg4 = (cyclone::real)lua_tonumber(L, 4);
  result = (cyclone::ContactResolver *)new cyclone::ContactResolver(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__ContactResolver,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ContactResolver__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  cyclone::real arg3 ;
  cyclone::ContactResolver *result = 0 ;
  
  SWIG_check_num_args("cyclone::ContactResolver::ContactResolver",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cyclone::ContactResolver::ContactResolver",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::ContactResolver::ContactResolver",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::ContactResolver::ContactResolver",3,"cyclone::real");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (cyclone::real)lua_tonumber(L, 3);
  result = (cyclone::ContactResolver *)new cyclone::ContactResolver(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__ContactResolver,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ContactResolver__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  cyclone::ContactResolver *result = 0 ;
  
  SWIG_check_num_args("cyclone::ContactResolver::ContactResolver",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cyclone::ContactResolver::ContactResolver",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::ContactResolver::ContactResolver",2,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (cyclone::ContactResolver *)new cyclone::ContactResolver(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__ContactResolver,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ContactResolver(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_ContactResolver__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_ContactResolver__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_ContactResolver__SWIG_5(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_ContactResolver__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_ContactResolver__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ContactResolver__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ContactResolver'\n"
    "  Possible C/C++ prototypes are:\n"
    "    cyclone::ContactResolver::ContactResolver(unsigned int,cyclone::real,cyclone::real)\n"
    "    cyclone::ContactResolver::ContactResolver(unsigned int,cyclone::real)\n"
    "    cyclone::ContactResolver::ContactResolver(unsigned int)\n"
    "    cyclone::ContactResolver::ContactResolver(unsigned int,unsigned int,cyclone::real,cyclone::real)\n"
    "    cyclone::ContactResolver::ContactResolver(unsigned int,unsigned int,cyclone::real)\n"
    "    cyclone::ContactResolver::ContactResolver(unsigned int,unsigned int)\n");
  lua_error(L);return 0;
}


static int _wrap_ContactResolver_isValid(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ContactResolver *arg1 = (cyclone::ContactResolver *) 0 ;
  bool result;
  
  SWIG_check_num_args("cyclone::ContactResolver::isValid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ContactResolver::isValid",1,"cyclone::ContactResolver *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ContactResolver,0))){
    SWIG_fail_ptr("ContactResolver_isValid",1,SWIGTYPE_p_cyclone__ContactResolver);
  }
  
  result = (bool)(arg1)->isValid();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ContactResolver_setIterations__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ContactResolver *arg1 = (cyclone::ContactResolver *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("cyclone::ContactResolver::setIterations",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ContactResolver::setIterations",1,"cyclone::ContactResolver *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::ContactResolver::setIterations",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::ContactResolver::setIterations",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ContactResolver,0))){
    SWIG_fail_ptr("ContactResolver_setIterations",1,SWIGTYPE_p_cyclone__ContactResolver);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  (arg1)->setIterations(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ContactResolver_setIterations__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ContactResolver *arg1 = (cyclone::ContactResolver *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("cyclone::ContactResolver::setIterations",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ContactResolver::setIterations",1,"cyclone::ContactResolver *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::ContactResolver::setIterations",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ContactResolver,0))){
    SWIG_fail_ptr("ContactResolver_setIterations",1,SWIGTYPE_p_cyclone__ContactResolver);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setIterations(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ContactResolver_setIterations(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__ContactResolver, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ContactResolver_setIterations__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__ContactResolver, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ContactResolver_setIterations__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ContactResolver_setIterations'\n"
    "  Possible C/C++ prototypes are:\n"
    "    cyclone::ContactResolver::setIterations(unsigned int,unsigned int)\n"
    "    cyclone::ContactResolver::setIterations(unsigned int)\n");
  lua_error(L);return 0;
}


static int _wrap_ContactResolver_setEpsilon(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ContactResolver *arg1 = (cyclone::ContactResolver *) 0 ;
  cyclone::real arg2 ;
  cyclone::real arg3 ;
  
  SWIG_check_num_args("cyclone::ContactResolver::setEpsilon",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ContactResolver::setEpsilon",1,"cyclone::ContactResolver *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::ContactResolver::setEpsilon",2,"cyclone::real");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::ContactResolver::setEpsilon",3,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ContactResolver,0))){
    SWIG_fail_ptr("ContactResolver_setEpsilon",1,SWIGTYPE_p_cyclone__ContactResolver);
  }
  
  arg2 = (cyclone::real)lua_tonumber(L, 2);
  arg3 = (cyclone::real)lua_tonumber(L, 3);
  (arg1)->setEpsilon(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ContactResolver_resolveContacts(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ContactResolver *arg1 = (cyclone::ContactResolver *) 0 ;
  cyclone::Contact *arg2 = (cyclone::Contact *) 0 ;
  unsigned int arg3 ;
  cyclone::real arg4 ;
  
  SWIG_check_num_args("cyclone::ContactResolver::resolveContacts",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ContactResolver::resolveContacts",1,"cyclone::ContactResolver *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::ContactResolver::resolveContacts",2,"cyclone::Contact *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::ContactResolver::resolveContacts",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cyclone::ContactResolver::resolveContacts",4,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ContactResolver,0))){
    SWIG_fail_ptr("ContactResolver_resolveContacts",1,SWIGTYPE_p_cyclone__ContactResolver);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Contact,0))){
    SWIG_fail_ptr("ContactResolver_resolveContacts",2,SWIGTYPE_p_cyclone__Contact);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  arg4 = (cyclone::real)lua_tonumber(L, 4);
  (arg1)->resolveContacts(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ContactResolver(void *obj) {
cyclone::ContactResolver *arg1 = (cyclone::ContactResolver *) obj;
delete arg1;
}
static int _proxy__wrap_new_ContactResolver(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ContactResolver);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ContactResolver_attributes[] = {
    { "velocityIterationsUsed", _wrap_ContactResolver_velocityIterationsUsed_get, _wrap_ContactResolver_velocityIterationsUsed_set },
    { "positionIterationsUsed", _wrap_ContactResolver_positionIterationsUsed_get, _wrap_ContactResolver_positionIterationsUsed_set },
    {0,0,0}
};
static swig_lua_method swig_ContactResolver_methods[]= {
    { "isValid", _wrap_ContactResolver_isValid},
    { "setIterations", _wrap_ContactResolver_setIterations},
    { "setEpsilon", _wrap_ContactResolver_setEpsilon},
    { "resolveContacts", _wrap_ContactResolver_resolveContacts},
    {0,0}
};
static swig_lua_method swig_ContactResolver_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ContactResolver_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ContactResolver_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ContactResolver_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ContactResolver_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ContactResolver_Sf_SwigStatic = {
    "ContactResolver",
    swig_ContactResolver_Sf_SwigStatic_methods,
    swig_ContactResolver_Sf_SwigStatic_attributes,
    swig_ContactResolver_Sf_SwigStatic_constants,
    swig_ContactResolver_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ContactResolver_bases[] = {0};
static const char *swig_ContactResolver_base_names[] = {0};
static swig_lua_class _wrap_class_ContactResolver = { "ContactResolver", "ContactResolver", &SWIGTYPE_p_cyclone__ContactResolver,_proxy__wrap_new_ContactResolver, swig_delete_ContactResolver, swig_ContactResolver_methods, swig_ContactResolver_attributes, &swig_ContactResolver_Sf_SwigStatic, swig_ContactResolver_meta, swig_ContactResolver_bases, swig_ContactResolver_base_names };

static int _wrap_ContactGenerator_addContact(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ContactGenerator *arg1 = (cyclone::ContactGenerator *) 0 ;
  cyclone::Contact *arg2 = (cyclone::Contact *) 0 ;
  unsigned int arg3 ;
  unsigned int result;
  
  SWIG_check_num_args("cyclone::ContactGenerator::addContact",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ContactGenerator::addContact",1,"cyclone::ContactGenerator const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::ContactGenerator::addContact",2,"cyclone::Contact *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::ContactGenerator::addContact",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ContactGenerator,0))){
    SWIG_fail_ptr("ContactGenerator_addContact",1,SWIGTYPE_p_cyclone__ContactGenerator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Contact,0))){
    SWIG_fail_ptr("ContactGenerator_addContact",2,SWIGTYPE_p_cyclone__Contact);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (unsigned int)((cyclone::ContactGenerator const *)arg1)->addContact(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ContactGenerator(void *obj) {
cyclone::ContactGenerator *arg1 = (cyclone::ContactGenerator *) obj;
delete arg1;
}
static swig_lua_attribute swig_ContactGenerator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ContactGenerator_methods[]= {
    { "addContact", _wrap_ContactGenerator_addContact},
    {0,0}
};
static swig_lua_method swig_ContactGenerator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ContactGenerator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ContactGenerator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ContactGenerator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ContactGenerator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ContactGenerator_Sf_SwigStatic = {
    "ContactGenerator",
    swig_ContactGenerator_Sf_SwigStatic_methods,
    swig_ContactGenerator_Sf_SwigStatic_attributes,
    swig_ContactGenerator_Sf_SwigStatic_constants,
    swig_ContactGenerator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ContactGenerator_bases[] = {0};
static const char *swig_ContactGenerator_base_names[] = {0};
static swig_lua_class _wrap_class_ContactGenerator = { "ContactGenerator", "ContactGenerator", &SWIGTYPE_p_cyclone__ContactGenerator,0, swig_delete_ContactGenerator, swig_ContactGenerator_methods, swig_ContactGenerator_attributes, &swig_ContactGenerator_Sf_SwigStatic, swig_ContactGenerator_meta, swig_ContactGenerator_bases, swig_ContactGenerator_base_names };

static int _wrap_ForceGenerator_updateForce(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ForceGenerator *arg1 = (cyclone::ForceGenerator *) 0 ;
  cyclone::RigidBody *arg2 = (cyclone::RigidBody *) 0 ;
  cyclone::real arg3 ;
  
  SWIG_check_num_args("cyclone::ForceGenerator::updateForce",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ForceGenerator::updateForce",1,"cyclone::ForceGenerator *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::ForceGenerator::updateForce",2,"cyclone::RigidBody *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::ForceGenerator::updateForce",3,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ForceGenerator,0))){
    SWIG_fail_ptr("ForceGenerator_updateForce",1,SWIGTYPE_p_cyclone__ForceGenerator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("ForceGenerator_updateForce",2,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  arg3 = (cyclone::real)lua_tonumber(L, 3);
  (arg1)->updateForce(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ForceGenerator(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ForceGenerator *result = 0 ;
  
  SWIG_check_num_args("cyclone::ForceGenerator::ForceGenerator",0,0)
  result = (cyclone::ForceGenerator *)new cyclone::ForceGenerator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__ForceGenerator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ForceGenerator(void *obj) {
cyclone::ForceGenerator *arg1 = (cyclone::ForceGenerator *) obj;
delete arg1;
}
static int _proxy__wrap_new_ForceGenerator(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ForceGenerator);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ForceGenerator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ForceGenerator_methods[]= {
    { "updateForce", _wrap_ForceGenerator_updateForce},
    {0,0}
};
static swig_lua_method swig_ForceGenerator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ForceGenerator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ForceGenerator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ForceGenerator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ForceGenerator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ForceGenerator_Sf_SwigStatic = {
    "ForceGenerator",
    swig_ForceGenerator_Sf_SwigStatic_methods,
    swig_ForceGenerator_Sf_SwigStatic_attributes,
    swig_ForceGenerator_Sf_SwigStatic_constants,
    swig_ForceGenerator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ForceGenerator_bases[] = {0};
static const char *swig_ForceGenerator_base_names[] = {0};
static swig_lua_class _wrap_class_ForceGenerator = { "ForceGenerator", "ForceGenerator", &SWIGTYPE_p_cyclone__ForceGenerator,_proxy__wrap_new_ForceGenerator, swig_delete_ForceGenerator, swig_ForceGenerator_methods, swig_ForceGenerator_attributes, &swig_ForceGenerator_Sf_SwigStatic, swig_ForceGenerator_meta, swig_ForceGenerator_bases, swig_ForceGenerator_base_names };

static int _wrap_new_Gravity(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Vector3 *arg1 = 0 ;
  cyclone::Gravity *result = 0 ;
  
  SWIG_check_num_args("cyclone::Gravity::Gravity",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("cyclone::Gravity::Gravity",1,"cyclone::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("new_Gravity",1,SWIGTYPE_p_cyclone__Vector3);
  }
  
  result = (cyclone::Gravity *)new cyclone::Gravity((cyclone::Vector3 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__Gravity,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Gravity_updateForce(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Gravity *arg1 = (cyclone::Gravity *) 0 ;
  cyclone::RigidBody *arg2 = (cyclone::RigidBody *) 0 ;
  cyclone::real arg3 ;
  
  SWIG_check_num_args("cyclone::Gravity::updateForce",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Gravity::updateForce",1,"cyclone::Gravity *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::Gravity::updateForce",2,"cyclone::RigidBody *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::Gravity::updateForce",3,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Gravity,0))){
    SWIG_fail_ptr("Gravity_updateForce",1,SWIGTYPE_p_cyclone__Gravity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("Gravity_updateForce",2,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  arg3 = (cyclone::real)lua_tonumber(L, 3);
  (arg1)->updateForce(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Gravity(void *obj) {
cyclone::Gravity *arg1 = (cyclone::Gravity *) obj;
delete arg1;
}
static int _proxy__wrap_new_Gravity(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Gravity);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Gravity_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Gravity_methods[]= {
    { "updateForce", _wrap_Gravity_updateForce},
    {0,0}
};
static swig_lua_method swig_Gravity_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Gravity_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Gravity_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Gravity_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Gravity_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Gravity_Sf_SwigStatic = {
    "Gravity",
    swig_Gravity_Sf_SwigStatic_methods,
    swig_Gravity_Sf_SwigStatic_attributes,
    swig_Gravity_Sf_SwigStatic_constants,
    swig_Gravity_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Gravity_bases[] = {0,0};
static const char *swig_Gravity_base_names[] = {"cyclone::ForceGenerator *",0};
static swig_lua_class _wrap_class_Gravity = { "Gravity", "Gravity", &SWIGTYPE_p_cyclone__Gravity,_proxy__wrap_new_Gravity, swig_delete_Gravity, swig_Gravity_methods, swig_Gravity_attributes, &swig_Gravity_Sf_SwigStatic, swig_Gravity_meta, swig_Gravity_bases, swig_Gravity_base_names };

static int _wrap_new_Spring(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Vector3 *arg1 = 0 ;
  cyclone::RigidBody *arg2 = (cyclone::RigidBody *) 0 ;
  cyclone::Vector3 *arg3 = 0 ;
  cyclone::real arg4 ;
  cyclone::real arg5 ;
  cyclone::Spring *result = 0 ;
  
  SWIG_check_num_args("cyclone::Spring::Spring",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("cyclone::Spring::Spring",1,"cyclone::Vector3 const &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::Spring::Spring",2,"cyclone::RigidBody *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("cyclone::Spring::Spring",3,"cyclone::Vector3 const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cyclone::Spring::Spring",4,"cyclone::real");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cyclone::Spring::Spring",5,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("new_Spring",1,SWIGTYPE_p_cyclone__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("new_Spring",2,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("new_Spring",3,SWIGTYPE_p_cyclone__Vector3);
  }
  
  arg4 = (cyclone::real)lua_tonumber(L, 4);
  arg5 = (cyclone::real)lua_tonumber(L, 5);
  result = (cyclone::Spring *)new cyclone::Spring((cyclone::Vector3 const &)*arg1,arg2,(cyclone::Vector3 const &)*arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__Spring,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Spring_updateForce(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Spring *arg1 = (cyclone::Spring *) 0 ;
  cyclone::RigidBody *arg2 = (cyclone::RigidBody *) 0 ;
  cyclone::real arg3 ;
  
  SWIG_check_num_args("cyclone::Spring::updateForce",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Spring::updateForce",1,"cyclone::Spring *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::Spring::updateForce",2,"cyclone::RigidBody *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::Spring::updateForce",3,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Spring,0))){
    SWIG_fail_ptr("Spring_updateForce",1,SWIGTYPE_p_cyclone__Spring);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("Spring_updateForce",2,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  arg3 = (cyclone::real)lua_tonumber(L, 3);
  (arg1)->updateForce(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Spring(void *obj) {
cyclone::Spring *arg1 = (cyclone::Spring *) obj;
delete arg1;
}
static int _proxy__wrap_new_Spring(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Spring);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Spring_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Spring_methods[]= {
    { "updateForce", _wrap_Spring_updateForce},
    {0,0}
};
static swig_lua_method swig_Spring_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Spring_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Spring_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Spring_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Spring_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Spring_Sf_SwigStatic = {
    "Spring",
    swig_Spring_Sf_SwigStatic_methods,
    swig_Spring_Sf_SwigStatic_attributes,
    swig_Spring_Sf_SwigStatic_constants,
    swig_Spring_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Spring_bases[] = {0,0};
static const char *swig_Spring_base_names[] = {"cyclone::ForceGenerator *",0};
static swig_lua_class _wrap_class_Spring = { "Spring", "Spring", &SWIGTYPE_p_cyclone__Spring,_proxy__wrap_new_Spring, swig_delete_Spring, swig_Spring_methods, swig_Spring_attributes, &swig_Spring_Sf_SwigStatic, swig_Spring_meta, swig_Spring_bases, swig_Spring_base_names };

static int _wrap_new_Aero(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Matrix3 *arg1 = 0 ;
  cyclone::Vector3 *arg2 = 0 ;
  cyclone::Vector3 *arg3 = (cyclone::Vector3 *) 0 ;
  cyclone::Aero *result = 0 ;
  
  SWIG_check_num_args("cyclone::Aero::Aero",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("cyclone::Aero::Aero",1,"cyclone::Matrix3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::Aero::Aero",2,"cyclone::Vector3 const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cyclone::Aero::Aero",3,"cyclone::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Matrix3,0))){
    SWIG_fail_ptr("new_Aero",1,SWIGTYPE_p_cyclone__Matrix3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("new_Aero",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("new_Aero",3,SWIGTYPE_p_cyclone__Vector3);
  }
  
  result = (cyclone::Aero *)new cyclone::Aero((cyclone::Matrix3 const &)*arg1,(cyclone::Vector3 const &)*arg2,(cyclone::Vector3 const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__Aero,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Aero_updateForce(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Aero *arg1 = (cyclone::Aero *) 0 ;
  cyclone::RigidBody *arg2 = (cyclone::RigidBody *) 0 ;
  cyclone::real arg3 ;
  
  SWIG_check_num_args("cyclone::Aero::updateForce",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Aero::updateForce",1,"cyclone::Aero *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::Aero::updateForce",2,"cyclone::RigidBody *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::Aero::updateForce",3,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Aero,0))){
    SWIG_fail_ptr("Aero_updateForce",1,SWIGTYPE_p_cyclone__Aero);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("Aero_updateForce",2,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  arg3 = (cyclone::real)lua_tonumber(L, 3);
  (arg1)->updateForce(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Aero(void *obj) {
cyclone::Aero *arg1 = (cyclone::Aero *) obj;
delete arg1;
}
static int _proxy__wrap_new_Aero(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Aero);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Aero_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Aero_methods[]= {
    { "updateForce", _wrap_Aero_updateForce},
    {0,0}
};
static swig_lua_method swig_Aero_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Aero_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Aero_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Aero_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Aero_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Aero_Sf_SwigStatic = {
    "Aero",
    swig_Aero_Sf_SwigStatic_methods,
    swig_Aero_Sf_SwigStatic_attributes,
    swig_Aero_Sf_SwigStatic_constants,
    swig_Aero_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Aero_bases[] = {0,0};
static const char *swig_Aero_base_names[] = {"cyclone::ForceGenerator *",0};
static swig_lua_class _wrap_class_Aero = { "Aero", "Aero", &SWIGTYPE_p_cyclone__Aero,_proxy__wrap_new_Aero, swig_delete_Aero, swig_Aero_methods, swig_Aero_attributes, &swig_Aero_Sf_SwigStatic, swig_Aero_meta, swig_Aero_bases, swig_Aero_base_names };

static int _wrap_new_AeroEx(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Matrix3 *arg1 = 0 ;
  cyclone::Vector3 *arg2 = 0 ;
  cyclone::Vector3 *arg3 = (cyclone::Vector3 *) 0 ;
  cyclone::AeroEx *result = 0 ;
  
  SWIG_check_num_args("cyclone::AeroEx::AeroEx",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("cyclone::AeroEx::AeroEx",1,"cyclone::Matrix3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::AeroEx::AeroEx",2,"cyclone::Vector3 const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cyclone::AeroEx::AeroEx",3,"cyclone::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Matrix3,0))){
    SWIG_fail_ptr("new_AeroEx",1,SWIGTYPE_p_cyclone__Matrix3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("new_AeroEx",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("new_AeroEx",3,SWIGTYPE_p_cyclone__Vector3);
  }
  
  result = (cyclone::AeroEx *)new cyclone::AeroEx((cyclone::Matrix3 const &)*arg1,(cyclone::Vector3 const &)*arg2,(cyclone::Vector3 const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__AeroEx,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AeroEx_updateWindspeed(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::AeroEx *arg1 = (cyclone::AeroEx *) 0 ;
  cyclone::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("cyclone::AeroEx::updateWindspeed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::AeroEx::updateWindspeed",1,"cyclone::AeroEx *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::AeroEx::updateWindspeed",2,"cyclone::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__AeroEx,0))){
    SWIG_fail_ptr("AeroEx_updateWindspeed",1,SWIGTYPE_p_cyclone__AeroEx);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("AeroEx_updateWindspeed",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  (arg1)->updateWindspeed((cyclone::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AeroEx(void *obj) {
cyclone::AeroEx *arg1 = (cyclone::AeroEx *) obj;
delete arg1;
}
static int _proxy__wrap_new_AeroEx(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_AeroEx);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_AeroEx_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AeroEx_methods[]= {
    { "updateWindspeed", _wrap_AeroEx_updateWindspeed},
    {0,0}
};
static swig_lua_method swig_AeroEx_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AeroEx_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AeroEx_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AeroEx_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AeroEx_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AeroEx_Sf_SwigStatic = {
    "AeroEx",
    swig_AeroEx_Sf_SwigStatic_methods,
    swig_AeroEx_Sf_SwigStatic_attributes,
    swig_AeroEx_Sf_SwigStatic_constants,
    swig_AeroEx_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AeroEx_bases[] = {0,0};
static const char *swig_AeroEx_base_names[] = {"cyclone::Aero *",0};
static swig_lua_class _wrap_class_AeroEx = { "AeroEx", "AeroEx", &SWIGTYPE_p_cyclone__AeroEx,_proxy__wrap_new_AeroEx, swig_delete_AeroEx, swig_AeroEx_methods, swig_AeroEx_attributes, &swig_AeroEx_Sf_SwigStatic, swig_AeroEx_meta, swig_AeroEx_bases, swig_AeroEx_base_names };

static int _wrap_new_AeroControl(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Matrix3 *arg1 = 0 ;
  cyclone::Matrix3 *arg2 = 0 ;
  cyclone::Matrix3 *arg3 = 0 ;
  cyclone::Vector3 *arg4 = 0 ;
  cyclone::Vector3 *arg5 = (cyclone::Vector3 *) 0 ;
  cyclone::AeroControl *result = 0 ;
  
  SWIG_check_num_args("cyclone::AeroControl::AeroControl",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("cyclone::AeroControl::AeroControl",1,"cyclone::Matrix3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cyclone::AeroControl::AeroControl",2,"cyclone::Matrix3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("cyclone::AeroControl::AeroControl",3,"cyclone::Matrix3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("cyclone::AeroControl::AeroControl",4,"cyclone::Vector3 const &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cyclone::AeroControl::AeroControl",5,"cyclone::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Matrix3,0))){
    SWIG_fail_ptr("new_AeroControl",1,SWIGTYPE_p_cyclone__Matrix3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Matrix3,0))){
    SWIG_fail_ptr("new_AeroControl",2,SWIGTYPE_p_cyclone__Matrix3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_cyclone__Matrix3,0))){
    SWIG_fail_ptr("new_AeroControl",3,SWIGTYPE_p_cyclone__Matrix3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("new_AeroControl",4,SWIGTYPE_p_cyclone__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("new_AeroControl",5,SWIGTYPE_p_cyclone__Vector3);
  }
  
  result = (cyclone::AeroControl *)new cyclone::AeroControl((cyclone::Matrix3 const &)*arg1,(cyclone::Matrix3 const &)*arg2,(cyclone::Matrix3 const &)*arg3,(cyclone::Vector3 const &)*arg4,(cyclone::Vector3 const *)arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__AeroControl,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AeroControl_setControl(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::AeroControl *arg1 = (cyclone::AeroControl *) 0 ;
  cyclone::real arg2 ;
  
  SWIG_check_num_args("cyclone::AeroControl::setControl",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::AeroControl::setControl",1,"cyclone::AeroControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::AeroControl::setControl",2,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__AeroControl,0))){
    SWIG_fail_ptr("AeroControl_setControl",1,SWIGTYPE_p_cyclone__AeroControl);
  }
  
  arg2 = (cyclone::real)lua_tonumber(L, 2);
  (arg1)->setControl(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AeroControl_updateForce(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::AeroControl *arg1 = (cyclone::AeroControl *) 0 ;
  cyclone::RigidBody *arg2 = (cyclone::RigidBody *) 0 ;
  cyclone::real arg3 ;
  
  SWIG_check_num_args("cyclone::AeroControl::updateForce",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::AeroControl::updateForce",1,"cyclone::AeroControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::AeroControl::updateForce",2,"cyclone::RigidBody *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::AeroControl::updateForce",3,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__AeroControl,0))){
    SWIG_fail_ptr("AeroControl_updateForce",1,SWIGTYPE_p_cyclone__AeroControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("AeroControl_updateForce",2,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  arg3 = (cyclone::real)lua_tonumber(L, 3);
  (arg1)->updateForce(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AeroControl(void *obj) {
cyclone::AeroControl *arg1 = (cyclone::AeroControl *) obj;
delete arg1;
}
static int _proxy__wrap_new_AeroControl(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_AeroControl);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_AeroControl_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AeroControl_methods[]= {
    { "setControl", _wrap_AeroControl_setControl},
    { "updateForce", _wrap_AeroControl_updateForce},
    {0,0}
};
static swig_lua_method swig_AeroControl_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AeroControl_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AeroControl_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AeroControl_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AeroControl_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AeroControl_Sf_SwigStatic = {
    "AeroControl",
    swig_AeroControl_Sf_SwigStatic_methods,
    swig_AeroControl_Sf_SwigStatic_attributes,
    swig_AeroControl_Sf_SwigStatic_constants,
    swig_AeroControl_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AeroControl_bases[] = {0,0};
static const char *swig_AeroControl_base_names[] = {"cyclone::AeroEx *",0};
static swig_lua_class _wrap_class_AeroControl = { "AeroControl", "AeroControl", &SWIGTYPE_p_cyclone__AeroControl,_proxy__wrap_new_AeroControl, swig_delete_AeroControl, swig_AeroControl_methods, swig_AeroControl_attributes, &swig_AeroControl_Sf_SwigStatic, swig_AeroControl_meta, swig_AeroControl_bases, swig_AeroControl_base_names };

static int _wrap_new_Buoyancy__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Vector3 *arg1 = 0 ;
  cyclone::real arg2 ;
  cyclone::real arg3 ;
  cyclone::real arg4 ;
  cyclone::real arg5 ;
  cyclone::Buoyancy *result = 0 ;
  
  SWIG_check_num_args("cyclone::Buoyancy::Buoyancy",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("cyclone::Buoyancy::Buoyancy",1,"cyclone::Vector3 const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::Buoyancy::Buoyancy",2,"cyclone::real");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::Buoyancy::Buoyancy",3,"cyclone::real");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cyclone::Buoyancy::Buoyancy",4,"cyclone::real");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cyclone::Buoyancy::Buoyancy",5,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("new_Buoyancy",1,SWIGTYPE_p_cyclone__Vector3);
  }
  
  arg2 = (cyclone::real)lua_tonumber(L, 2);
  arg3 = (cyclone::real)lua_tonumber(L, 3);
  arg4 = (cyclone::real)lua_tonumber(L, 4);
  arg5 = (cyclone::real)lua_tonumber(L, 5);
  result = (cyclone::Buoyancy *)new cyclone::Buoyancy((cyclone::Vector3 const &)*arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__Buoyancy,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Buoyancy__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Vector3 *arg1 = 0 ;
  cyclone::real arg2 ;
  cyclone::real arg3 ;
  cyclone::real arg4 ;
  cyclone::Buoyancy *result = 0 ;
  
  SWIG_check_num_args("cyclone::Buoyancy::Buoyancy",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("cyclone::Buoyancy::Buoyancy",1,"cyclone::Vector3 const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::Buoyancy::Buoyancy",2,"cyclone::real");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::Buoyancy::Buoyancy",3,"cyclone::real");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cyclone::Buoyancy::Buoyancy",4,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("new_Buoyancy",1,SWIGTYPE_p_cyclone__Vector3);
  }
  
  arg2 = (cyclone::real)lua_tonumber(L, 2);
  arg3 = (cyclone::real)lua_tonumber(L, 3);
  arg4 = (cyclone::real)lua_tonumber(L, 4);
  result = (cyclone::Buoyancy *)new cyclone::Buoyancy((cyclone::Vector3 const &)*arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__Buoyancy,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Buoyancy(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_Buoyancy__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_Buoyancy__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Buoyancy'\n"
    "  Possible C/C++ prototypes are:\n"
    "    cyclone::Buoyancy::Buoyancy(cyclone::Vector3 const &,cyclone::real,cyclone::real,cyclone::real,cyclone::real)\n"
    "    cyclone::Buoyancy::Buoyancy(cyclone::Vector3 const &,cyclone::real,cyclone::real,cyclone::real)\n");
  lua_error(L);return 0;
}


static int _wrap_Buoyancy_updateForce(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Buoyancy *arg1 = (cyclone::Buoyancy *) 0 ;
  cyclone::RigidBody *arg2 = (cyclone::RigidBody *) 0 ;
  cyclone::real arg3 ;
  
  SWIG_check_num_args("cyclone::Buoyancy::updateForce",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Buoyancy::updateForce",1,"cyclone::Buoyancy *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::Buoyancy::updateForce",2,"cyclone::RigidBody *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::Buoyancy::updateForce",3,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Buoyancy,0))){
    SWIG_fail_ptr("Buoyancy_updateForce",1,SWIGTYPE_p_cyclone__Buoyancy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("Buoyancy_updateForce",2,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  arg3 = (cyclone::real)lua_tonumber(L, 3);
  (arg1)->updateForce(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Buoyancy(void *obj) {
cyclone::Buoyancy *arg1 = (cyclone::Buoyancy *) obj;
delete arg1;
}
static int _proxy__wrap_new_Buoyancy(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Buoyancy);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Buoyancy_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Buoyancy_methods[]= {
    { "updateForce", _wrap_Buoyancy_updateForce},
    {0,0}
};
static swig_lua_method swig_Buoyancy_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Buoyancy_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Buoyancy_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Buoyancy_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Buoyancy_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Buoyancy_Sf_SwigStatic = {
    "Buoyancy",
    swig_Buoyancy_Sf_SwigStatic_methods,
    swig_Buoyancy_Sf_SwigStatic_attributes,
    swig_Buoyancy_Sf_SwigStatic_constants,
    swig_Buoyancy_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Buoyancy_bases[] = {0,0};
static const char *swig_Buoyancy_base_names[] = {"cyclone::ForceGenerator *",0};
static swig_lua_class _wrap_class_Buoyancy = { "Buoyancy", "Buoyancy", &SWIGTYPE_p_cyclone__Buoyancy,_proxy__wrap_new_Buoyancy, swig_delete_Buoyancy, swig_Buoyancy_methods, swig_Buoyancy_attributes, &swig_Buoyancy_Sf_SwigStatic, swig_Buoyancy_meta, swig_Buoyancy_bases, swig_Buoyancy_base_names };

static int _wrap_ForceRegistry_add(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ForceRegistry *arg1 = (cyclone::ForceRegistry *) 0 ;
  cyclone::RigidBody *arg2 = (cyclone::RigidBody *) 0 ;
  cyclone::ForceGenerator *arg3 = (cyclone::ForceGenerator *) 0 ;
  
  SWIG_check_num_args("cyclone::ForceRegistry::add",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ForceRegistry::add",1,"cyclone::ForceRegistry *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::ForceRegistry::add",2,"cyclone::RigidBody *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cyclone::ForceRegistry::add",3,"cyclone::ForceGenerator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ForceRegistry,0))){
    SWIG_fail_ptr("ForceRegistry_add",1,SWIGTYPE_p_cyclone__ForceRegistry);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("ForceRegistry_add",2,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_cyclone__ForceGenerator,0))){
    SWIG_fail_ptr("ForceRegistry_add",3,SWIGTYPE_p_cyclone__ForceGenerator);
  }
  
  (arg1)->add(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ForceRegistry_remove(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ForceRegistry *arg1 = (cyclone::ForceRegistry *) 0 ;
  cyclone::RigidBody *arg2 = (cyclone::RigidBody *) 0 ;
  cyclone::ForceGenerator *arg3 = (cyclone::ForceGenerator *) 0 ;
  
  SWIG_check_num_args("cyclone::ForceRegistry::remove",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ForceRegistry::remove",1,"cyclone::ForceRegistry *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::ForceRegistry::remove",2,"cyclone::RigidBody *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cyclone::ForceRegistry::remove",3,"cyclone::ForceGenerator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ForceRegistry,0))){
    SWIG_fail_ptr("ForceRegistry_remove",1,SWIGTYPE_p_cyclone__ForceRegistry);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("ForceRegistry_remove",2,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_cyclone__ForceGenerator,0))){
    SWIG_fail_ptr("ForceRegistry_remove",3,SWIGTYPE_p_cyclone__ForceGenerator);
  }
  
  (arg1)->remove(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ForceRegistry_clear(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ForceRegistry *arg1 = (cyclone::ForceRegistry *) 0 ;
  
  SWIG_check_num_args("cyclone::ForceRegistry::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ForceRegistry::clear",1,"cyclone::ForceRegistry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ForceRegistry,0))){
    SWIG_fail_ptr("ForceRegistry_clear",1,SWIGTYPE_p_cyclone__ForceRegistry);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ForceRegistry_updateForces(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ForceRegistry *arg1 = (cyclone::ForceRegistry *) 0 ;
  cyclone::real arg2 ;
  
  SWIG_check_num_args("cyclone::ForceRegistry::updateForces",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::ForceRegistry::updateForces",1,"cyclone::ForceRegistry *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::ForceRegistry::updateForces",2,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__ForceRegistry,0))){
    SWIG_fail_ptr("ForceRegistry_updateForces",1,SWIGTYPE_p_cyclone__ForceRegistry);
  }
  
  arg2 = (cyclone::real)lua_tonumber(L, 2);
  (arg1)->updateForces(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ForceRegistry(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::ForceRegistry *result = 0 ;
  
  SWIG_check_num_args("cyclone::ForceRegistry::ForceRegistry",0,0)
  result = (cyclone::ForceRegistry *)new cyclone::ForceRegistry();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__ForceRegistry,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ForceRegistry(void *obj) {
cyclone::ForceRegistry *arg1 = (cyclone::ForceRegistry *) obj;
delete arg1;
}
static int _proxy__wrap_new_ForceRegistry(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ForceRegistry);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ForceRegistry_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ForceRegistry_methods[]= {
    { "add", _wrap_ForceRegistry_add},
    { "remove", _wrap_ForceRegistry_remove},
    { "clear", _wrap_ForceRegistry_clear},
    { "updateForces", _wrap_ForceRegistry_updateForces},
    {0,0}
};
static swig_lua_method swig_ForceRegistry_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ForceRegistry_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ForceRegistry_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ForceRegistry_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ForceRegistry_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ForceRegistry_Sf_SwigStatic = {
    "ForceRegistry",
    swig_ForceRegistry_Sf_SwigStatic_methods,
    swig_ForceRegistry_Sf_SwigStatic_attributes,
    swig_ForceRegistry_Sf_SwigStatic_constants,
    swig_ForceRegistry_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ForceRegistry_bases[] = {0};
static const char *swig_ForceRegistry_base_names[] = {0};
static swig_lua_class _wrap_class_ForceRegistry = { "ForceRegistry", "ForceRegistry", &SWIGTYPE_p_cyclone__ForceRegistry,_proxy__wrap_new_ForceRegistry, swig_delete_ForceRegistry, swig_ForceRegistry_methods, swig_ForceRegistry_attributes, &swig_ForceRegistry_Sf_SwigStatic, swig_ForceRegistry_meta, swig_ForceRegistry_bases, swig_ForceRegistry_base_names };

static int _wrap_Joint_body_set(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Joint *arg1 = (cyclone::Joint *) 0 ;
  cyclone::RigidBody **arg2 ;
  
  SWIG_check_num_args("cyclone::Joint::body",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Joint::body",1,"cyclone::Joint *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::Joint::body",2,"cyclone::RigidBody *[2]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Joint,0))){
    SWIG_fail_ptr("Joint_body_set",1,SWIGTYPE_p_cyclone__Joint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("Joint_body_set",2,SWIGTYPE_p_p_cyclone__RigidBody);
  }
  
  {
    size_t ii;
    cyclone::RigidBody * *b = (cyclone::RigidBody * *) arg1->body;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((cyclone::RigidBody * *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Joint_body_get(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Joint *arg1 = (cyclone::Joint *) 0 ;
  cyclone::RigidBody **result = 0 ;
  
  SWIG_check_num_args("cyclone::Joint::body",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Joint::body",1,"cyclone::Joint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Joint,0))){
    SWIG_fail_ptr("Joint_body_get",1,SWIGTYPE_p_cyclone__Joint);
  }
  
  result = (cyclone::RigidBody **)(cyclone::RigidBody **) ((arg1)->body);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_cyclone__RigidBody,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Joint_position_set(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Joint *arg1 = (cyclone::Joint *) 0 ;
  cyclone::Vector3 *arg2 ;
  
  SWIG_check_num_args("cyclone::Joint::position",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Joint::position",1,"cyclone::Joint *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::Joint::position",2,"cyclone::Vector3 [2]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Joint,0))){
    SWIG_fail_ptr("Joint_position_set",1,SWIGTYPE_p_cyclone__Joint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Joint_position_set",2,SWIGTYPE_p_cyclone__Vector3);
  }
  
  {
    size_t ii;
    cyclone::Vector3 *b = (cyclone::Vector3 *) arg1->position;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((cyclone::Vector3 *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Joint_position_get(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Joint *arg1 = (cyclone::Joint *) 0 ;
  cyclone::Vector3 *result = 0 ;
  
  SWIG_check_num_args("cyclone::Joint::position",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Joint::position",1,"cyclone::Joint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Joint,0))){
    SWIG_fail_ptr("Joint_position_get",1,SWIGTYPE_p_cyclone__Joint);
  }
  
  result = (cyclone::Vector3 *)(cyclone::Vector3 *) ((arg1)->position);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Joint_error_set(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Joint *arg1 = (cyclone::Joint *) 0 ;
  cyclone::real arg2 ;
  
  SWIG_check_num_args("cyclone::Joint::error",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Joint::error",1,"cyclone::Joint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cyclone::Joint::error",2,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Joint,0))){
    SWIG_fail_ptr("Joint_error_set",1,SWIGTYPE_p_cyclone__Joint);
  }
  
  arg2 = (cyclone::real)lua_tonumber(L, 2);
  if (arg1) (arg1)->error = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Joint_error_get(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Joint *arg1 = (cyclone::Joint *) 0 ;
  cyclone::real result;
  
  SWIG_check_num_args("cyclone::Joint::error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Joint::error",1,"cyclone::Joint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Joint,0))){
    SWIG_fail_ptr("Joint_error_get",1,SWIGTYPE_p_cyclone__Joint);
  }
  
  result = (cyclone::real) ((arg1)->error);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Joint_init(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Joint *arg1 = (cyclone::Joint *) 0 ;
  cyclone::RigidBody *arg2 = (cyclone::RigidBody *) 0 ;
  cyclone::Vector3 *arg3 = 0 ;
  cyclone::RigidBody *arg4 = (cyclone::RigidBody *) 0 ;
  cyclone::Vector3 *arg5 = 0 ;
  cyclone::real arg6 ;
  
  SWIG_check_num_args("cyclone::Joint::init",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Joint::init",1,"cyclone::Joint *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::Joint::init",2,"cyclone::RigidBody *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("cyclone::Joint::init",3,"cyclone::Vector3 const &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cyclone::Joint::init",4,"cyclone::RigidBody *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("cyclone::Joint::init",5,"cyclone::Vector3 const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cyclone::Joint::init",6,"cyclone::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Joint,0))){
    SWIG_fail_ptr("Joint_init",1,SWIGTYPE_p_cyclone__Joint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("Joint_init",2,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Joint_init",3,SWIGTYPE_p_cyclone__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_cyclone__RigidBody,0))){
    SWIG_fail_ptr("Joint_init",4,SWIGTYPE_p_cyclone__RigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_cyclone__Vector3,0))){
    SWIG_fail_ptr("Joint_init",5,SWIGTYPE_p_cyclone__Vector3);
  }
  
  arg6 = (cyclone::real)lua_tonumber(L, 6);
  (arg1)->init(arg2,(cyclone::Vector3 const &)*arg3,arg4,(cyclone::Vector3 const &)*arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Joint_addContact(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Joint *arg1 = (cyclone::Joint *) 0 ;
  cyclone::Contact *arg2 = (cyclone::Contact *) 0 ;
  unsigned int arg3 ;
  unsigned int result;
  
  SWIG_check_num_args("cyclone::Joint::addContact",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cyclone::Joint::addContact",1,"cyclone::Joint const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cyclone::Joint::addContact",2,"cyclone::Contact *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cyclone::Joint::addContact",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cyclone__Joint,0))){
    SWIG_fail_ptr("Joint_addContact",1,SWIGTYPE_p_cyclone__Joint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cyclone__Contact,0))){
    SWIG_fail_ptr("Joint_addContact",2,SWIGTYPE_p_cyclone__Contact);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (unsigned int)((cyclone::Joint const *)arg1)->addContact(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Joint(lua_State* L) {
  int SWIG_arg = 0;
  cyclone::Joint *result = 0 ;
  
  SWIG_check_num_args("cyclone::Joint::Joint",0,0)
  result = (cyclone::Joint *)new cyclone::Joint();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cyclone__Joint,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Joint(void *obj) {
cyclone::Joint *arg1 = (cyclone::Joint *) obj;
delete arg1;
}
static int _proxy__wrap_new_Joint(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Joint);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Joint_attributes[] = {
    { "body", _wrap_Joint_body_get, _wrap_Joint_body_set },
    { "position", _wrap_Joint_position_get, _wrap_Joint_position_set },
    { "error", _wrap_Joint_error_get, _wrap_Joint_error_set },
    {0,0,0}
};
static swig_lua_method swig_Joint_methods[]= {
    { "init", _wrap_Joint_init},
    { "addContact", _wrap_Joint_addContact},
    {0,0}
};
static swig_lua_method swig_Joint_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Joint_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Joint_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Joint_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Joint_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Joint_Sf_SwigStatic = {
    "Joint",
    swig_Joint_Sf_SwigStatic_methods,
    swig_Joint_Sf_SwigStatic_attributes,
    swig_Joint_Sf_SwigStatic_constants,
    swig_Joint_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Joint_bases[] = {0,0};
static const char *swig_Joint_base_names[] = {"cyclone::ContactGenerator *",0};
static swig_lua_class _wrap_class_Joint = { "Joint", "Joint", &SWIGTYPE_p_cyclone__Joint,_proxy__wrap_new_Joint, swig_delete_Joint, swig_Joint_methods, swig_Joint_attributes, &swig_Joint_Sf_SwigStatic, swig_Joint_meta, swig_Joint_bases, swig_Joint_base_names };

static swig_lua_attribute swig_SwigModule_attributes[] = {
    { "sleepEpsilon", _wrap_sleepEpsilon_get, _wrap_sleepEpsilon_set },
    {0,0,0}
};
static swig_lua_const_info swig_SwigModule_constants[]= {
    {SWIG_LUA_CONSTTAB_FLOAT("R_PI", 3.14159265358979)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SwigModule_methods[]= {
    { "new_intArray", _wrap_new_intArray},
    { "delete_intArray", _wrap_delete_intArray},
    { "intArray_getitem", _wrap_intArray_getitem},
    { "intArray_setitem", _wrap_intArray_setitem},
    { "new_floatArray", _wrap_new_floatArray},
    { "delete_floatArray", _wrap_delete_floatArray},
    { "floatArray_getitem", _wrap_floatArray_getitem},
    { "floatArray_setitem", _wrap_floatArray_setitem},
    { "new_doubleArray", _wrap_new_doubleArray},
    { "delete_doubleArray", _wrap_delete_doubleArray},
    { "doubleArray_getitem", _wrap_doubleArray_getitem},
    { "doubleArray_setitem", _wrap_doubleArray_setitem},
    { "new_realArray", _wrap_new_realArray},
    { "delete_realArray", _wrap_delete_realArray},
    { "realArray_getitem", _wrap_realArray_getitem},
    { "realArray_setitem", _wrap_realArray_setitem},
    { "setSleepEpsilon", _wrap_setSleepEpsilon},
    { "getSleepEpsilon", _wrap_getSleepEpsilon},
    {0,0}
};
static swig_lua_class* swig_SwigModule_classes[]= {
&_wrap_class_ParticleVector,
&_wrap_class_Vector3,
&_wrap_class_Quaternion,
&_wrap_class_Matrix4,
&_wrap_class_Matrix3,
&_wrap_class_Random,
&_wrap_class_Particle,
&_wrap_class_RigidBody,
&_wrap_class_ParticleContact,
&_wrap_class_ParticleContactResolver,
&_wrap_class_ParticleContactGenerator,
&_wrap_class_ParticleLink,
&_wrap_class_ParticleCable,
&_wrap_class_ParticleRod,
&_wrap_class_ParticleConstraint,
&_wrap_class_ParticleCableConstraint,
&_wrap_class_ParticleRodConstraint,
&_wrap_class_ParticleForceGenerator,
&_wrap_class_ParticleGravity,
&_wrap_class_ParticleDrag,
&_wrap_class_ParticleAnchoredSpring,
&_wrap_class_ParticleAnchoredBungee,
&_wrap_class_ParticleFakeSpring,
&_wrap_class_ParticleSpring,
&_wrap_class_ParticleBungee,
&_wrap_class_ParticleBuoyancy,
&_wrap_class_ParticleForceRegistry,
&_wrap_class_ParticleWorld,
&_wrap_class_GroundContacts,
&_wrap_class_CollisionPrimitive,
&_wrap_class_CollisionSphere,
&_wrap_class_CollisionPlane,
&_wrap_class_CollisionBox,
&_wrap_class_IntersectionTests,
&_wrap_class_CollisionData,
&_wrap_class_CollisionDataEx,
&_wrap_class_CollisionDetector,
&_wrap_class_Contact,
&_wrap_class_ContactResolver,
&_wrap_class_ContactGenerator,
&_wrap_class_ForceGenerator,
&_wrap_class_Gravity,
&_wrap_class_Spring,
&_wrap_class_Aero,
&_wrap_class_AeroEx,
&_wrap_class_AeroControl,
&_wrap_class_Buoyancy,
&_wrap_class_ForceRegistry,
&_wrap_class_Joint,
    0
};
static swig_lua_namespace* swig_SwigModule_namespaces[] = {
    0
};

static swig_lua_namespace swig_SwigModule = {
    "cyclone",
    swig_SwigModule_methods,
    swig_SwigModule_attributes,
    swig_SwigModule_constants,
    swig_SwigModule_classes,
    swig_SwigModule_namespaces
};
#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_cyclone__ParticleLinkTo_p_cyclone__ParticleContactGenerator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cyclone::ParticleContactGenerator *)  ((cyclone::ParticleLink *) x));
}
static void *_p_cyclone__ParticleRodTo_p_cyclone__ParticleContactGenerator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cyclone::ParticleContactGenerator *) (cyclone::ParticleLink *) ((cyclone::ParticleRod *) x));
}
static void *_p_cyclone__ParticleConstraintTo_p_cyclone__ParticleContactGenerator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cyclone::ParticleContactGenerator *)  ((cyclone::ParticleConstraint *) x));
}
static void *_p_cyclone__ParticleCableConstraintTo_p_cyclone__ParticleContactGenerator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cyclone::ParticleContactGenerator *) (cyclone::ParticleConstraint *) ((cyclone::ParticleCableConstraint *) x));
}
static void *_p_cyclone__ParticleRodConstraintTo_p_cyclone__ParticleContactGenerator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cyclone::ParticleContactGenerator *) (cyclone::ParticleConstraint *) ((cyclone::ParticleRodConstraint *) x));
}
static void *_p_cyclone__GroundContactsTo_p_cyclone__ParticleContactGenerator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cyclone::ParticleContactGenerator *)  ((cyclone::GroundContacts *) x));
}
static void *_p_cyclone__ParticleCableTo_p_cyclone__ParticleContactGenerator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cyclone::ParticleContactGenerator *) (cyclone::ParticleLink *) ((cyclone::ParticleCable *) x));
}
static void *_p_cyclone__JointTo_p_cyclone__ContactGenerator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cyclone::ContactGenerator *)  ((cyclone::Joint *) x));
}
static void *_p_cyclone__GravityTo_p_cyclone__ForceGenerator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cyclone::ForceGenerator *)  ((cyclone::Gravity *) x));
}
static void *_p_cyclone__AeroControlTo_p_cyclone__ForceGenerator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cyclone::ForceGenerator *) (cyclone::Aero *)(cyclone::AeroEx *) ((cyclone::AeroControl *) x));
}
static void *_p_cyclone__SpringTo_p_cyclone__ForceGenerator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cyclone::ForceGenerator *)  ((cyclone::Spring *) x));
}
static void *_p_cyclone__AeroExTo_p_cyclone__ForceGenerator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cyclone::ForceGenerator *) (cyclone::Aero *) ((cyclone::AeroEx *) x));
}
static void *_p_cyclone__BuoyancyTo_p_cyclone__ForceGenerator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cyclone::ForceGenerator *)  ((cyclone::Buoyancy *) x));
}
static void *_p_cyclone__AeroTo_p_cyclone__ForceGenerator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cyclone::ForceGenerator *)  ((cyclone::Aero *) x));
}
static void *_p_cyclone__ParticleGravityTo_p_cyclone__ParticleForceGenerator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cyclone::ParticleForceGenerator *)  ((cyclone::ParticleGravity *) x));
}
static void *_p_cyclone__ParticleAnchoredSpringTo_p_cyclone__ParticleForceGenerator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cyclone::ParticleForceGenerator *)  ((cyclone::ParticleAnchoredSpring *) x));
}
static void *_p_cyclone__ParticleFakeSpringTo_p_cyclone__ParticleForceGenerator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cyclone::ParticleForceGenerator *)  ((cyclone::ParticleFakeSpring *) x));
}
static void *_p_cyclone__ParticleSpringTo_p_cyclone__ParticleForceGenerator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cyclone::ParticleForceGenerator *)  ((cyclone::ParticleSpring *) x));
}
static void *_p_cyclone__ParticleDragTo_p_cyclone__ParticleForceGenerator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cyclone::ParticleForceGenerator *)  ((cyclone::ParticleDrag *) x));
}
static void *_p_cyclone__ParticleBuoyancyTo_p_cyclone__ParticleForceGenerator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cyclone::ParticleForceGenerator *)  ((cyclone::ParticleBuoyancy *) x));
}
static void *_p_cyclone__ParticleAnchoredBungeeTo_p_cyclone__ParticleForceGenerator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cyclone::ParticleForceGenerator *) (cyclone::ParticleAnchoredSpring *) ((cyclone::ParticleAnchoredBungee *) x));
}
static void *_p_cyclone__ParticleBungeeTo_p_cyclone__ParticleForceGenerator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cyclone::ParticleForceGenerator *)  ((cyclone::ParticleBungee *) x));
}
static void *_p_cyclone__ParticleCableConstraintTo_p_cyclone__ParticleConstraint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cyclone::ParticleConstraint *)  ((cyclone::ParticleCableConstraint *) x));
}
static void *_p_cyclone__ParticleRodConstraintTo_p_cyclone__ParticleConstraint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cyclone::ParticleConstraint *)  ((cyclone::ParticleRodConstraint *) x));
}
static void *_p_cyclone__CollisionDataExTo_p_cyclone__CollisionData(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cyclone::CollisionData *)  ((cyclone::CollisionDataEx *) x));
}
static void *_p_cyclone__AeroControlTo_p_cyclone__Aero(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cyclone::Aero *) (cyclone::AeroEx *) ((cyclone::AeroControl *) x));
}
static void *_p_cyclone__AeroExTo_p_cyclone__Aero(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cyclone::Aero *)  ((cyclone::AeroEx *) x));
}
static void *_p_cyclone__ParticleAnchoredBungeeTo_p_cyclone__ParticleAnchoredSpring(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cyclone::ParticleAnchoredSpring *)  ((cyclone::ParticleAnchoredBungee *) x));
}
static void *_p_cyclone__CollisionBoxTo_p_cyclone__CollisionPrimitive(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cyclone::CollisionPrimitive *)  ((cyclone::CollisionBox *) x));
}
static void *_p_cyclone__CollisionSphereTo_p_cyclone__CollisionPrimitive(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cyclone::CollisionPrimitive *)  ((cyclone::CollisionSphere *) x));
}
static void *_p_cyclone__ParticleRodTo_p_cyclone__ParticleLink(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cyclone::ParticleLink *)  ((cyclone::ParticleRod *) x));
}
static void *_p_cyclone__ParticleCableTo_p_cyclone__ParticleLink(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cyclone::ParticleLink *)  ((cyclone::ParticleCable *) x));
}
static void *_p_cyclone__AeroControlTo_p_cyclone__AeroEx(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cyclone::AeroEx *)  ((cyclone::AeroControl *) x));
}
static swig_type_info _swigt__p_Contact = {"_p_Contact", "Contact *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ContactGenerators = {"_p_ContactGenerators", "ContactGenerators *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Particles = {"_p_Particles", "Particles *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cyclone__Aero = {"_p_cyclone__Aero", "cyclone::Aero *", 0, 0, (void*)&_wrap_class_Aero, 0};
static swig_type_info _swigt__p_cyclone__AeroControl = {"_p_cyclone__AeroControl", "cyclone::AeroControl *", 0, 0, (void*)&_wrap_class_AeroControl, 0};
static swig_type_info _swigt__p_cyclone__AeroEx = {"_p_cyclone__AeroEx", "cyclone::AeroEx *", 0, 0, (void*)&_wrap_class_AeroEx, 0};
static swig_type_info _swigt__p_cyclone__Buoyancy = {"_p_cyclone__Buoyancy", "cyclone::Buoyancy *", 0, 0, (void*)&_wrap_class_Buoyancy, 0};
static swig_type_info _swigt__p_cyclone__CollisionBox = {"_p_cyclone__CollisionBox", "cyclone::CollisionBox *", 0, 0, (void*)&_wrap_class_CollisionBox, 0};
static swig_type_info _swigt__p_cyclone__CollisionData = {"_p_cyclone__CollisionData", "cyclone::CollisionData *", 0, 0, (void*)&_wrap_class_CollisionData, 0};
static swig_type_info _swigt__p_cyclone__CollisionDataEx = {"_p_cyclone__CollisionDataEx", "cyclone::CollisionDataEx *", 0, 0, (void*)&_wrap_class_CollisionDataEx, 0};
static swig_type_info _swigt__p_cyclone__CollisionDetector = {"_p_cyclone__CollisionDetector", "cyclone::CollisionDetector *", 0, 0, (void*)&_wrap_class_CollisionDetector, 0};
static swig_type_info _swigt__p_cyclone__CollisionPlane = {"_p_cyclone__CollisionPlane", "cyclone::CollisionPlane *", 0, 0, (void*)&_wrap_class_CollisionPlane, 0};
static swig_type_info _swigt__p_cyclone__CollisionPrimitive = {"_p_cyclone__CollisionPrimitive", "cyclone::CollisionPrimitive *", 0, 0, (void*)&_wrap_class_CollisionPrimitive, 0};
static swig_type_info _swigt__p_cyclone__CollisionSphere = {"_p_cyclone__CollisionSphere", "cyclone::CollisionSphere *", 0, 0, (void*)&_wrap_class_CollisionSphere, 0};
static swig_type_info _swigt__p_cyclone__Contact = {"_p_cyclone__Contact", "cyclone::Contact *", 0, 0, (void*)&_wrap_class_Contact, 0};
static swig_type_info _swigt__p_cyclone__ContactGenerator = {"_p_cyclone__ContactGenerator", "cyclone::ContactGenerator *", 0, 0, (void*)&_wrap_class_ContactGenerator, 0};
static swig_type_info _swigt__p_cyclone__ContactResolver = {"_p_cyclone__ContactResolver", "cyclone::ContactResolver *", 0, 0, (void*)&_wrap_class_ContactResolver, 0};
static swig_type_info _swigt__p_cyclone__ForceGenerator = {"_p_cyclone__ForceGenerator", "cyclone::ForceGenerator *", 0, 0, (void*)&_wrap_class_ForceGenerator, 0};
static swig_type_info _swigt__p_cyclone__ForceRegistry = {"_p_cyclone__ForceRegistry", "cyclone::ForceRegistry *", 0, 0, (void*)&_wrap_class_ForceRegistry, 0};
static swig_type_info _swigt__p_cyclone__Gravity = {"_p_cyclone__Gravity", "cyclone::Gravity *", 0, 0, (void*)&_wrap_class_Gravity, 0};
static swig_type_info _swigt__p_cyclone__GroundContacts = {"_p_cyclone__GroundContacts", "cyclone::GroundContacts *", 0, 0, (void*)&_wrap_class_GroundContacts, 0};
static swig_type_info _swigt__p_cyclone__IntersectionTests = {"_p_cyclone__IntersectionTests", "cyclone::IntersectionTests *", 0, 0, (void*)&_wrap_class_IntersectionTests, 0};
static swig_type_info _swigt__p_cyclone__Joint = {"_p_cyclone__Joint", "cyclone::Joint *", 0, 0, (void*)&_wrap_class_Joint, 0};
static swig_type_info _swigt__p_cyclone__Matrix3 = {"_p_cyclone__Matrix3", "cyclone::Matrix3 *", 0, 0, (void*)&_wrap_class_Matrix3, 0};
static swig_type_info _swigt__p_cyclone__Matrix4 = {"_p_cyclone__Matrix4", "cyclone::Matrix4 *", 0, 0, (void*)&_wrap_class_Matrix4, 0};
static swig_type_info _swigt__p_cyclone__Particle = {"_p_cyclone__Particle", "cyclone::Particle *", 0, 0, (void*)&_wrap_class_Particle, 0};
static swig_type_info _swigt__p_cyclone__ParticleAnchoredBungee = {"_p_cyclone__ParticleAnchoredBungee", "cyclone::ParticleAnchoredBungee *", 0, 0, (void*)&_wrap_class_ParticleAnchoredBungee, 0};
static swig_type_info _swigt__p_cyclone__ParticleAnchoredSpring = {"_p_cyclone__ParticleAnchoredSpring", "cyclone::ParticleAnchoredSpring *", 0, 0, (void*)&_wrap_class_ParticleAnchoredSpring, 0};
static swig_type_info _swigt__p_cyclone__ParticleBungee = {"_p_cyclone__ParticleBungee", "cyclone::ParticleBungee *", 0, 0, (void*)&_wrap_class_ParticleBungee, 0};
static swig_type_info _swigt__p_cyclone__ParticleBuoyancy = {"_p_cyclone__ParticleBuoyancy", "cyclone::ParticleBuoyancy *", 0, 0, (void*)&_wrap_class_ParticleBuoyancy, 0};
static swig_type_info _swigt__p_cyclone__ParticleCable = {"_p_cyclone__ParticleCable", "cyclone::ParticleCable *", 0, 0, (void*)&_wrap_class_ParticleCable, 0};
static swig_type_info _swigt__p_cyclone__ParticleCableConstraint = {"_p_cyclone__ParticleCableConstraint", "cyclone::ParticleCableConstraint *", 0, 0, (void*)&_wrap_class_ParticleCableConstraint, 0};
static swig_type_info _swigt__p_cyclone__ParticleConstraint = {"_p_cyclone__ParticleConstraint", "cyclone::ParticleConstraint *", 0, 0, (void*)&_wrap_class_ParticleConstraint, 0};
static swig_type_info _swigt__p_cyclone__ParticleContact = {"_p_cyclone__ParticleContact", "cyclone::ParticleContact *", 0, 0, (void*)&_wrap_class_ParticleContact, 0};
static swig_type_info _swigt__p_cyclone__ParticleContactGenerator = {"_p_cyclone__ParticleContactGenerator", "cyclone::ParticleContactGenerator *", 0, 0, (void*)&_wrap_class_ParticleContactGenerator, 0};
static swig_type_info _swigt__p_cyclone__ParticleContactResolver = {"_p_cyclone__ParticleContactResolver", "cyclone::ParticleContactResolver *", 0, 0, (void*)&_wrap_class_ParticleContactResolver, 0};
static swig_type_info _swigt__p_cyclone__ParticleDrag = {"_p_cyclone__ParticleDrag", "cyclone::ParticleDrag *", 0, 0, (void*)&_wrap_class_ParticleDrag, 0};
static swig_type_info _swigt__p_cyclone__ParticleFakeSpring = {"_p_cyclone__ParticleFakeSpring", "cyclone::ParticleFakeSpring *", 0, 0, (void*)&_wrap_class_ParticleFakeSpring, 0};
static swig_type_info _swigt__p_cyclone__ParticleForceGenerator = {"_p_cyclone__ParticleForceGenerator", "cyclone::ParticleForceGenerator *", 0, 0, (void*)&_wrap_class_ParticleForceGenerator, 0};
static swig_type_info _swigt__p_cyclone__ParticleForceRegistry = {"_p_cyclone__ParticleForceRegistry", "cyclone::ParticleForceRegistry *", 0, 0, (void*)&_wrap_class_ParticleForceRegistry, 0};
static swig_type_info _swigt__p_cyclone__ParticleGravity = {"_p_cyclone__ParticleGravity", "cyclone::ParticleGravity *", 0, 0, (void*)&_wrap_class_ParticleGravity, 0};
static swig_type_info _swigt__p_cyclone__ParticleLink = {"_p_cyclone__ParticleLink", "cyclone::ParticleLink *", 0, 0, (void*)&_wrap_class_ParticleLink, 0};
static swig_type_info _swigt__p_cyclone__ParticleRod = {"_p_cyclone__ParticleRod", "cyclone::ParticleRod *", 0, 0, (void*)&_wrap_class_ParticleRod, 0};
static swig_type_info _swigt__p_cyclone__ParticleRodConstraint = {"_p_cyclone__ParticleRodConstraint", "cyclone::ParticleRodConstraint *", 0, 0, (void*)&_wrap_class_ParticleRodConstraint, 0};
static swig_type_info _swigt__p_cyclone__ParticleSpring = {"_p_cyclone__ParticleSpring", "cyclone::ParticleSpring *", 0, 0, (void*)&_wrap_class_ParticleSpring, 0};
static swig_type_info _swigt__p_cyclone__ParticleWorld = {"_p_cyclone__ParticleWorld", "cyclone::ParticleWorld *", 0, 0, (void*)&_wrap_class_ParticleWorld, 0};
static swig_type_info _swigt__p_cyclone__Quaternion = {"_p_cyclone__Quaternion", "cyclone::Quaternion *", 0, 0, (void*)&_wrap_class_Quaternion, 0};
static swig_type_info _swigt__p_cyclone__Random = {"_p_cyclone__Random", "cyclone::Random *", 0, 0, (void*)&_wrap_class_Random, 0};
static swig_type_info _swigt__p_cyclone__RigidBody = {"_p_cyclone__RigidBody", "cyclone::RigidBody *", 0, 0, (void*)&_wrap_class_RigidBody, 0};
static swig_type_info _swigt__p_cyclone__Spring = {"_p_cyclone__Spring", "cyclone::Spring *", 0, 0, (void*)&_wrap_class_Spring, 0};
static swig_type_info _swigt__p_cyclone__Vector3 = {"_p_cyclone__Vector3", "cyclone::Vector3 *", 0, 0, (void*)&_wrap_class_Vector3, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "cyclone::real *|double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_cyclone__Particle = {"_p_p_cyclone__Particle", "cyclone::Particle **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_cyclone__RigidBody = {"_p_p_cyclone__RigidBody", "cyclone::RigidBody **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_cyclone__ParticleContactGenerator_p_t = {"_p_std__vectorT_cyclone__ParticleContactGenerator_p_t", "std::vector< cyclone::ParticleContactGenerator * > *|cyclone::ParticleWorld::ContactGenerators *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_cyclone__Particle_p_t = {"_p_std__vectorT_cyclone__Particle_p_t", "cyclone::ParticleWorld::Particles *|std::vector< cyclone::Particle * > *", 0, 0, (void*)&_wrap_class_ParticleVector, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Contact,
  &_swigt__p_ContactGenerators,
  &_swigt__p_Particles,
  &_swigt__p_cyclone__Aero,
  &_swigt__p_cyclone__AeroControl,
  &_swigt__p_cyclone__AeroEx,
  &_swigt__p_cyclone__Buoyancy,
  &_swigt__p_cyclone__CollisionBox,
  &_swigt__p_cyclone__CollisionData,
  &_swigt__p_cyclone__CollisionDataEx,
  &_swigt__p_cyclone__CollisionDetector,
  &_swigt__p_cyclone__CollisionPlane,
  &_swigt__p_cyclone__CollisionPrimitive,
  &_swigt__p_cyclone__CollisionSphere,
  &_swigt__p_cyclone__Contact,
  &_swigt__p_cyclone__ContactGenerator,
  &_swigt__p_cyclone__ContactResolver,
  &_swigt__p_cyclone__ForceGenerator,
  &_swigt__p_cyclone__ForceRegistry,
  &_swigt__p_cyclone__Gravity,
  &_swigt__p_cyclone__GroundContacts,
  &_swigt__p_cyclone__IntersectionTests,
  &_swigt__p_cyclone__Joint,
  &_swigt__p_cyclone__Matrix3,
  &_swigt__p_cyclone__Matrix4,
  &_swigt__p_cyclone__Particle,
  &_swigt__p_cyclone__ParticleAnchoredBungee,
  &_swigt__p_cyclone__ParticleAnchoredSpring,
  &_swigt__p_cyclone__ParticleBungee,
  &_swigt__p_cyclone__ParticleBuoyancy,
  &_swigt__p_cyclone__ParticleCable,
  &_swigt__p_cyclone__ParticleCableConstraint,
  &_swigt__p_cyclone__ParticleConstraint,
  &_swigt__p_cyclone__ParticleContact,
  &_swigt__p_cyclone__ParticleContactGenerator,
  &_swigt__p_cyclone__ParticleContactResolver,
  &_swigt__p_cyclone__ParticleDrag,
  &_swigt__p_cyclone__ParticleFakeSpring,
  &_swigt__p_cyclone__ParticleForceGenerator,
  &_swigt__p_cyclone__ParticleForceRegistry,
  &_swigt__p_cyclone__ParticleGravity,
  &_swigt__p_cyclone__ParticleLink,
  &_swigt__p_cyclone__ParticleRod,
  &_swigt__p_cyclone__ParticleRodConstraint,
  &_swigt__p_cyclone__ParticleSpring,
  &_swigt__p_cyclone__ParticleWorld,
  &_swigt__p_cyclone__Quaternion,
  &_swigt__p_cyclone__Random,
  &_swigt__p_cyclone__RigidBody,
  &_swigt__p_cyclone__Spring,
  &_swigt__p_cyclone__Vector3,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_p_cyclone__Particle,
  &_swigt__p_p_cyclone__RigidBody,
  &_swigt__p_size_type,
  &_swigt__p_std__vectorT_cyclone__ParticleContactGenerator_p_t,
  &_swigt__p_std__vectorT_cyclone__Particle_p_t,
  &_swigt__p_value_type,
};

static swig_cast_info _swigc__p_Contact[] = {  {&_swigt__p_Contact, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ContactGenerators[] = {  {&_swigt__p_ContactGenerators, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Particles[] = {  {&_swigt__p_Particles, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cyclone__Aero[] = {  {&_swigt__p_cyclone__Aero, 0, 0, 0},  {&_swigt__p_cyclone__AeroControl, _p_cyclone__AeroControlTo_p_cyclone__Aero, 0, 0},  {&_swigt__p_cyclone__AeroEx, _p_cyclone__AeroExTo_p_cyclone__Aero, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cyclone__AeroControl[] = {  {&_swigt__p_cyclone__AeroControl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cyclone__AeroEx[] = {  {&_swigt__p_cyclone__AeroControl, _p_cyclone__AeroControlTo_p_cyclone__AeroEx, 0, 0},  {&_swigt__p_cyclone__AeroEx, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cyclone__Buoyancy[] = {  {&_swigt__p_cyclone__Buoyancy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cyclone__CollisionBox[] = {  {&_swigt__p_cyclone__CollisionBox, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cyclone__CollisionData[] = {  {&_swigt__p_cyclone__CollisionDataEx, _p_cyclone__CollisionDataExTo_p_cyclone__CollisionData, 0, 0},  {&_swigt__p_cyclone__CollisionData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cyclone__CollisionDataEx[] = {  {&_swigt__p_cyclone__CollisionDataEx, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cyclone__CollisionDetector[] = {  {&_swigt__p_cyclone__CollisionDetector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cyclone__CollisionPlane[] = {  {&_swigt__p_cyclone__CollisionPlane, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cyclone__CollisionPrimitive[] = {  {&_swigt__p_cyclone__CollisionPrimitive, 0, 0, 0},  {&_swigt__p_cyclone__CollisionBox, _p_cyclone__CollisionBoxTo_p_cyclone__CollisionPrimitive, 0, 0},  {&_swigt__p_cyclone__CollisionSphere, _p_cyclone__CollisionSphereTo_p_cyclone__CollisionPrimitive, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cyclone__CollisionSphere[] = {  {&_swigt__p_cyclone__CollisionSphere, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cyclone__Contact[] = {  {&_swigt__p_cyclone__Contact, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cyclone__ContactGenerator[] = {  {&_swigt__p_cyclone__Joint, _p_cyclone__JointTo_p_cyclone__ContactGenerator, 0, 0},  {&_swigt__p_cyclone__ContactGenerator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cyclone__ContactResolver[] = {  {&_swigt__p_cyclone__ContactResolver, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cyclone__ForceGenerator[] = {  {&_swigt__p_cyclone__Gravity, _p_cyclone__GravityTo_p_cyclone__ForceGenerator, 0, 0},  {&_swigt__p_cyclone__AeroControl, _p_cyclone__AeroControlTo_p_cyclone__ForceGenerator, 0, 0},  {&_swigt__p_cyclone__Aero, _p_cyclone__AeroTo_p_cyclone__ForceGenerator, 0, 0},  {&_swigt__p_cyclone__ForceGenerator, 0, 0, 0},  {&_swigt__p_cyclone__Spring, _p_cyclone__SpringTo_p_cyclone__ForceGenerator, 0, 0},  {&_swigt__p_cyclone__Buoyancy, _p_cyclone__BuoyancyTo_p_cyclone__ForceGenerator, 0, 0},  {&_swigt__p_cyclone__AeroEx, _p_cyclone__AeroExTo_p_cyclone__ForceGenerator, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cyclone__ForceRegistry[] = {  {&_swigt__p_cyclone__ForceRegistry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cyclone__Gravity[] = {  {&_swigt__p_cyclone__Gravity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cyclone__GroundContacts[] = {  {&_swigt__p_cyclone__GroundContacts, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cyclone__IntersectionTests[] = {  {&_swigt__p_cyclone__IntersectionTests, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cyclone__Joint[] = {  {&_swigt__p_cyclone__Joint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cyclone__Matrix3[] = {  {&_swigt__p_cyclone__Matrix3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cyclone__Matrix4[] = {  {&_swigt__p_cyclone__Matrix4, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cyclone__Particle[] = {  {&_swigt__p_cyclone__Particle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cyclone__ParticleAnchoredBungee[] = {  {&_swigt__p_cyclone__ParticleAnchoredBungee, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cyclone__ParticleAnchoredSpring[] = {  {&_swigt__p_cyclone__ParticleAnchoredSpring, 0, 0, 0},  {&_swigt__p_cyclone__ParticleAnchoredBungee, _p_cyclone__ParticleAnchoredBungeeTo_p_cyclone__ParticleAnchoredSpring, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cyclone__ParticleBungee[] = {  {&_swigt__p_cyclone__ParticleBungee, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cyclone__ParticleBuoyancy[] = {  {&_swigt__p_cyclone__ParticleBuoyancy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cyclone__ParticleCable[] = {  {&_swigt__p_cyclone__ParticleCable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cyclone__ParticleCableConstraint[] = {  {&_swigt__p_cyclone__ParticleCableConstraint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cyclone__ParticleConstraint[] = {  {&_swigt__p_cyclone__ParticleConstraint, 0, 0, 0},  {&_swigt__p_cyclone__ParticleCableConstraint, _p_cyclone__ParticleCableConstraintTo_p_cyclone__ParticleConstraint, 0, 0},  {&_swigt__p_cyclone__ParticleRodConstraint, _p_cyclone__ParticleRodConstraintTo_p_cyclone__ParticleConstraint, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cyclone__ParticleContact[] = {  {&_swigt__p_cyclone__ParticleContact, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cyclone__ParticleContactGenerator[] = {  {&_swigt__p_cyclone__ParticleLink, _p_cyclone__ParticleLinkTo_p_cyclone__ParticleContactGenerator, 0, 0},  {&_swigt__p_cyclone__ParticleRod, _p_cyclone__ParticleRodTo_p_cyclone__ParticleContactGenerator, 0, 0},  {&_swigt__p_cyclone__ParticleConstraint, _p_cyclone__ParticleConstraintTo_p_cyclone__ParticleContactGenerator, 0, 0},  {&_swigt__p_cyclone__ParticleCableConstraint, _p_cyclone__ParticleCableConstraintTo_p_cyclone__ParticleContactGenerator, 0, 0},  {&_swigt__p_cyclone__ParticleRodConstraint, _p_cyclone__ParticleRodConstraintTo_p_cyclone__ParticleContactGenerator, 0, 0},  {&_swigt__p_cyclone__GroundContacts, _p_cyclone__GroundContactsTo_p_cyclone__ParticleContactGenerator, 0, 0},  {&_swigt__p_cyclone__ParticleContactGenerator, 0, 0, 0},  {&_swigt__p_cyclone__ParticleCable, _p_cyclone__ParticleCableTo_p_cyclone__ParticleContactGenerator, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cyclone__ParticleContactResolver[] = {  {&_swigt__p_cyclone__ParticleContactResolver, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cyclone__ParticleDrag[] = {  {&_swigt__p_cyclone__ParticleDrag, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cyclone__ParticleFakeSpring[] = {  {&_swigt__p_cyclone__ParticleFakeSpring, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cyclone__ParticleForceGenerator[] = {  {&_swigt__p_cyclone__ParticleGravity, _p_cyclone__ParticleGravityTo_p_cyclone__ParticleForceGenerator, 0, 0},  {&_swigt__p_cyclone__ParticleAnchoredSpring, _p_cyclone__ParticleAnchoredSpringTo_p_cyclone__ParticleForceGenerator, 0, 0},  {&_swigt__p_cyclone__ParticleForceGenerator, 0, 0, 0},  {&_swigt__p_cyclone__ParticleFakeSpring, _p_cyclone__ParticleFakeSpringTo_p_cyclone__ParticleForceGenerator, 0, 0},  {&_swigt__p_cyclone__ParticleSpring, _p_cyclone__ParticleSpringTo_p_cyclone__ParticleForceGenerator, 0, 0},  {&_swigt__p_cyclone__ParticleDrag, _p_cyclone__ParticleDragTo_p_cyclone__ParticleForceGenerator, 0, 0},  {&_swigt__p_cyclone__ParticleBuoyancy, _p_cyclone__ParticleBuoyancyTo_p_cyclone__ParticleForceGenerator, 0, 0},  {&_swigt__p_cyclone__ParticleAnchoredBungee, _p_cyclone__ParticleAnchoredBungeeTo_p_cyclone__ParticleForceGenerator, 0, 0},  {&_swigt__p_cyclone__ParticleBungee, _p_cyclone__ParticleBungeeTo_p_cyclone__ParticleForceGenerator, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cyclone__ParticleForceRegistry[] = {  {&_swigt__p_cyclone__ParticleForceRegistry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cyclone__ParticleGravity[] = {  {&_swigt__p_cyclone__ParticleGravity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cyclone__ParticleLink[] = {  {&_swigt__p_cyclone__ParticleLink, 0, 0, 0},  {&_swigt__p_cyclone__ParticleRod, _p_cyclone__ParticleRodTo_p_cyclone__ParticleLink, 0, 0},  {&_swigt__p_cyclone__ParticleCable, _p_cyclone__ParticleCableTo_p_cyclone__ParticleLink, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cyclone__ParticleRod[] = {  {&_swigt__p_cyclone__ParticleRod, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cyclone__ParticleRodConstraint[] = {  {&_swigt__p_cyclone__ParticleRodConstraint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cyclone__ParticleSpring[] = {  {&_swigt__p_cyclone__ParticleSpring, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cyclone__ParticleWorld[] = {  {&_swigt__p_cyclone__ParticleWorld, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cyclone__Quaternion[] = {  {&_swigt__p_cyclone__Quaternion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cyclone__Random[] = {  {&_swigt__p_cyclone__Random, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cyclone__RigidBody[] = {  {&_swigt__p_cyclone__RigidBody, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cyclone__Spring[] = {  {&_swigt__p_cyclone__Spring, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cyclone__Vector3[] = {  {&_swigt__p_cyclone__Vector3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_cyclone__Particle[] = {  {&_swigt__p_p_cyclone__Particle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_cyclone__RigidBody[] = {  {&_swigt__p_p_cyclone__RigidBody, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_cyclone__ParticleContactGenerator_p_t[] = {  {&_swigt__p_std__vectorT_cyclone__ParticleContactGenerator_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_cyclone__Particle_p_t[] = {  {&_swigt__p_std__vectorT_cyclone__Particle_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Contact,
  _swigc__p_ContactGenerators,
  _swigc__p_Particles,
  _swigc__p_cyclone__Aero,
  _swigc__p_cyclone__AeroControl,
  _swigc__p_cyclone__AeroEx,
  _swigc__p_cyclone__Buoyancy,
  _swigc__p_cyclone__CollisionBox,
  _swigc__p_cyclone__CollisionData,
  _swigc__p_cyclone__CollisionDataEx,
  _swigc__p_cyclone__CollisionDetector,
  _swigc__p_cyclone__CollisionPlane,
  _swigc__p_cyclone__CollisionPrimitive,
  _swigc__p_cyclone__CollisionSphere,
  _swigc__p_cyclone__Contact,
  _swigc__p_cyclone__ContactGenerator,
  _swigc__p_cyclone__ContactResolver,
  _swigc__p_cyclone__ForceGenerator,
  _swigc__p_cyclone__ForceRegistry,
  _swigc__p_cyclone__Gravity,
  _swigc__p_cyclone__GroundContacts,
  _swigc__p_cyclone__IntersectionTests,
  _swigc__p_cyclone__Joint,
  _swigc__p_cyclone__Matrix3,
  _swigc__p_cyclone__Matrix4,
  _swigc__p_cyclone__Particle,
  _swigc__p_cyclone__ParticleAnchoredBungee,
  _swigc__p_cyclone__ParticleAnchoredSpring,
  _swigc__p_cyclone__ParticleBungee,
  _swigc__p_cyclone__ParticleBuoyancy,
  _swigc__p_cyclone__ParticleCable,
  _swigc__p_cyclone__ParticleCableConstraint,
  _swigc__p_cyclone__ParticleConstraint,
  _swigc__p_cyclone__ParticleContact,
  _swigc__p_cyclone__ParticleContactGenerator,
  _swigc__p_cyclone__ParticleContactResolver,
  _swigc__p_cyclone__ParticleDrag,
  _swigc__p_cyclone__ParticleFakeSpring,
  _swigc__p_cyclone__ParticleForceGenerator,
  _swigc__p_cyclone__ParticleForceRegistry,
  _swigc__p_cyclone__ParticleGravity,
  _swigc__p_cyclone__ParticleLink,
  _swigc__p_cyclone__ParticleRod,
  _swigc__p_cyclone__ParticleRodConstraint,
  _swigc__p_cyclone__ParticleSpring,
  _swigc__p_cyclone__ParticleWorld,
  _swigc__p_cyclone__Quaternion,
  _swigc__p_cyclone__Random,
  _swigc__p_cyclone__RigidBody,
  _swigc__p_cyclone__Spring,
  _swigc__p_cyclone__Vector3,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_p_cyclone__Particle,
  _swigc__p_p_cyclone__RigidBody,
  _swigc__p_size_type,
  _swigc__p_std__vectorT_cyclone__ParticleContactGenerator_p_t,
  _swigc__p_std__vectorT_cyclone__Particle_p_t,
  _swigc__p_value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  int globalRegister = 0;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initialisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)) || defined(SWIG_LUA_ELUA_EMULATE)
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_class_equal);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#ifdef SWIG_LUA_MODULE_GLOBAL
  globalRegister = 1;
#endif


#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  SWIG_Lua_namespace_register(L,&swig_SwigModule, globalRegister);
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_elua_class_register_instance(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)
  lua_newtable(L);
  SWIG_Lua_elua_emulate_register(L,swig_SwigModule.ns_methods);
  SWIG_Lua_elua_emulate_register_clear(L);
  if(globalRegister) {
    lua_pushstring(L,swig_SwigModule.name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4);
  }
#endif

#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

